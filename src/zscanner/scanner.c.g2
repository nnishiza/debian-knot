
/*  Copyright (C) 2016 CZ.NIC, z.s.p.o. <knot-dns@labs.nic.cz>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <arpa/inet.h>
#include <fcntl.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>
#include <math.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#include "zscanner/scanner.h"
#include "zscanner/functions.h"
#include "libknot/descriptor.h"

/*! \brief Shorthand for setting warning data. */
#define WARN(err_code) { s->error.code = err_code; }
/*! \brief Shorthand for setting error data. */
#define ERR(err_code) { WARN(err_code); s->error.fatal = true; }
/*! \brief Shorthand for error reset. */
#define NOERR { WARN(ZS_OK); s->error.fatal = false; }

/*!
 * \brief Writes record type number to r_data.
 *
 * \param type		Type number.
 * \param rdata_tail	Position where to write type number to.
 */
static inline void type_num(const uint16_t type, uint8_t **rdata_tail)
{
	*((uint16_t *)*rdata_tail) = htons(type);
	*rdata_tail += 2;
}

/*!
 * \brief Sets bit to bitmap window.
 *
 * \param type		Type number.
 * \param s		Scanner context.
 */
static inline void window_add_bit(const uint16_t type, zs_scanner_t *s) {
	uint8_t win      = type / 256;
	uint8_t bit_pos  = type % 256;
	uint8_t byte_pos = bit_pos / 8;

	((s->windows[win]).bitmap)[byte_pos] |= 128 >> (bit_pos % 8);

	if ((s->windows[win]).length < byte_pos + 1) {
		(s->windows[win]).length = byte_pos + 1;
	}

	if (s->last_window < win) {
		s->last_window = win;
	}
}

// Include scanner file (in Ragel).






__attribute__((visibility("default")))
int zs_init(
	zs_scanner_t *s,
	const char *origin,
	const uint16_t rclass,
	const uint32_t ttl)
{
	if (s == NULL) {
		return -1;
	}

	memset(s, 0, sizeof(*s));

	// Nonzero initial scanner state.
	s->cs = 1111;

	// Reset the file descriptor.
	s->file.descriptor = -1;

	// Use the root zone as origin if not specified.
	if (origin == NULL || strlen(origin) == 0) {
		origin = ".";
	}
	size_t origin_len = strlen(origin);

	// Prepare a zone settings header.
	const char *format;
	if (origin[origin_len - 1] != '.') {
		format = "$ORIGIN %s.\n";
	} else {
		format = "$ORIGIN %s\n";
	}

	char settings[1024];
	int ret = snprintf(settings, sizeof(settings), format, origin);
	if (ret <= 0 || ret >= sizeof(settings)) {
		ERR(ZS_ENOMEM);
		return -1;
	}

	// Parse the settings to set up the scanner origin.
	if (zs_set_input_string(s, settings, ret) != 0 ||
	    zs_parse_all(s) != 0) {
		return -1;
	}

	// Set scanner defaults.
	s->path = strdup(".");
	if (s->path == NULL) {
		ERR(ZS_ENOMEM);
		return -1;
	}
	s->default_class = rclass;
	s->default_ttl = ttl;
	s->line_counter = 1;

	s->state = ZS_STATE_NONE;
	s->process.automatic = false;

	return 0;
}

static void input_deinit(
	zs_scanner_t *s)
{
	// Deinit the file input.
	if (s->file.descriptor != -1) {
		// Unmap the file content.
		if (s->input.start != NULL) {
			munmap((void *)s->input.start,
			       s->input.end - s->input.start);
		}

		// Close the opened file.
		close(s->file.descriptor);
		s->file.descriptor = -1;
		free(s->file.name);
		s->file.name = NULL;
	}

	// Unset the input limits.
	s->input.start   = NULL;
	s->input.current = NULL;
	s->input.end     = NULL;
	s->input.eof     = false;
}

__attribute__((visibility("default")))
void zs_deinit(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return;
	}

	input_deinit(s);
	free(s->path);
}

__attribute__((visibility("default")))
int zs_set_input_string(
	zs_scanner_t *s,
	const char *input,
	size_t size)
{
	if (s == NULL) {
		return -1;
	}

	if (input == NULL) {
		ERR(ZS_EINVAL);
		return -1;
	}

	// Deinit possibly opened file.
	input_deinit(s);

	// Set the scanner input limits.
	s->input.start   = input;
	s->input.current = input;
	s->input.end     = input + size;

	return 0;
}

__attribute__((visibility("default")))
int zs_set_input_file(
	zs_scanner_t *s,
	const char *file_name)
{
	if (s == NULL) {
		return -1;
	}

	if (file_name == NULL) {
		ERR(ZS_EINVAL);
		return -1;
	}

	// Deinit possibly opened file.
	input_deinit(s);

	// Try to open the file.
	s->file.descriptor = open(file_name, O_RDONLY);
	if (s->file.descriptor == -1) {
		ERR(ZS_FILE_OPEN);
		return -1;
	}

	// Check for regular file input.
	struct stat file_stat;
	if (fstat(s->file.descriptor, &file_stat) == -1 ||
	    !S_ISREG(file_stat.st_mode)) {
		ERR(ZS_FILE_INVALID);
		input_deinit(s);
		return -1;
	}

	// Check for empty file (cannot mmap).
	if (file_stat.st_size > 0) {
		// Map the file to the memory.
		char *start = mmap(0, file_stat.st_size, PROT_READ, MAP_SHARED,
		                   s->file.descriptor, 0);
		if (start == MAP_FAILED) {
			ERR(ZS_FILE_MMAP);
			input_deinit(s);
			return -1;
		}

		// Try to set the mapped memory advise to sequential.
		(void)madvise(start, file_stat.st_size, MADV_SEQUENTIAL);

		// Set the scanner input limits.
		s->input.start   = start;
		s->input.current = start;
		s->input.end     = start + file_stat.st_size;
	}

	// Get absolute path of the zone file.
	char *full_name = realpath(file_name, NULL);
	if (full_name != NULL) {
		free(s->path);
		s->path = strdup(dirname(full_name));
		free(full_name);
		if (s->path == NULL) {
			ERR(ZS_ENOMEM);
			input_deinit(s);
			return -1;
		}
	} else {
		ERR(ZS_FILE_PATH);
		input_deinit(s);
		return -1;
	}

	s->file.name = strdup(file_name);
	if (s->file.name == NULL) {
		ERR(ZS_ENOMEM);
		input_deinit(s);
		return -1;
	}

	return 0;
}

__attribute__((visibility("default")))
int zs_set_processing(
	zs_scanner_t *s,
	void (*process_record)(zs_scanner_t *),
	void (*process_error)(zs_scanner_t *),
	void *data)
{
	if (s == NULL) {
		return -1;
	}

	s->process.record = process_record;
	s->process.error = process_error;
	s->process.data = data;

	return 0;
}

static void parse(
	zs_scanner_t *s)
{
	// Restore scanner input limits (Ragel internals).
	const char *p = s->input.current;
	const char *pe = s->input.end;
	const char *eof = s->input.eof ? pe : NULL;

	// Restore state variables (Ragel internals).
	int cs  = s->cs;
	int top = s->top;
	int stack[RAGEL_STACK_SIZE];
	memcpy(stack, s->stack, sizeof(stack));

	// Auxiliary variables which are used in scanner body.
	struct in_addr  addr4;
	struct in6_addr addr6;
	uint32_t timestamp;
	int16_t  window;
	int      ret;

	// Next 2 variables are for better performance.
	// Restoring r_data pointer to next free space.
	uint8_t *rdata_tail = s->r_data + s->r_data_tail;
	// Initialization of the last r_data byte.
	uint8_t *rdata_stop = s->r_data + MAX_RDATA_LENGTH - 1;

	// External processing interrupt indicator.
	bool escape = false;

	// Write scanner body (in C).

	{
	short _widec;
	if ( p == pe )
		goto _test_eof;
	goto _resume;

_again:
	switch ( cs ) {
		case 1111: goto st1111;
		case 0: goto st0;
		case 1: goto st1;
		case 2: goto st2;
		case 3: goto st3;
		case 4: goto st4;
		case 5: goto st5;
		case 6: goto st6;
		case 7: goto st7;
		case 8: goto st8;
		case 9: goto st9;
		case 10: goto st10;
		case 11: goto st11;
		case 12: goto st12;
		case 1112: goto st1112;
		case 13: goto st13;
		case 14: goto st14;
		case 15: goto st15;
		case 16: goto st16;
		case 17: goto st17;
		case 18: goto st18;
		case 19: goto st19;
		case 20: goto st20;
		case 21: goto st21;
		case 22: goto st22;
		case 23: goto st23;
		case 24: goto st24;
		case 25: goto st25;
		case 26: goto st26;
		case 27: goto st27;
		case 28: goto st28;
		case 29: goto st29;
		case 30: goto st30;
		case 31: goto st31;
		case 32: goto st32;
		case 33: goto st33;
		case 34: goto st34;
		case 35: goto st35;
		case 36: goto st36;
		case 37: goto st37;
		case 38: goto st38;
		case 39: goto st39;
		case 40: goto st40;
		case 41: goto st41;
		case 42: goto st42;
		case 43: goto st43;
		case 44: goto st44;
		case 45: goto st45;
		case 46: goto st46;
		case 47: goto st47;
		case 48: goto st48;
		case 49: goto st49;
		case 50: goto st50;
		case 51: goto st51;
		case 52: goto st52;
		case 53: goto st53;
		case 54: goto st54;
		case 55: goto st55;
		case 56: goto st56;
		case 57: goto st57;
		case 58: goto st58;
		case 59: goto st59;
		case 60: goto st60;
		case 61: goto st61;
		case 62: goto st62;
		case 63: goto st63;
		case 64: goto st64;
		case 65: goto st65;
		case 66: goto st66;
		case 67: goto st67;
		case 68: goto st68;
		case 69: goto st69;
		case 70: goto st70;
		case 71: goto st71;
		case 72: goto st72;
		case 73: goto st73;
		case 74: goto st74;
		case 75: goto st75;
		case 76: goto st76;
		case 77: goto st77;
		case 78: goto st78;
		case 79: goto st79;
		case 80: goto st80;
		case 81: goto st81;
		case 82: goto st82;
		case 83: goto st83;
		case 84: goto st84;
		case 85: goto st85;
		case 86: goto st86;
		case 87: goto st87;
		case 88: goto st88;
		case 89: goto st89;
		case 90: goto st90;
		case 91: goto st91;
		case 92: goto st92;
		case 93: goto st93;
		case 94: goto st94;
		case 95: goto st95;
		case 96: goto st96;
		case 97: goto st97;
		case 98: goto st98;
		case 99: goto st99;
		case 100: goto st100;
		case 101: goto st101;
		case 102: goto st102;
		case 103: goto st103;
		case 104: goto st104;
		case 105: goto st105;
		case 106: goto st106;
		case 107: goto st107;
		case 108: goto st108;
		case 109: goto st109;
		case 110: goto st110;
		case 111: goto st111;
		case 112: goto st112;
		case 113: goto st113;
		case 114: goto st114;
		case 115: goto st115;
		case 116: goto st116;
		case 117: goto st117;
		case 118: goto st118;
		case 119: goto st119;
		case 120: goto st120;
		case 121: goto st121;
		case 122: goto st122;
		case 123: goto st123;
		case 124: goto st124;
		case 125: goto st125;
		case 126: goto st126;
		case 127: goto st127;
		case 128: goto st128;
		case 129: goto st129;
		case 130: goto st130;
		case 131: goto st131;
		case 132: goto st132;
		case 133: goto st133;
		case 134: goto st134;
		case 135: goto st135;
		case 136: goto st136;
		case 137: goto st137;
		case 138: goto st138;
		case 139: goto st139;
		case 1113: goto st1113;
		case 140: goto st140;
		case 141: goto st141;
		case 142: goto st142;
		case 143: goto st143;
		case 144: goto st144;
		case 145: goto st145;
		case 146: goto st146;
		case 147: goto st147;
		case 148: goto st148;
		case 149: goto st149;
		case 1114: goto st1114;
		case 150: goto st150;
		case 151: goto st151;
		case 152: goto st152;
		case 153: goto st153;
		case 154: goto st154;
		case 155: goto st155;
		case 156: goto st156;
		case 157: goto st157;
		case 1115: goto st1115;
		case 158: goto st158;
		case 159: goto st159;
		case 160: goto st160;
		case 1116: goto st1116;
		case 161: goto st161;
		case 162: goto st162;
		case 163: goto st163;
		case 164: goto st164;
		case 165: goto st165;
		case 166: goto st166;
		case 167: goto st167;
		case 168: goto st168;
		case 169: goto st169;
		case 170: goto st170;
		case 171: goto st171;
		case 1117: goto st1117;
		case 172: goto st172;
		case 173: goto st173;
		case 174: goto st174;
		case 175: goto st175;
		case 1118: goto st1118;
		case 176: goto st176;
		case 177: goto st177;
		case 178: goto st178;
		case 179: goto st179;
		case 180: goto st180;
		case 181: goto st181;
		case 182: goto st182;
		case 183: goto st183;
		case 184: goto st184;
		case 185: goto st185;
		case 186: goto st186;
		case 187: goto st187;
		case 188: goto st188;
		case 189: goto st189;
		case 190: goto st190;
		case 191: goto st191;
		case 1119: goto st1119;
		case 192: goto st192;
		case 193: goto st193;
		case 194: goto st194;
		case 195: goto st195;
		case 196: goto st196;
		case 197: goto st197;
		case 198: goto st198;
		case 199: goto st199;
		case 200: goto st200;
		case 201: goto st201;
		case 202: goto st202;
		case 203: goto st203;
		case 204: goto st204;
		case 205: goto st205;
		case 206: goto st206;
		case 207: goto st207;
		case 1120: goto st1120;
		case 208: goto st208;
		case 209: goto st209;
		case 210: goto st210;
		case 211: goto st211;
		case 212: goto st212;
		case 213: goto st213;
		case 214: goto st214;
		case 215: goto st215;
		case 216: goto st216;
		case 217: goto st217;
		case 218: goto st218;
		case 219: goto st219;
		case 220: goto st220;
		case 221: goto st221;
		case 222: goto st222;
		case 223: goto st223;
		case 224: goto st224;
		case 225: goto st225;
		case 226: goto st226;
		case 227: goto st227;
		case 228: goto st228;
		case 229: goto st229;
		case 230: goto st230;
		case 231: goto st231;
		case 232: goto st232;
		case 233: goto st233;
		case 234: goto st234;
		case 235: goto st235;
		case 236: goto st236;
		case 237: goto st237;
		case 238: goto st238;
		case 239: goto st239;
		case 240: goto st240;
		case 241: goto st241;
		case 242: goto st242;
		case 243: goto st243;
		case 244: goto st244;
		case 245: goto st245;
		case 246: goto st246;
		case 247: goto st247;
		case 248: goto st248;
		case 249: goto st249;
		case 250: goto st250;
		case 251: goto st251;
		case 252: goto st252;
		case 253: goto st253;
		case 254: goto st254;
		case 255: goto st255;
		case 256: goto st256;
		case 257: goto st257;
		case 258: goto st258;
		case 259: goto st259;
		case 260: goto st260;
		case 261: goto st261;
		case 262: goto st262;
		case 1121: goto st1121;
		case 263: goto st263;
		case 264: goto st264;
		case 1122: goto st1122;
		case 265: goto st265;
		case 266: goto st266;
		case 267: goto st267;
		case 268: goto st268;
		case 269: goto st269;
		case 270: goto st270;
		case 271: goto st271;
		case 272: goto st272;
		case 273: goto st273;
		case 1123: goto st1123;
		case 1124: goto st1124;
		case 274: goto st274;
		case 275: goto st275;
		case 276: goto st276;
		case 277: goto st277;
		case 278: goto st278;
		case 279: goto st279;
		case 280: goto st280;
		case 281: goto st281;
		case 282: goto st282;
		case 283: goto st283;
		case 284: goto st284;
		case 285: goto st285;
		case 286: goto st286;
		case 287: goto st287;
		case 1125: goto st1125;
		case 288: goto st288;
		case 289: goto st289;
		case 290: goto st290;
		case 291: goto st291;
		case 292: goto st292;
		case 293: goto st293;
		case 294: goto st294;
		case 295: goto st295;
		case 296: goto st296;
		case 297: goto st297;
		case 1126: goto st1126;
		case 298: goto st298;
		case 299: goto st299;
		case 300: goto st300;
		case 301: goto st301;
		case 302: goto st302;
		case 303: goto st303;
		case 304: goto st304;
		case 305: goto st305;
		case 306: goto st306;
		case 307: goto st307;
		case 308: goto st308;
		case 309: goto st309;
		case 310: goto st310;
		case 311: goto st311;
		case 1127: goto st1127;
		case 312: goto st312;
		case 313: goto st313;
		case 314: goto st314;
		case 315: goto st315;
		case 316: goto st316;
		case 317: goto st317;
		case 318: goto st318;
		case 1128: goto st1128;
		case 319: goto st319;
		case 320: goto st320;
		case 321: goto st321;
		case 322: goto st322;
		case 323: goto st323;
		case 324: goto st324;
		case 325: goto st325;
		case 326: goto st326;
		case 327: goto st327;
		case 1129: goto st1129;
		case 1130: goto st1130;
		case 1131: goto st1131;
		case 328: goto st328;
		case 329: goto st329;
		case 330: goto st330;
		case 331: goto st331;
		case 332: goto st332;
		case 333: goto st333;
		case 334: goto st334;
		case 335: goto st335;
		case 1132: goto st1132;
		case 1133: goto st1133;
		case 336: goto st336;
		case 337: goto st337;
		case 338: goto st338;
		case 1134: goto st1134;
		case 339: goto st339;
		case 340: goto st340;
		case 341: goto st341;
		case 342: goto st342;
		case 343: goto st343;
		case 344: goto st344;
		case 345: goto st345;
		case 346: goto st346;
		case 347: goto st347;
		case 348: goto st348;
		case 349: goto st349;
		case 350: goto st350;
		case 351: goto st351;
		case 352: goto st352;
		case 353: goto st353;
		case 354: goto st354;
		case 355: goto st355;
		case 356: goto st356;
		case 357: goto st357;
		case 358: goto st358;
		case 359: goto st359;
		case 360: goto st360;
		case 361: goto st361;
		case 362: goto st362;
		case 363: goto st363;
		case 364: goto st364;
		case 365: goto st365;
		case 366: goto st366;
		case 367: goto st367;
		case 368: goto st368;
		case 369: goto st369;
		case 370: goto st370;
		case 371: goto st371;
		case 372: goto st372;
		case 373: goto st373;
		case 374: goto st374;
		case 375: goto st375;
		case 376: goto st376;
		case 377: goto st377;
		case 378: goto st378;
		case 379: goto st379;
		case 380: goto st380;
		case 381: goto st381;
		case 382: goto st382;
		case 383: goto st383;
		case 384: goto st384;
		case 385: goto st385;
		case 386: goto st386;
		case 387: goto st387;
		case 388: goto st388;
		case 389: goto st389;
		case 390: goto st390;
		case 391: goto st391;
		case 392: goto st392;
		case 393: goto st393;
		case 394: goto st394;
		case 395: goto st395;
		case 396: goto st396;
		case 397: goto st397;
		case 398: goto st398;
		case 399: goto st399;
		case 400: goto st400;
		case 401: goto st401;
		case 402: goto st402;
		case 403: goto st403;
		case 404: goto st404;
		case 405: goto st405;
		case 406: goto st406;
		case 407: goto st407;
		case 408: goto st408;
		case 409: goto st409;
		case 410: goto st410;
		case 411: goto st411;
		case 412: goto st412;
		case 413: goto st413;
		case 414: goto st414;
		case 415: goto st415;
		case 416: goto st416;
		case 417: goto st417;
		case 418: goto st418;
		case 419: goto st419;
		case 420: goto st420;
		case 421: goto st421;
		case 422: goto st422;
		case 423: goto st423;
		case 424: goto st424;
		case 425: goto st425;
		case 426: goto st426;
		case 427: goto st427;
		case 428: goto st428;
		case 429: goto st429;
		case 430: goto st430;
		case 431: goto st431;
		case 432: goto st432;
		case 433: goto st433;
		case 434: goto st434;
		case 435: goto st435;
		case 436: goto st436;
		case 437: goto st437;
		case 438: goto st438;
		case 439: goto st439;
		case 440: goto st440;
		case 441: goto st441;
		case 442: goto st442;
		case 443: goto st443;
		case 444: goto st444;
		case 445: goto st445;
		case 446: goto st446;
		case 447: goto st447;
		case 448: goto st448;
		case 449: goto st449;
		case 450: goto st450;
		case 451: goto st451;
		case 452: goto st452;
		case 453: goto st453;
		case 454: goto st454;
		case 455: goto st455;
		case 456: goto st456;
		case 457: goto st457;
		case 458: goto st458;
		case 459: goto st459;
		case 460: goto st460;
		case 461: goto st461;
		case 462: goto st462;
		case 463: goto st463;
		case 464: goto st464;
		case 465: goto st465;
		case 466: goto st466;
		case 467: goto st467;
		case 1135: goto st1135;
		case 1136: goto st1136;
		case 1137: goto st1137;
		case 468: goto st468;
		case 469: goto st469;
		case 470: goto st470;
		case 471: goto st471;
		case 472: goto st472;
		case 1138: goto st1138;
		case 473: goto st473;
		case 474: goto st474;
		case 475: goto st475;
		case 476: goto st476;
		case 1139: goto st1139;
		case 1140: goto st1140;
		case 1141: goto st1141;
		case 477: goto st477;
		case 478: goto st478;
		case 1142: goto st1142;
		case 479: goto st479;
		case 480: goto st480;
		case 481: goto st481;
		case 1143: goto st1143;
		case 482: goto st482;
		case 483: goto st483;
		case 484: goto st484;
		case 485: goto st485;
		case 486: goto st486;
		case 487: goto st487;
		case 488: goto st488;
		case 489: goto st489;
		case 490: goto st490;
		case 491: goto st491;
		case 492: goto st492;
		case 493: goto st493;
		case 494: goto st494;
		case 495: goto st495;
		case 496: goto st496;
		case 497: goto st497;
		case 498: goto st498;
		case 499: goto st499;
		case 500: goto st500;
		case 501: goto st501;
		case 502: goto st502;
		case 503: goto st503;
		case 504: goto st504;
		case 505: goto st505;
		case 506: goto st506;
		case 507: goto st507;
		case 508: goto st508;
		case 509: goto st509;
		case 510: goto st510;
		case 511: goto st511;
		case 512: goto st512;
		case 513: goto st513;
		case 514: goto st514;
		case 515: goto st515;
		case 516: goto st516;
		case 517: goto st517;
		case 518: goto st518;
		case 519: goto st519;
		case 520: goto st520;
		case 521: goto st521;
		case 522: goto st522;
		case 523: goto st523;
		case 524: goto st524;
		case 525: goto st525;
		case 526: goto st526;
		case 527: goto st527;
		case 528: goto st528;
		case 529: goto st529;
		case 530: goto st530;
		case 531: goto st531;
		case 532: goto st532;
		case 533: goto st533;
		case 534: goto st534;
		case 535: goto st535;
		case 536: goto st536;
		case 537: goto st537;
		case 538: goto st538;
		case 539: goto st539;
		case 540: goto st540;
		case 541: goto st541;
		case 542: goto st542;
		case 543: goto st543;
		case 544: goto st544;
		case 545: goto st545;
		case 546: goto st546;
		case 547: goto st547;
		case 548: goto st548;
		case 549: goto st549;
		case 550: goto st550;
		case 551: goto st551;
		case 552: goto st552;
		case 553: goto st553;
		case 554: goto st554;
		case 555: goto st555;
		case 556: goto st556;
		case 557: goto st557;
		case 558: goto st558;
		case 559: goto st559;
		case 560: goto st560;
		case 561: goto st561;
		case 562: goto st562;
		case 563: goto st563;
		case 564: goto st564;
		case 565: goto st565;
		case 566: goto st566;
		case 567: goto st567;
		case 568: goto st568;
		case 569: goto st569;
		case 570: goto st570;
		case 571: goto st571;
		case 572: goto st572;
		case 573: goto st573;
		case 574: goto st574;
		case 575: goto st575;
		case 576: goto st576;
		case 1144: goto st1144;
		case 577: goto st577;
		case 578: goto st578;
		case 579: goto st579;
		case 580: goto st580;
		case 581: goto st581;
		case 582: goto st582;
		case 583: goto st583;
		case 584: goto st584;
		case 585: goto st585;
		case 586: goto st586;
		case 587: goto st587;
		case 588: goto st588;
		case 589: goto st589;
		case 590: goto st590;
		case 591: goto st591;
		case 592: goto st592;
		case 593: goto st593;
		case 594: goto st594;
		case 595: goto st595;
		case 596: goto st596;
		case 597: goto st597;
		case 598: goto st598;
		case 599: goto st599;
		case 600: goto st600;
		case 601: goto st601;
		case 602: goto st602;
		case 603: goto st603;
		case 604: goto st604;
		case 605: goto st605;
		case 606: goto st606;
		case 607: goto st607;
		case 608: goto st608;
		case 609: goto st609;
		case 610: goto st610;
		case 611: goto st611;
		case 612: goto st612;
		case 613: goto st613;
		case 614: goto st614;
		case 615: goto st615;
		case 616: goto st616;
		case 617: goto st617;
		case 1145: goto st1145;
		case 618: goto st618;
		case 619: goto st619;
		case 1146: goto st1146;
		case 620: goto st620;
		case 621: goto st621;
		case 622: goto st622;
		case 623: goto st623;
		case 624: goto st624;
		case 625: goto st625;
		case 626: goto st626;
		case 627: goto st627;
		case 628: goto st628;
		case 629: goto st629;
		case 630: goto st630;
		case 631: goto st631;
		case 632: goto st632;
		case 633: goto st633;
		case 1147: goto st1147;
		case 634: goto st634;
		case 635: goto st635;
		case 636: goto st636;
		case 637: goto st637;
		case 638: goto st638;
		case 639: goto st639;
		case 640: goto st640;
		case 641: goto st641;
		case 642: goto st642;
		case 643: goto st643;
		case 644: goto st644;
		case 645: goto st645;
		case 646: goto st646;
		case 647: goto st647;
		case 648: goto st648;
		case 649: goto st649;
		case 650: goto st650;
		case 651: goto st651;
		case 652: goto st652;
		case 653: goto st653;
		case 654: goto st654;
		case 655: goto st655;
		case 1148: goto st1148;
		case 656: goto st656;
		case 657: goto st657;
		case 658: goto st658;
		case 659: goto st659;
		case 660: goto st660;
		case 1149: goto st1149;
		case 661: goto st661;
		case 662: goto st662;
		case 663: goto st663;
		case 664: goto st664;
		case 665: goto st665;
		case 1150: goto st1150;
		case 666: goto st666;
		case 667: goto st667;
		case 668: goto st668;
		case 669: goto st669;
		case 670: goto st670;
		case 1151: goto st1151;
		case 1152: goto st1152;
		case 1153: goto st1153;
		case 671: goto st671;
		case 672: goto st672;
		case 1154: goto st1154;
		case 673: goto st673;
		case 674: goto st674;
		case 675: goto st675;
		case 676: goto st676;
		case 677: goto st677;
		case 678: goto st678;
		case 679: goto st679;
		case 680: goto st680;
		case 681: goto st681;
		case 682: goto st682;
		case 683: goto st683;
		case 684: goto st684;
		case 685: goto st685;
		case 686: goto st686;
		case 687: goto st687;
		case 688: goto st688;
		case 689: goto st689;
		case 690: goto st690;
		case 691: goto st691;
		case 692: goto st692;
		case 693: goto st693;
		case 694: goto st694;
		case 695: goto st695;
		case 696: goto st696;
		case 697: goto st697;
		case 698: goto st698;
		case 699: goto st699;
		case 1155: goto st1155;
		case 1156: goto st1156;
		case 1157: goto st1157;
		case 700: goto st700;
		case 701: goto st701;
		case 702: goto st702;
		case 1158: goto st1158;
		case 1159: goto st1159;
		case 703: goto st703;
		case 704: goto st704;
		case 705: goto st705;
		case 706: goto st706;
		case 1160: goto st1160;
		case 1161: goto st1161;
		case 707: goto st707;
		case 708: goto st708;
		case 709: goto st709;
		case 710: goto st710;
		case 1162: goto st1162;
		case 1163: goto st1163;
		case 711: goto st711;
		case 712: goto st712;
		case 713: goto st713;
		case 714: goto st714;
		case 715: goto st715;
		case 716: goto st716;
		case 717: goto st717;
		case 718: goto st718;
		case 719: goto st719;
		case 720: goto st720;
		case 721: goto st721;
		case 722: goto st722;
		case 723: goto st723;
		case 724: goto st724;
		case 725: goto st725;
		case 726: goto st726;
		case 727: goto st727;
		case 728: goto st728;
		case 729: goto st729;
		case 730: goto st730;
		case 731: goto st731;
		case 732: goto st732;
		case 733: goto st733;
		case 734: goto st734;
		case 735: goto st735;
		case 1164: goto st1164;
		case 736: goto st736;
		case 737: goto st737;
		case 738: goto st738;
		case 739: goto st739;
		case 740: goto st740;
		case 741: goto st741;
		case 742: goto st742;
		case 743: goto st743;
		case 744: goto st744;
		case 745: goto st745;
		case 746: goto st746;
		case 747: goto st747;
		case 748: goto st748;
		case 749: goto st749;
		case 750: goto st750;
		case 1165: goto st1165;
		case 751: goto st751;
		case 752: goto st752;
		case 753: goto st753;
		case 754: goto st754;
		case 755: goto st755;
		case 756: goto st756;
		case 757: goto st757;
		case 758: goto st758;
		case 759: goto st759;
		case 760: goto st760;
		case 761: goto st761;
		case 762: goto st762;
		case 763: goto st763;
		case 1166: goto st1166;
		case 764: goto st764;
		case 765: goto st765;
		case 766: goto st766;
		case 767: goto st767;
		case 768: goto st768;
		case 769: goto st769;
		case 770: goto st770;
		case 771: goto st771;
		case 772: goto st772;
		case 773: goto st773;
		case 774: goto st774;
		case 1167: goto st1167;
		case 1168: goto st1168;
		case 775: goto st775;
		case 776: goto st776;
		case 777: goto st777;
		case 1169: goto st1169;
		case 778: goto st778;
		case 779: goto st779;
		case 780: goto st780;
		case 781: goto st781;
		case 782: goto st782;
		case 783: goto st783;
		case 784: goto st784;
		case 785: goto st785;
		case 786: goto st786;
		case 787: goto st787;
		case 1170: goto st1170;
		case 1171: goto st1171;
		case 1172: goto st1172;
		case 788: goto st788;
		case 789: goto st789;
		case 790: goto st790;
		case 791: goto st791;
		case 792: goto st792;
		case 793: goto st793;
		case 794: goto st794;
		case 795: goto st795;
		case 796: goto st796;
		case 797: goto st797;
		case 798: goto st798;
		case 1173: goto st1173;
		case 1174: goto st1174;
		case 1175: goto st1175;
		case 799: goto st799;
		case 800: goto st800;
		case 801: goto st801;
		case 802: goto st802;
		case 803: goto st803;
		case 804: goto st804;
		case 805: goto st805;
		case 806: goto st806;
		case 807: goto st807;
		case 808: goto st808;
		case 809: goto st809;
		case 810: goto st810;
		case 1176: goto st1176;
		case 811: goto st811;
		case 812: goto st812;
		case 813: goto st813;
		case 1177: goto st1177;
		case 1178: goto st1178;
		case 814: goto st814;
		case 1179: goto st1179;
		case 1180: goto st1180;
		case 815: goto st815;
		case 1181: goto st1181;
		case 1182: goto st1182;
		case 816: goto st816;
		case 817: goto st817;
		case 818: goto st818;
		case 819: goto st819;
		case 820: goto st820;
		case 821: goto st821;
		case 822: goto st822;
		case 823: goto st823;
		case 824: goto st824;
		case 825: goto st825;
		case 826: goto st826;
		case 827: goto st827;
		case 828: goto st828;
		case 829: goto st829;
		case 830: goto st830;
		case 831: goto st831;
		case 832: goto st832;
		case 833: goto st833;
		case 834: goto st834;
		case 835: goto st835;
		case 836: goto st836;
		case 837: goto st837;
		case 838: goto st838;
		case 839: goto st839;
		case 840: goto st840;
		case 841: goto st841;
		case 842: goto st842;
		case 843: goto st843;
		case 844: goto st844;
		case 845: goto st845;
		case 846: goto st846;
		case 847: goto st847;
		case 848: goto st848;
		case 849: goto st849;
		case 850: goto st850;
		case 851: goto st851;
		case 852: goto st852;
		case 853: goto st853;
		case 854: goto st854;
		case 855: goto st855;
		case 856: goto st856;
		case 857: goto st857;
		case 1183: goto st1183;
		case 858: goto st858;
		case 859: goto st859;
		case 860: goto st860;
		case 861: goto st861;
		case 862: goto st862;
		case 863: goto st863;
		case 864: goto st864;
		case 865: goto st865;
		case 866: goto st866;
		case 867: goto st867;
		case 868: goto st868;
		case 869: goto st869;
		case 870: goto st870;
		case 871: goto st871;
		case 872: goto st872;
		case 873: goto st873;
		case 874: goto st874;
		case 875: goto st875;
		case 876: goto st876;
		case 877: goto st877;
		case 878: goto st878;
		case 879: goto st879;
		case 880: goto st880;
		case 881: goto st881;
		case 882: goto st882;
		case 883: goto st883;
		case 884: goto st884;
		case 885: goto st885;
		case 886: goto st886;
		case 887: goto st887;
		case 888: goto st888;
		case 889: goto st889;
		case 890: goto st890;
		case 891: goto st891;
		case 892: goto st892;
		case 893: goto st893;
		case 894: goto st894;
		case 895: goto st895;
		case 896: goto st896;
		case 897: goto st897;
		case 898: goto st898;
		case 899: goto st899;
		case 900: goto st900;
		case 901: goto st901;
		case 902: goto st902;
		case 903: goto st903;
		case 904: goto st904;
		case 905: goto st905;
		case 906: goto st906;
		case 907: goto st907;
		case 908: goto st908;
		case 909: goto st909;
		case 910: goto st910;
		case 911: goto st911;
		case 912: goto st912;
		case 913: goto st913;
		case 914: goto st914;
		case 915: goto st915;
		case 916: goto st916;
		case 917: goto st917;
		case 918: goto st918;
		case 919: goto st919;
		case 920: goto st920;
		case 921: goto st921;
		case 922: goto st922;
		case 923: goto st923;
		case 924: goto st924;
		case 925: goto st925;
		case 926: goto st926;
		case 927: goto st927;
		case 928: goto st928;
		case 929: goto st929;
		case 930: goto st930;
		case 931: goto st931;
		case 932: goto st932;
		case 933: goto st933;
		case 934: goto st934;
		case 935: goto st935;
		case 936: goto st936;
		case 937: goto st937;
		case 938: goto st938;
		case 939: goto st939;
		case 940: goto st940;
		case 941: goto st941;
		case 942: goto st942;
		case 943: goto st943;
		case 944: goto st944;
		case 945: goto st945;
		case 946: goto st946;
		case 947: goto st947;
		case 948: goto st948;
		case 949: goto st949;
		case 950: goto st950;
		case 951: goto st951;
		case 952: goto st952;
		case 953: goto st953;
		case 954: goto st954;
		case 955: goto st955;
		case 956: goto st956;
		case 957: goto st957;
		case 958: goto st958;
		case 959: goto st959;
		case 960: goto st960;
		case 961: goto st961;
		case 962: goto st962;
		case 963: goto st963;
		case 964: goto st964;
		case 965: goto st965;
		case 966: goto st966;
		case 967: goto st967;
		case 968: goto st968;
		case 969: goto st969;
		case 970: goto st970;
		case 971: goto st971;
		case 972: goto st972;
		case 973: goto st973;
		case 974: goto st974;
		case 975: goto st975;
		case 976: goto st976;
		case 977: goto st977;
		case 978: goto st978;
		case 979: goto st979;
		case 980: goto st980;
		case 981: goto st981;
		case 982: goto st982;
		case 983: goto st983;
		case 984: goto st984;
		case 985: goto st985;
		case 986: goto st986;
		case 987: goto st987;
		case 988: goto st988;
		case 989: goto st989;
		case 990: goto st990;
		case 991: goto st991;
		case 992: goto st992;
		case 993: goto st993;
		case 994: goto st994;
		case 995: goto st995;
		case 996: goto st996;
		case 1184: goto st1184;
		case 997: goto st997;
		case 998: goto st998;
		case 999: goto st999;
		case 1000: goto st1000;
		case 1001: goto st1001;
		case 1002: goto st1002;
		case 1003: goto st1003;
		case 1004: goto st1004;
		case 1185: goto st1185;
		case 1005: goto st1005;
		case 1006: goto st1006;
		case 1007: goto st1007;
		case 1008: goto st1008;
		case 1009: goto st1009;
		case 1186: goto st1186;
		case 1010: goto st1010;
		case 1011: goto st1011;
		case 1012: goto st1012;
		case 1013: goto st1013;
		case 1014: goto st1014;
		case 1015: goto st1015;
		case 1016: goto st1016;
		case 1017: goto st1017;
		case 1018: goto st1018;
		case 1019: goto st1019;
		case 1020: goto st1020;
		case 1021: goto st1021;
		case 1022: goto st1022;
		case 1023: goto st1023;
		case 1024: goto st1024;
		case 1025: goto st1025;
		case 1026: goto st1026;
		case 1027: goto st1027;
		case 1187: goto st1187;
		case 1028: goto st1028;
		case 1029: goto st1029;
		case 1030: goto st1030;
		case 1031: goto st1031;
		case 1032: goto st1032;
		case 1033: goto st1033;
		case 1034: goto st1034;
		case 1035: goto st1035;
		case 1036: goto st1036;
		case 1037: goto st1037;
		case 1038: goto st1038;
		case 1039: goto st1039;
		case 1040: goto st1040;
		case 1041: goto st1041;
		case 1042: goto st1042;
		case 1043: goto st1043;
		case 1044: goto st1044;
		case 1045: goto st1045;
		case 1046: goto st1046;
		case 1188: goto st1188;
		case 1047: goto st1047;
		case 1048: goto st1048;
		case 1049: goto st1049;
		case 1050: goto st1050;
		case 1051: goto st1051;
		case 1052: goto st1052;
		case 1053: goto st1053;
		case 1054: goto st1054;
		case 1055: goto st1055;
		case 1056: goto st1056;
		case 1057: goto st1057;
		case 1058: goto st1058;
		case 1059: goto st1059;
		case 1060: goto st1060;
		case 1061: goto st1061;
		case 1189: goto st1189;
		case 1190: goto st1190;
		case 1191: goto st1191;
		case 1062: goto st1062;
		case 1063: goto st1063;
		case 1064: goto st1064;
		case 1065: goto st1065;
		case 1066: goto st1066;
		case 1067: goto st1067;
		case 1068: goto st1068;
		case 1192: goto st1192;
		case 1069: goto st1069;
		case 1070: goto st1070;
		case 1071: goto st1071;
		case 1072: goto st1072;
		case 1073: goto st1073;
		case 1074: goto st1074;
		case 1075: goto st1075;
		case 1076: goto st1076;
		case 1077: goto st1077;
		case 1078: goto st1078;
		case 1079: goto st1079;
		case 1080: goto st1080;
		case 1081: goto st1081;
		case 1193: goto st1193;
		case 1082: goto st1082;
		case 1083: goto st1083;
		case 1084: goto st1084;
		case 1085: goto st1085;
		case 1086: goto st1086;
		case 1087: goto st1087;
		case 1088: goto st1088;
		case 1194: goto st1194;
		case 1089: goto st1089;
		case 1090: goto st1090;
		case 1091: goto st1091;
		case 1092: goto st1092;
		case 1093: goto st1093;
		case 1094: goto st1094;
		case 1195: goto st1195;
		case 1095: goto st1095;
		case 1096: goto st1096;
		case 1097: goto st1097;
		case 1098: goto st1098;
		case 1099: goto st1099;
		case 1100: goto st1100;
		case 1196: goto st1196;
		case 1101: goto st1101;
		case 1102: goto st1102;
		case 1103: goto st1103;
		case 1104: goto st1104;
		case 1105: goto st1105;
		case 1106: goto st1106;
		case 1107: goto st1107;
		case 1108: goto st1108;
		case 1197: goto st1197;
		case 1109: goto st1109;
		case 1110: goto st1110;
	default: break;
	}

	if ( ++p == pe )
		goto _test_eof;
_resume:
	switch ( cs )
	{
tr20:
	{
		s->line_counter++;
	}
	goto st1111;
tr83:
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1111; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1111; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1111;
tr3373:
	cs = 1111;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto _again;
st1111:
	if ( ++p == pe )
		goto _test_eof1111;
case 1111:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3312;
		case 32: goto tr3312;
		case 36: goto st150;
		case 40: goto tr3314;
		case 41: goto tr3315;
		case 42: goto tr3316;
		case 92: goto tr3316;
		case 95: goto tr3316;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr3317;
		case 1083: goto tr3318;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3316;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3316;
	} else
		goto tr3316;
	goto tr3311;
tr0:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr24:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr36:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr57:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr71:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr79:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr85:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr97:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr122:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr128:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr561:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr563:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr639:
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st261;}
	}
	goto st0;
tr650:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	goto st0;
tr662:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr686:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr701:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr729:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st261;}
	}
	goto st0;
tr739:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr745:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr756:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr769:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr822:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr827:
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st261;}
	}
	goto st0;
tr840:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st261;}
	}
	goto st0;
tr848:
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	goto st0;
tr855:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	goto st0;
tr865:
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	goto st0;
tr872:
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	goto st0;
tr878:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	goto st0;
tr880:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	goto st0;
tr892:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	goto st0;
tr894:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	goto st0;
tr907:
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	goto st0;
tr919:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	goto st0;
tr933:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	goto st0;
tr945:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st261;}
	}
	goto st0;
tr946:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr953:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr963:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	goto st0;
tr978:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	goto st0;
tr990:
	{
		WARN(ZS_BAD_BASE64_CHAR);
		p--; {goto st261;}
	}
	goto st0;
tr1004:
	{
		WARN(ZS_BAD_BITMAP);
		p--; {goto st261;}
	}
	goto st0;
tr1495:
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1501:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1509:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1559:
	{
		WARN(ZS_BAD_ALGORITHM);
		p--; {goto st261;}
	}
	goto st0;
tr1670:
	{
		WARN(ZS_BAD_CERT_TYPE);
		p--; {goto st261;}
	}
	goto st0;
tr1723:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1746:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1765:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1913:
	{
		s->long_string = false;
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr1934:
	{
		WARN(ZS_BAD_LOC_DATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2291:
	{
		WARN(ZS_BAD_APL);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2306:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_APL);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2349:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2406:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2421:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2435:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2458:
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2472:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2479:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2584:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr2638:
	{
		WARN(ZS_BAD_TIMESTAMP_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3001:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3096:
	{
		WARN(ZS_BAD_BASE32HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3239:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3245:
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3249:
	{
		WARN(ZS_BAD_CHAR_DASH);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	goto st0;
tr3311:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr3329:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr3350:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr3367:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
tr3390:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	goto st0;
st0:
cs = 0;
	goto _out;
tr2:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1;
tr3:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1;
tr3312:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1;
tr3314:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1;
tr3315:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1;
tr3377:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1;
tr3378:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1;
tr3368:
	cs = 1;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto _again;
tr3370:
	cs = 1;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto _again;
tr3371:
	cs = 1;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto _again;
st1:
	if ( ++p == pe )
		goto _test_eof1;
case 1:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1;
		case 32: goto st1;
		case 40: goto tr2;
		case 41: goto tr3;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr22;
		case 1083: goto st257;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr4:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st2;
tr28:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st2;
st2:
	if ( ++p == pe )
		goto _test_eof2;
case 2:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr25;
		case 32: goto tr25;
		case 40: goto tr26;
		case 41: goto tr27;
		case 68: goto tr29;
		case 72: goto tr30;
		case 77: goto tr31;
		case 83: goto st164;
		case 87: goto tr33;
		case 100: goto tr29;
		case 104: goto tr30;
		case 109: goto tr31;
		case 115: goto st164;
		case 119: goto tr33;
		case 1034: goto tr34;
		case 1083: goto tr35;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr28;
	goto tr24;
tr38:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st3;
tr39:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st3;
tr55:
	{
		s->line_counter++;
	}
	goto st3;
tr25:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st3;
tr26:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st3;
tr27:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st3;
tr34:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st3;
tr680:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st3;
tr681:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st3;
tr682:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st3;
tr684:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st3;
st3:
	if ( ++p == pe )
		goto _test_eof3;
case 3:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st3;
		case 32: goto st3;
		case 40: goto tr38;
		case 41: goto tr39;
		case 65: goto tr40;
		case 67: goto tr41;
		case 68: goto tr42;
		case 69: goto tr43;
		case 72: goto tr44;
		case 73: goto tr45;
		case 75: goto tr46;
		case 76: goto tr47;
		case 77: goto tr48;
		case 78: goto tr49;
		case 80: goto tr50;
		case 82: goto tr51;
		case 83: goto tr52;
		case 84: goto tr53;
		case 85: goto tr54;
		case 97: goto tr40;
		case 99: goto tr41;
		case 100: goto tr42;
		case 101: goto tr43;
		case 104: goto tr44;
		case 105: goto tr45;
		case 107: goto tr46;
		case 108: goto tr47;
		case 109: goto tr48;
		case 110: goto tr49;
		case 112: goto tr50;
		case 114: goto tr51;
		case 115: goto tr52;
		case 116: goto tr53;
		case 117: goto tr54;
		case 1034: goto tr55;
		case 1083: goto st167;
	}
	goto tr36;
tr5:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st4;
tr40:
	{
		s->r_class = s->default_class;
	}
	goto st4;
tr598:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st4;
st4:
	if ( ++p == pe )
		goto _test_eof4;
case 4:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr58;
		case 32: goto tr58;
		case 40: goto tr59;
		case 41: goto tr60;
		case 65: goto st227;
		case 70: goto st230;
		case 80: goto st234;
		case 97: goto st227;
		case 102: goto st230;
		case 112: goto st234;
		case 2058: goto tr64;
		case 2107: goto tr65;
		case 2314: goto tr66;
		case 2363: goto tr66;
		case 2570: goto tr67;
		case 2619: goto tr68;
	}
	goto tr57;
tr72:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr73:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr75:
	{
		s->line_counter++;
	}
	goto st5;
tr58:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr59:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr60:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr64:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr139:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr140:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr141:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr142:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr156:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr157:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr158:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr159:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr164:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr165:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr166:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr167:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr174:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr175:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr176:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr177:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr185:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr186:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr187:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr188:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr199:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr200:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr201:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr202:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr211:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr212:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr213:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr214:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr222:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr223:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr224:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr225:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr230:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr231:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr232:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr233:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr243:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr244:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr245:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr246:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr252:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr253:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr254:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr255:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr264:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr265:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr266:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr267:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr305:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr306:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr307:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr308:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr316:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr317:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr318:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr319:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr324:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr325:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr326:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr327:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr337:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr338:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr339:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr340:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr346:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr347:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr348:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr349:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr355:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr356:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr357:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr358:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr363:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr364:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr365:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr366:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr376:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr377:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr378:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr379:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr384:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr385:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr386:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr387:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr398:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr399:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr400:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr401:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr407:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr408:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr409:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr410:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr415:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr416:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr417:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr419:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr425:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr426:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr427:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr429:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr434:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr435:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr436:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr438:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr447:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr448:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr449:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr450:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr457:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr458:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr459:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr460:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr468:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr469:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr470:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr471:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr479:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr480:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr481:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr482:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr487:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr488:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr489:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr490:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr500:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr501:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr502:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr503:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr509:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr510:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr511:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr512:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr518:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr519:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr520:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr521:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr529:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr530:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr531:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr532:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr542:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr543:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr544:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr545:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr551:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr552:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr553:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr554:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr564:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr565:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr566:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr568:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr575:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr576:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr577:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr578:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr782:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr783:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr784:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr785:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr793:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr794:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr795:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr796:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr802:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr803:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st5;
tr804:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st5;
tr805:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
st5:
	if ( ++p == pe )
		goto _test_eof5;
case 5:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st5;
		case 32: goto st5;
		case 40: goto tr72;
		case 41: goto tr73;
		case 92: goto st9;
		case 2058: goto tr75;
		case 2107: goto st10;
		case 2314: goto tr69;
		case 2363: goto tr69;
		case 2570: goto tr77;
		case 2619: goto tr78;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr69;
	} else
		goto tr69;
	goto tr71;
tr66:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr69:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr86:
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr87:
	{
		switch (s->r_type) {
		// Next types must not have empty rdata.
		case KNOT_RRTYPE_A:
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
		case KNOT_RRTYPE_SOA:
		case KNOT_RRTYPE_HINFO:
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_RP:
		case KNOT_RRTYPE_AAAA:
		case KNOT_RRTYPE_LOC:
		case KNOT_RRTYPE_SRV:
		case KNOT_RRTYPE_NAPTR:
		case KNOT_RRTYPE_CERT:
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_SSHFP:
		case KNOT_RRTYPE_IPSECKEY:
		case KNOT_RRTYPE_RRSIG:
		case KNOT_RRTYPE_NSEC:
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_NSEC3:
		case KNOT_RRTYPE_NSEC3PARAM:
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_CDS:
		case KNOT_RRTYPE_CDNSKEY:
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L32:
		case KNOT_RRTYPE_L64:
		case KNOT_RRTYPE_LP:
		case KNOT_RRTYPE_EUI48:
		case KNOT_RRTYPE_EUI64:
		case KNOT_RRTYPE_URI:
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st461;}
		// Next types can have empty rdata.
		case KNOT_RRTYPE_APL:
		default:
			{stack[top++] = 6; goto st470;}
		}
	}
	goto st6;
tr144:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr161:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr169:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr179:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr190:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr204:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr216:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr227:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr235:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr248:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr257:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr269:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr310:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr321:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr329:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr342:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr351:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr360:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr368:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr381:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr389:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr403:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr412:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr421:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr431:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr440:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr452:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr462:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr473:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr484:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr492:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr505:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr514:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr523:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr534:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr547:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr556:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr570:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr580:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr787:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr798:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
tr807:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 6; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 6; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 6; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st6;
st6:
	if ( ++p == pe )
		goto _test_eof6;
case 6:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr79;
tr81:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st7;
tr82:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st7;
st7:
	if ( ++p == pe )
		goto _test_eof7;
case 7:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr85;
st8:
	if ( ++p == pe )
		goto _test_eof8;
case 8:
	if ( (*p) == 10 )
		goto tr83;
	goto st8;
st9:
	if ( ++p == pe )
		goto _test_eof9;
case 9:
	if ( (*p) == 35 )
		goto tr87;
	goto tr86;
tr65:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr143:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr160:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr168:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr178:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr189:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr203:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr215:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr226:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr234:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr247:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr256:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr268:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr309:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr320:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr328:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr341:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr350:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr359:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr367:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr380:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr388:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr402:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr411:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr420:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr430:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr439:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr451:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr461:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr472:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr483:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr491:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr504:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr513:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr522:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr533:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr546:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr555:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr569:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr579:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr786:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr797:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
tr806:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	goto st10;
st10:
	if ( ++p == pe )
		goto _test_eof10;
case 10:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr75;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st10;
	goto tr71;
tr89:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st11;
tr90:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st11;
tr67:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr77:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr145:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr162:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr170:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr180:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr191:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr205:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr217:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr228:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr236:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr249:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr258:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr270:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr311:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr322:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr330:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr343:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr352:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr361:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr369:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr382:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr390:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr404:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr413:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr422:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr432:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr441:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr453:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr463:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr474:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr485:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr493:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr506:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr515:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr524:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr535:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr548:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr557:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr571:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr581:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr788:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr799:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
tr808:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 11; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 11; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 11; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st11;
st11:
	if ( ++p == pe )
		goto _test_eof11;
case 11:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st11;
		case 32: goto st11;
		case 40: goto tr89;
		case 41: goto tr90;
		case 92: goto st9;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr83;
		case 2107: goto st12;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr83;
		case 2619: goto tr94;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr69;
	} else
		goto tr69;
	goto tr79;
tr706:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st12;
st12:
	if ( ++p == pe )
		goto _test_eof12;
case 12:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr83;
		case 1034: goto tr95;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st12;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr79;
tr95:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1112; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1112; goto _out;}
		}
	}
	goto st1112;
tr705:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1112; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1112; goto _out;}
		}
	}
	goto st1112;
st1112:
	if ( ++p == pe )
		goto _test_eof1112;
case 1112:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr3319;
		case 32: goto tr3319;
		case 36: goto tr3320;
		case 40: goto tr3321;
		case 41: goto tr3322;
		case 42: goto tr3323;
		case 58: goto tr69;
		case 92: goto tr3324;
		case 95: goto tr3323;
		case 1802: goto tr20;
		case 1851: goto st149;
		case 2058: goto tr3325;
		case 2107: goto tr3326;
		case 2314: goto tr118;
		case 2363: goto tr119;
		case 2570: goto tr3327;
		case 2619: goto tr3328;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr69;
		} else if ( _widec > 44 ) {
			if ( 45 <= _widec && _widec <= 57 )
				goto tr3323;
		} else
			goto tr69;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr3323;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr69;
			} else if ( _widec >= 97 )
				goto tr3323;
		} else
			goto tr69;
	} else
		goto tr69;
	goto tr739;
tr98:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st13;
tr99:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st13;
tr3319:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st13;
tr3321:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st13;
tr3322:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st13;
st13:
	if ( ++p == pe )
		goto _test_eof13;
case 13:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st13;
		case 32: goto st13;
		case 40: goto tr98;
		case 41: goto tr99;
		case 58: goto tr69;
		case 65: goto tr101;
		case 67: goto tr102;
		case 68: goto tr103;
		case 69: goto tr104;
		case 72: goto tr105;
		case 73: goto tr106;
		case 75: goto tr107;
		case 76: goto tr108;
		case 77: goto tr109;
		case 78: goto tr110;
		case 80: goto tr111;
		case 82: goto tr112;
		case 83: goto tr113;
		case 84: goto tr114;
		case 85: goto tr115;
		case 92: goto st9;
		case 97: goto tr101;
		case 99: goto tr102;
		case 100: goto tr103;
		case 101: goto tr104;
		case 104: goto tr105;
		case 105: goto tr106;
		case 107: goto tr107;
		case 108: goto tr108;
		case 109: goto tr109;
		case 110: goto tr110;
		case 112: goto tr111;
		case 114: goto tr112;
		case 115: goto tr113;
		case 116: goto tr114;
		case 117: goto tr115;
		case 1802: goto tr20;
		case 1851: goto st149;
		case 2058: goto tr116;
		case 2107: goto st236;
		case 2314: goto tr118;
		case 2363: goto tr119;
		case 2570: goto tr120;
		case 2619: goto tr121;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr69;
		} else if ( _widec >= 48 )
			goto tr100;
	} else
		goto tr69;
	goto tr97;
tr100:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 14; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 14; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 14; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 14; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 14; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 14; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 14; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 14; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 14; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 14; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 14; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 14; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 14; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 14; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 14; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 14; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 14; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 14; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 14; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 14; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 14; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 14; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 14; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 14; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 14; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 14; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 14; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 14; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 14; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st14;
st14:
	if ( ++p == pe )
		goto _test_eof14;
case 14:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr123;
		case 32: goto tr123;
		case 40: goto tr124;
		case 41: goto tr125;
		case 68: goto tr29;
		case 72: goto tr30;
		case 77: goto tr31;
		case 83: goto st164;
		case 87: goto tr33;
		case 100: goto tr29;
		case 104: goto tr30;
		case 109: goto tr31;
		case 115: goto st164;
		case 119: goto tr33;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr126;
		case 1083: goto tr127;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr28;
	goto tr122;
tr130:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st15;
tr131:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st15;
tr123:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st15;
tr124:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st15;
tr125:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st15;
st15:
	if ( ++p == pe )
		goto _test_eof15;
case 15:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st15;
		case 32: goto st15;
		case 40: goto tr130;
		case 41: goto tr131;
		case 65: goto tr40;
		case 67: goto tr41;
		case 68: goto tr42;
		case 69: goto tr43;
		case 72: goto tr44;
		case 73: goto tr45;
		case 75: goto tr46;
		case 76: goto tr47;
		case 77: goto tr48;
		case 78: goto tr49;
		case 80: goto tr50;
		case 82: goto tr51;
		case 83: goto tr52;
		case 84: goto tr53;
		case 85: goto tr54;
		case 97: goto tr40;
		case 99: goto tr41;
		case 100: goto tr42;
		case 101: goto tr43;
		case 104: goto tr44;
		case 105: goto tr45;
		case 107: goto tr46;
		case 108: goto tr47;
		case 109: goto tr48;
		case 110: goto tr49;
		case 112: goto tr50;
		case 114: goto tr51;
		case 115: goto tr52;
		case 116: goto tr53;
		case 117: goto tr54;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr132;
		case 1083: goto st260;
	}
	goto tr128;
tr6:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st16;
tr41:
	{
		s->r_class = s->default_class;
	}
	goto st16;
tr599:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st16;
st16:
	if ( ++p == pe )
		goto _test_eof16;
case 16:
	switch( (*p) ) {
		case 65: goto st17;
		case 68: goto st20;
		case 69: goto st27;
		case 78: goto st30;
		case 97: goto st17;
		case 100: goto st20;
		case 101: goto st27;
		case 110: goto st30;
	}
	goto tr36;
st17:
	if ( ++p == pe )
		goto _test_eof17;
case 17:
	switch( (*p) ) {
		case 65: goto st18;
		case 97: goto st18;
	}
	goto tr36;
st18:
	if ( ++p == pe )
		goto _test_eof18;
case 18:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr139;
		case 32: goto tr139;
		case 40: goto tr140;
		case 41: goto tr141;
		case 2058: goto tr142;
		case 2107: goto tr143;
		case 2314: goto tr144;
		case 2363: goto tr144;
		case 2570: goto tr145;
		case 2619: goto tr146;
	}
	goto tr57;
tr148:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st19;
tr149:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st19;
tr68:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr78:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr146:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr163:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr171:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr181:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr192:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr206:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr218:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr229:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr237:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr250:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr259:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr271:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr312:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr323:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr331:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr344:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr353:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr362:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr370:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr383:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr391:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr405:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr414:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr423:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr433:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr442:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr454:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr464:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr475:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr486:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr494:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr507:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr516:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr525:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr536:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr549:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr558:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr572:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr582:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr789:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr800:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
tr809:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 19; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 19; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 19; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 19; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 19; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 19; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 19; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 19; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 19; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 19; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 19; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 19; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 19; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 19; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 19; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 19; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 19; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 19; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 19; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 19; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 19; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 19; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 19; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 19; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 19; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 19; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 19; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 19; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 19; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st19;
st19:
	if ( ++p == pe )
		goto _test_eof19;
case 19:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st7;
		case 778: goto tr83;
		case 800: goto st7;
		case 808: goto tr81;
		case 809: goto tr82;
		case 827: goto st8;
		case 1033: goto st19;
		case 1034: goto tr83;
		case 1056: goto st19;
		case 1064: goto tr148;
		case 1065: goto tr149;
		case 1083: goto st12;
	}
	if ( 896 <= _widec && _widec <= 1151 )
		goto st10;
	goto tr79;
st20:
	if ( ++p == pe )
		goto _test_eof20;
case 20:
	switch( (*p) ) {
		case 78: goto st21;
		case 83: goto st26;
		case 110: goto st21;
		case 115: goto st26;
	}
	goto tr36;
st21:
	if ( ++p == pe )
		goto _test_eof21;
case 21:
	switch( (*p) ) {
		case 83: goto st22;
		case 115: goto st22;
	}
	goto tr36;
st22:
	if ( ++p == pe )
		goto _test_eof22;
case 22:
	switch( (*p) ) {
		case 75: goto st23;
		case 107: goto st23;
	}
	goto tr36;
st23:
	if ( ++p == pe )
		goto _test_eof23;
case 23:
	switch( (*p) ) {
		case 69: goto st24;
		case 101: goto st24;
	}
	goto tr36;
st24:
	if ( ++p == pe )
		goto _test_eof24;
case 24:
	switch( (*p) ) {
		case 89: goto st25;
		case 121: goto st25;
	}
	goto tr36;
st25:
	if ( ++p == pe )
		goto _test_eof25;
case 25:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr156;
		case 32: goto tr156;
		case 40: goto tr157;
		case 41: goto tr158;
		case 2058: goto tr159;
		case 2107: goto tr160;
		case 2314: goto tr161;
		case 2363: goto tr161;
		case 2570: goto tr162;
		case 2619: goto tr163;
	}
	goto tr57;
st26:
	if ( ++p == pe )
		goto _test_eof26;
case 26:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr164;
		case 32: goto tr164;
		case 40: goto tr165;
		case 41: goto tr166;
		case 2058: goto tr167;
		case 2107: goto tr168;
		case 2314: goto tr169;
		case 2363: goto tr169;
		case 2570: goto tr170;
		case 2619: goto tr171;
	}
	goto tr57;
st27:
	if ( ++p == pe )
		goto _test_eof27;
case 27:
	switch( (*p) ) {
		case 82: goto st28;
		case 114: goto st28;
	}
	goto tr36;
st28:
	if ( ++p == pe )
		goto _test_eof28;
case 28:
	switch( (*p) ) {
		case 84: goto st29;
		case 116: goto st29;
	}
	goto tr36;
st29:
	if ( ++p == pe )
		goto _test_eof29;
case 29:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr174;
		case 32: goto tr174;
		case 40: goto tr175;
		case 41: goto tr176;
		case 2058: goto tr177;
		case 2107: goto tr178;
		case 2314: goto tr179;
		case 2363: goto tr179;
		case 2570: goto tr180;
		case 2619: goto tr181;
	}
	goto tr57;
st30:
	if ( ++p == pe )
		goto _test_eof30;
case 30:
	switch( (*p) ) {
		case 65: goto st31;
		case 97: goto st31;
	}
	goto tr36;
st31:
	if ( ++p == pe )
		goto _test_eof31;
case 31:
	switch( (*p) ) {
		case 77: goto st32;
		case 109: goto st32;
	}
	goto tr36;
st32:
	if ( ++p == pe )
		goto _test_eof32;
case 32:
	switch( (*p) ) {
		case 69: goto st33;
		case 101: goto st33;
	}
	goto tr36;
st33:
	if ( ++p == pe )
		goto _test_eof33;
case 33:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr185;
		case 32: goto tr185;
		case 40: goto tr186;
		case 41: goto tr187;
		case 2058: goto tr188;
		case 2107: goto tr189;
		case 2314: goto tr190;
		case 2363: goto tr190;
		case 2570: goto tr191;
		case 2619: goto tr192;
	}
	goto tr57;
tr7:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st34;
tr42:
	{
		s->r_class = s->default_class;
	}
	goto st34;
tr600:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st34;
st34:
	if ( ++p == pe )
		goto _test_eof34;
case 34:
	switch( (*p) ) {
		case 72: goto st35;
		case 78: goto st39;
		case 83: goto st47;
		case 104: goto st35;
		case 110: goto st39;
		case 115: goto st47;
	}
	goto tr36;
st35:
	if ( ++p == pe )
		goto _test_eof35;
case 35:
	switch( (*p) ) {
		case 67: goto st36;
		case 99: goto st36;
	}
	goto tr36;
st36:
	if ( ++p == pe )
		goto _test_eof36;
case 36:
	switch( (*p) ) {
		case 73: goto st37;
		case 105: goto st37;
	}
	goto tr36;
st37:
	if ( ++p == pe )
		goto _test_eof37;
case 37:
	switch( (*p) ) {
		case 68: goto st38;
		case 100: goto st38;
	}
	goto tr36;
st38:
	if ( ++p == pe )
		goto _test_eof38;
case 38:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr199;
		case 32: goto tr199;
		case 40: goto tr200;
		case 41: goto tr201;
		case 2058: goto tr202;
		case 2107: goto tr203;
		case 2314: goto tr204;
		case 2363: goto tr204;
		case 2570: goto tr205;
		case 2619: goto tr206;
	}
	goto tr57;
st39:
	if ( ++p == pe )
		goto _test_eof39;
case 39:
	switch( (*p) ) {
		case 65: goto st40;
		case 83: goto st43;
		case 97: goto st40;
		case 115: goto st43;
	}
	goto tr36;
st40:
	if ( ++p == pe )
		goto _test_eof40;
case 40:
	switch( (*p) ) {
		case 77: goto st41;
		case 109: goto st41;
	}
	goto tr36;
st41:
	if ( ++p == pe )
		goto _test_eof41;
case 41:
	switch( (*p) ) {
		case 69: goto st42;
		case 101: goto st42;
	}
	goto tr36;
st42:
	if ( ++p == pe )
		goto _test_eof42;
case 42:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr211;
		case 32: goto tr211;
		case 40: goto tr212;
		case 41: goto tr213;
		case 2058: goto tr214;
		case 2107: goto tr215;
		case 2314: goto tr216;
		case 2363: goto tr216;
		case 2570: goto tr217;
		case 2619: goto tr218;
	}
	goto tr57;
st43:
	if ( ++p == pe )
		goto _test_eof43;
case 43:
	switch( (*p) ) {
		case 75: goto st44;
		case 107: goto st44;
	}
	goto tr36;
st44:
	if ( ++p == pe )
		goto _test_eof44;
case 44:
	switch( (*p) ) {
		case 69: goto st45;
		case 101: goto st45;
	}
	goto tr36;
st45:
	if ( ++p == pe )
		goto _test_eof45;
case 45:
	switch( (*p) ) {
		case 89: goto st46;
		case 121: goto st46;
	}
	goto tr36;
st46:
	if ( ++p == pe )
		goto _test_eof46;
case 46:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr222;
		case 32: goto tr222;
		case 40: goto tr223;
		case 41: goto tr224;
		case 2058: goto tr225;
		case 2107: goto tr226;
		case 2314: goto tr227;
		case 2363: goto tr227;
		case 2570: goto tr228;
		case 2619: goto tr229;
	}
	goto tr57;
st47:
	if ( ++p == pe )
		goto _test_eof47;
case 47:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr230;
		case 32: goto tr230;
		case 40: goto tr231;
		case 41: goto tr232;
		case 2058: goto tr233;
		case 2107: goto tr234;
		case 2314: goto tr235;
		case 2363: goto tr235;
		case 2570: goto tr236;
		case 2619: goto tr237;
	}
	goto tr57;
tr8:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st48;
tr43:
	{
		s->r_class = s->default_class;
	}
	goto st48;
tr601:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st48;
st48:
	if ( ++p == pe )
		goto _test_eof48;
case 48:
	switch( (*p) ) {
		case 85: goto st49;
		case 117: goto st49;
	}
	goto tr36;
st49:
	if ( ++p == pe )
		goto _test_eof49;
case 49:
	switch( (*p) ) {
		case 73: goto st50;
		case 105: goto st50;
	}
	goto tr36;
st50:
	if ( ++p == pe )
		goto _test_eof50;
case 50:
	switch( (*p) ) {
		case 52: goto st51;
		case 54: goto st53;
	}
	goto tr36;
st51:
	if ( ++p == pe )
		goto _test_eof51;
case 51:
	if ( (*p) == 56 )
		goto st52;
	goto tr36;
st52:
	if ( ++p == pe )
		goto _test_eof52;
case 52:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr243;
		case 32: goto tr243;
		case 40: goto tr244;
		case 41: goto tr245;
		case 2058: goto tr246;
		case 2107: goto tr247;
		case 2314: goto tr248;
		case 2363: goto tr248;
		case 2570: goto tr249;
		case 2619: goto tr250;
	}
	goto tr57;
st53:
	if ( ++p == pe )
		goto _test_eof53;
case 53:
	if ( (*p) == 52 )
		goto st54;
	goto tr36;
st54:
	if ( ++p == pe )
		goto _test_eof54;
case 54:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr252;
		case 32: goto tr252;
		case 40: goto tr253;
		case 41: goto tr254;
		case 2058: goto tr255;
		case 2107: goto tr256;
		case 2314: goto tr257;
		case 2363: goto tr257;
		case 2570: goto tr258;
		case 2619: goto tr259;
	}
	goto tr57;
tr9:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st55;
tr44:
	{
		s->r_class = s->default_class;
	}
	goto st55;
tr602:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st55;
st55:
	if ( ++p == pe )
		goto _test_eof55;
case 55:
	switch( (*p) ) {
		case 73: goto st56;
		case 105: goto st56;
	}
	goto tr36;
st56:
	if ( ++p == pe )
		goto _test_eof56;
case 56:
	switch( (*p) ) {
		case 78: goto st57;
		case 110: goto st57;
	}
	goto tr36;
st57:
	if ( ++p == pe )
		goto _test_eof57;
case 57:
	switch( (*p) ) {
		case 70: goto st58;
		case 102: goto st58;
	}
	goto tr36;
st58:
	if ( ++p == pe )
		goto _test_eof58;
case 58:
	switch( (*p) ) {
		case 79: goto st59;
		case 111: goto st59;
	}
	goto tr36;
st59:
	if ( ++p == pe )
		goto _test_eof59;
case 59:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr264;
		case 32: goto tr264;
		case 40: goto tr265;
		case 41: goto tr266;
		case 2058: goto tr267;
		case 2107: goto tr268;
		case 2314: goto tr269;
		case 2363: goto tr269;
		case 2570: goto tr270;
		case 2619: goto tr271;
	}
	goto tr57;
tr45:
	{
		s->r_class = s->default_class;
	}
	goto st60;
st60:
	if ( ++p == pe )
		goto _test_eof60;
case 60:
	switch( (*p) ) {
		case 78: goto st61;
		case 80: goto st64;
		case 110: goto st61;
		case 112: goto st64;
	}
	goto tr36;
st61:
	if ( ++p == pe )
		goto _test_eof61;
case 61:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr274;
		case 32: goto tr274;
		case 40: goto tr275;
		case 41: goto tr276;
		case 1034: goto tr277;
		case 1083: goto tr278;
	}
	goto tr36;
tr280:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st62;
tr281:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st62;
tr297:
	{
		s->line_counter++;
	}
	goto st62;
tr615:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st62;
tr616:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st62;
tr617:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st62;
tr624:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st62;
tr274:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st62;
tr275:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st62;
tr276:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st62;
tr277:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->line_counter++;
	}
	goto st62;
tr633:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st62;
tr634:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st62;
tr635:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st62;
tr637:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st62;
st62:
	if ( ++p == pe )
		goto _test_eof62;
case 62:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st62;
		case 32: goto st62;
		case 40: goto tr280;
		case 41: goto tr281;
		case 65: goto st4;
		case 67: goto st16;
		case 68: goto st34;
		case 69: goto st48;
		case 72: goto st55;
		case 73: goto st63;
		case 75: goto st71;
		case 76: goto st75;
		case 77: goto st83;
		case 78: goto st89;
		case 80: goto st105;
		case 82: goto st108;
		case 83: goto st115;
		case 84: goto st126;
		case 85: goto st136;
		case 97: goto st4;
		case 99: goto st16;
		case 100: goto st34;
		case 101: goto st48;
		case 104: goto st55;
		case 105: goto st63;
		case 107: goto st71;
		case 108: goto st75;
		case 109: goto st83;
		case 110: goto st89;
		case 112: goto st105;
		case 114: goto st108;
		case 115: goto st115;
		case 116: goto st126;
		case 117: goto st136;
		case 1034: goto tr297;
		case 1083: goto st139;
	}
	goto tr36;
tr603:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st63;
st63:
	if ( ++p == pe )
		goto _test_eof63;
case 63:
	switch( (*p) ) {
		case 80: goto st64;
		case 112: goto st64;
	}
	goto tr36;
st64:
	if ( ++p == pe )
		goto _test_eof64;
case 64:
	switch( (*p) ) {
		case 83: goto st65;
		case 115: goto st65;
	}
	goto tr36;
st65:
	if ( ++p == pe )
		goto _test_eof65;
case 65:
	switch( (*p) ) {
		case 69: goto st66;
		case 101: goto st66;
	}
	goto tr36;
st66:
	if ( ++p == pe )
		goto _test_eof66;
case 66:
	switch( (*p) ) {
		case 67: goto st67;
		case 99: goto st67;
	}
	goto tr36;
st67:
	if ( ++p == pe )
		goto _test_eof67;
case 67:
	switch( (*p) ) {
		case 75: goto st68;
		case 107: goto st68;
	}
	goto tr36;
st68:
	if ( ++p == pe )
		goto _test_eof68;
case 68:
	switch( (*p) ) {
		case 69: goto st69;
		case 101: goto st69;
	}
	goto tr36;
st69:
	if ( ++p == pe )
		goto _test_eof69;
case 69:
	switch( (*p) ) {
		case 89: goto st70;
		case 121: goto st70;
	}
	goto tr36;
st70:
	if ( ++p == pe )
		goto _test_eof70;
case 70:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr305;
		case 32: goto tr305;
		case 40: goto tr306;
		case 41: goto tr307;
		case 2058: goto tr308;
		case 2107: goto tr309;
		case 2314: goto tr310;
		case 2363: goto tr310;
		case 2570: goto tr311;
		case 2619: goto tr312;
	}
	goto tr57;
tr11:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st71;
tr46:
	{
		s->r_class = s->default_class;
	}
	goto st71;
tr604:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st71;
st71:
	if ( ++p == pe )
		goto _test_eof71;
case 71:
	switch( (*p) ) {
		case 69: goto st72;
		case 88: goto st74;
		case 101: goto st72;
		case 120: goto st74;
	}
	goto tr36;
st72:
	if ( ++p == pe )
		goto _test_eof72;
case 72:
	switch( (*p) ) {
		case 89: goto st73;
		case 121: goto st73;
	}
	goto tr36;
st73:
	if ( ++p == pe )
		goto _test_eof73;
case 73:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr316;
		case 32: goto tr316;
		case 40: goto tr317;
		case 41: goto tr318;
		case 2058: goto tr319;
		case 2107: goto tr320;
		case 2314: goto tr321;
		case 2363: goto tr321;
		case 2570: goto tr322;
		case 2619: goto tr323;
	}
	goto tr57;
st74:
	if ( ++p == pe )
		goto _test_eof74;
case 74:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr324;
		case 32: goto tr324;
		case 40: goto tr325;
		case 41: goto tr326;
		case 2058: goto tr327;
		case 2107: goto tr328;
		case 2314: goto tr329;
		case 2363: goto tr329;
		case 2570: goto tr330;
		case 2619: goto tr331;
	}
	goto tr57;
tr12:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st75;
tr47:
	{
		s->r_class = s->default_class;
	}
	goto st75;
tr605:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st75;
st75:
	if ( ++p == pe )
		goto _test_eof75;
case 75:
	switch( (*p) ) {
		case 51: goto st76;
		case 54: goto st78;
		case 79: goto st80;
		case 80: goto st82;
		case 111: goto st80;
		case 112: goto st82;
	}
	goto tr36;
st76:
	if ( ++p == pe )
		goto _test_eof76;
case 76:
	if ( (*p) == 50 )
		goto st77;
	goto tr36;
st77:
	if ( ++p == pe )
		goto _test_eof77;
case 77:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr337;
		case 32: goto tr337;
		case 40: goto tr338;
		case 41: goto tr339;
		case 2058: goto tr340;
		case 2107: goto tr341;
		case 2314: goto tr342;
		case 2363: goto tr342;
		case 2570: goto tr343;
		case 2619: goto tr344;
	}
	goto tr57;
st78:
	if ( ++p == pe )
		goto _test_eof78;
case 78:
	if ( (*p) == 52 )
		goto st79;
	goto tr36;
st79:
	if ( ++p == pe )
		goto _test_eof79;
case 79:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr346;
		case 32: goto tr346;
		case 40: goto tr347;
		case 41: goto tr348;
		case 2058: goto tr349;
		case 2107: goto tr350;
		case 2314: goto tr351;
		case 2363: goto tr351;
		case 2570: goto tr352;
		case 2619: goto tr353;
	}
	goto tr57;
st80:
	if ( ++p == pe )
		goto _test_eof80;
case 80:
	switch( (*p) ) {
		case 67: goto st81;
		case 99: goto st81;
	}
	goto tr36;
st81:
	if ( ++p == pe )
		goto _test_eof81;
case 81:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr355;
		case 32: goto tr355;
		case 40: goto tr356;
		case 41: goto tr357;
		case 2058: goto tr358;
		case 2107: goto tr359;
		case 2314: goto tr360;
		case 2363: goto tr360;
		case 2570: goto tr361;
		case 2619: goto tr362;
	}
	goto tr57;
st82:
	if ( ++p == pe )
		goto _test_eof82;
case 82:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr363;
		case 32: goto tr363;
		case 40: goto tr364;
		case 41: goto tr365;
		case 2058: goto tr366;
		case 2107: goto tr367;
		case 2314: goto tr368;
		case 2363: goto tr368;
		case 2570: goto tr369;
		case 2619: goto tr370;
	}
	goto tr57;
tr13:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st83;
tr48:
	{
		s->r_class = s->default_class;
	}
	goto st83;
tr606:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st83;
st83:
	if ( ++p == pe )
		goto _test_eof83;
case 83:
	switch( (*p) ) {
		case 73: goto st84;
		case 88: goto st88;
		case 105: goto st84;
		case 120: goto st88;
	}
	goto tr36;
st84:
	if ( ++p == pe )
		goto _test_eof84;
case 84:
	switch( (*p) ) {
		case 78: goto st85;
		case 110: goto st85;
	}
	goto tr36;
st85:
	if ( ++p == pe )
		goto _test_eof85;
case 85:
	switch( (*p) ) {
		case 70: goto st86;
		case 102: goto st86;
	}
	goto tr36;
st86:
	if ( ++p == pe )
		goto _test_eof86;
case 86:
	switch( (*p) ) {
		case 79: goto st87;
		case 111: goto st87;
	}
	goto tr36;
st87:
	if ( ++p == pe )
		goto _test_eof87;
case 87:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr376;
		case 32: goto tr376;
		case 40: goto tr377;
		case 41: goto tr378;
		case 2058: goto tr379;
		case 2107: goto tr380;
		case 2314: goto tr381;
		case 2363: goto tr381;
		case 2570: goto tr382;
		case 2619: goto tr383;
	}
	goto tr57;
st88:
	if ( ++p == pe )
		goto _test_eof88;
case 88:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr384;
		case 32: goto tr384;
		case 40: goto tr385;
		case 41: goto tr386;
		case 2058: goto tr387;
		case 2107: goto tr388;
		case 2314: goto tr389;
		case 2363: goto tr389;
		case 2570: goto tr390;
		case 2619: goto tr391;
	}
	goto tr57;
tr14:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st89;
tr49:
	{
		s->r_class = s->default_class;
	}
	goto st89;
tr607:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st89;
st89:
	if ( ++p == pe )
		goto _test_eof89;
case 89:
	switch( (*p) ) {
		case 65: goto st90;
		case 73: goto st94;
		case 83: goto st96;
		case 97: goto st90;
		case 105: goto st94;
		case 115: goto st96;
	}
	goto tr36;
st90:
	if ( ++p == pe )
		goto _test_eof90;
case 90:
	switch( (*p) ) {
		case 80: goto st91;
		case 112: goto st91;
	}
	goto tr36;
st91:
	if ( ++p == pe )
		goto _test_eof91;
case 91:
	switch( (*p) ) {
		case 84: goto st92;
		case 116: goto st92;
	}
	goto tr36;
st92:
	if ( ++p == pe )
		goto _test_eof92;
case 92:
	switch( (*p) ) {
		case 82: goto st93;
		case 114: goto st93;
	}
	goto tr36;
st93:
	if ( ++p == pe )
		goto _test_eof93;
case 93:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr398;
		case 32: goto tr398;
		case 40: goto tr399;
		case 41: goto tr400;
		case 2058: goto tr401;
		case 2107: goto tr402;
		case 2314: goto tr403;
		case 2363: goto tr403;
		case 2570: goto tr404;
		case 2619: goto tr405;
	}
	goto tr57;
st94:
	if ( ++p == pe )
		goto _test_eof94;
case 94:
	switch( (*p) ) {
		case 68: goto st95;
		case 100: goto st95;
	}
	goto tr36;
st95:
	if ( ++p == pe )
		goto _test_eof95;
case 95:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr407;
		case 32: goto tr407;
		case 40: goto tr408;
		case 41: goto tr409;
		case 2058: goto tr410;
		case 2107: goto tr411;
		case 2314: goto tr412;
		case 2363: goto tr412;
		case 2570: goto tr413;
		case 2619: goto tr414;
	}
	goto tr57;
st96:
	if ( ++p == pe )
		goto _test_eof96;
case 96:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr415;
		case 32: goto tr415;
		case 40: goto tr416;
		case 41: goto tr417;
		case 69: goto st97;
		case 101: goto st97;
		case 2058: goto tr419;
		case 2107: goto tr420;
		case 2314: goto tr421;
		case 2363: goto tr421;
		case 2570: goto tr422;
		case 2619: goto tr423;
	}
	goto tr57;
st97:
	if ( ++p == pe )
		goto _test_eof97;
case 97:
	switch( (*p) ) {
		case 67: goto st98;
		case 99: goto st98;
	}
	goto tr36;
st98:
	if ( ++p == pe )
		goto _test_eof98;
case 98:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr425;
		case 32: goto tr425;
		case 40: goto tr426;
		case 41: goto tr427;
		case 51: goto st99;
		case 2058: goto tr429;
		case 2107: goto tr430;
		case 2314: goto tr431;
		case 2363: goto tr431;
		case 2570: goto tr432;
		case 2619: goto tr433;
	}
	goto tr57;
st99:
	if ( ++p == pe )
		goto _test_eof99;
case 99:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr434;
		case 32: goto tr434;
		case 40: goto tr435;
		case 41: goto tr436;
		case 80: goto st100;
		case 112: goto st100;
		case 2058: goto tr438;
		case 2107: goto tr439;
		case 2314: goto tr440;
		case 2363: goto tr440;
		case 2570: goto tr441;
		case 2619: goto tr442;
	}
	goto tr57;
st100:
	if ( ++p == pe )
		goto _test_eof100;
case 100:
	switch( (*p) ) {
		case 65: goto st101;
		case 97: goto st101;
	}
	goto tr36;
st101:
	if ( ++p == pe )
		goto _test_eof101;
case 101:
	switch( (*p) ) {
		case 82: goto st102;
		case 114: goto st102;
	}
	goto tr36;
st102:
	if ( ++p == pe )
		goto _test_eof102;
case 102:
	switch( (*p) ) {
		case 65: goto st103;
		case 97: goto st103;
	}
	goto tr36;
st103:
	if ( ++p == pe )
		goto _test_eof103;
case 103:
	switch( (*p) ) {
		case 77: goto st104;
		case 109: goto st104;
	}
	goto tr36;
st104:
	if ( ++p == pe )
		goto _test_eof104;
case 104:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr447;
		case 32: goto tr447;
		case 40: goto tr448;
		case 41: goto tr449;
		case 2058: goto tr450;
		case 2107: goto tr451;
		case 2314: goto tr452;
		case 2363: goto tr452;
		case 2570: goto tr453;
		case 2619: goto tr454;
	}
	goto tr57;
tr15:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st105;
tr50:
	{
		s->r_class = s->default_class;
	}
	goto st105;
tr608:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st105;
st105:
	if ( ++p == pe )
		goto _test_eof105;
case 105:
	switch( (*p) ) {
		case 84: goto st106;
		case 116: goto st106;
	}
	goto tr36;
st106:
	if ( ++p == pe )
		goto _test_eof106;
case 106:
	switch( (*p) ) {
		case 82: goto st107;
		case 114: goto st107;
	}
	goto tr36;
st107:
	if ( ++p == pe )
		goto _test_eof107;
case 107:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr457;
		case 32: goto tr457;
		case 40: goto tr458;
		case 41: goto tr459;
		case 2058: goto tr460;
		case 2107: goto tr461;
		case 2314: goto tr462;
		case 2363: goto tr462;
		case 2570: goto tr463;
		case 2619: goto tr464;
	}
	goto tr57;
tr16:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st108;
tr51:
	{
		s->r_class = s->default_class;
	}
	goto st108;
tr609:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st108;
st108:
	if ( ++p == pe )
		goto _test_eof108;
case 108:
	switch( (*p) ) {
		case 80: goto st109;
		case 82: goto st110;
		case 84: goto st114;
		case 112: goto st109;
		case 114: goto st110;
		case 116: goto st114;
	}
	goto tr36;
st109:
	if ( ++p == pe )
		goto _test_eof109;
case 109:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr468;
		case 32: goto tr468;
		case 40: goto tr469;
		case 41: goto tr470;
		case 2058: goto tr471;
		case 2107: goto tr472;
		case 2314: goto tr473;
		case 2363: goto tr473;
		case 2570: goto tr474;
		case 2619: goto tr475;
	}
	goto tr57;
st110:
	if ( ++p == pe )
		goto _test_eof110;
case 110:
	switch( (*p) ) {
		case 83: goto st111;
		case 115: goto st111;
	}
	goto tr36;
st111:
	if ( ++p == pe )
		goto _test_eof111;
case 111:
	switch( (*p) ) {
		case 73: goto st112;
		case 105: goto st112;
	}
	goto tr36;
st112:
	if ( ++p == pe )
		goto _test_eof112;
case 112:
	switch( (*p) ) {
		case 71: goto st113;
		case 103: goto st113;
	}
	goto tr36;
st113:
	if ( ++p == pe )
		goto _test_eof113;
case 113:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr479;
		case 32: goto tr479;
		case 40: goto tr480;
		case 41: goto tr481;
		case 2058: goto tr482;
		case 2107: goto tr483;
		case 2314: goto tr484;
		case 2363: goto tr484;
		case 2570: goto tr485;
		case 2619: goto tr486;
	}
	goto tr57;
st114:
	if ( ++p == pe )
		goto _test_eof114;
case 114:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr487;
		case 32: goto tr487;
		case 40: goto tr488;
		case 41: goto tr489;
		case 2058: goto tr490;
		case 2107: goto tr491;
		case 2314: goto tr492;
		case 2363: goto tr492;
		case 2570: goto tr493;
		case 2619: goto tr494;
	}
	goto tr57;
tr17:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st115;
tr52:
	{
		s->r_class = s->default_class;
	}
	goto st115;
tr610:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st115;
st115:
	if ( ++p == pe )
		goto _test_eof115;
case 115:
	switch( (*p) ) {
		case 79: goto st116;
		case 80: goto st118;
		case 82: goto st120;
		case 83: goto st122;
		case 111: goto st116;
		case 112: goto st118;
		case 114: goto st120;
		case 115: goto st122;
	}
	goto tr36;
st116:
	if ( ++p == pe )
		goto _test_eof116;
case 116:
	switch( (*p) ) {
		case 65: goto st117;
		case 97: goto st117;
	}
	goto tr36;
st117:
	if ( ++p == pe )
		goto _test_eof117;
case 117:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr500;
		case 32: goto tr500;
		case 40: goto tr501;
		case 41: goto tr502;
		case 2058: goto tr503;
		case 2107: goto tr504;
		case 2314: goto tr505;
		case 2363: goto tr505;
		case 2570: goto tr506;
		case 2619: goto tr507;
	}
	goto tr57;
st118:
	if ( ++p == pe )
		goto _test_eof118;
case 118:
	switch( (*p) ) {
		case 70: goto st119;
		case 102: goto st119;
	}
	goto tr36;
st119:
	if ( ++p == pe )
		goto _test_eof119;
case 119:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr509;
		case 32: goto tr509;
		case 40: goto tr510;
		case 41: goto tr511;
		case 2058: goto tr512;
		case 2107: goto tr513;
		case 2314: goto tr514;
		case 2363: goto tr514;
		case 2570: goto tr515;
		case 2619: goto tr516;
	}
	goto tr57;
st120:
	if ( ++p == pe )
		goto _test_eof120;
case 120:
	switch( (*p) ) {
		case 86: goto st121;
		case 118: goto st121;
	}
	goto tr36;
st121:
	if ( ++p == pe )
		goto _test_eof121;
case 121:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr518;
		case 32: goto tr518;
		case 40: goto tr519;
		case 41: goto tr520;
		case 2058: goto tr521;
		case 2107: goto tr522;
		case 2314: goto tr523;
		case 2363: goto tr523;
		case 2570: goto tr524;
		case 2619: goto tr525;
	}
	goto tr57;
st122:
	if ( ++p == pe )
		goto _test_eof122;
case 122:
	switch( (*p) ) {
		case 72: goto st123;
		case 104: goto st123;
	}
	goto tr36;
st123:
	if ( ++p == pe )
		goto _test_eof123;
case 123:
	switch( (*p) ) {
		case 70: goto st124;
		case 102: goto st124;
	}
	goto tr36;
st124:
	if ( ++p == pe )
		goto _test_eof124;
case 124:
	switch( (*p) ) {
		case 80: goto st125;
		case 112: goto st125;
	}
	goto tr36;
st125:
	if ( ++p == pe )
		goto _test_eof125;
case 125:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr529;
		case 32: goto tr529;
		case 40: goto tr530;
		case 41: goto tr531;
		case 2058: goto tr532;
		case 2107: goto tr533;
		case 2314: goto tr534;
		case 2363: goto tr534;
		case 2570: goto tr535;
		case 2619: goto tr536;
	}
	goto tr57;
tr18:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st126;
tr53:
	{
		s->r_class = s->default_class;
	}
	goto st126;
tr611:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st126;
st126:
	if ( ++p == pe )
		goto _test_eof126;
case 126:
	switch( (*p) ) {
		case 76: goto st127;
		case 88: goto st130;
		case 89: goto st132;
		case 108: goto st127;
		case 120: goto st130;
		case 121: goto st132;
	}
	goto tr36;
st127:
	if ( ++p == pe )
		goto _test_eof127;
case 127:
	switch( (*p) ) {
		case 83: goto st128;
		case 115: goto st128;
	}
	goto tr36;
st128:
	if ( ++p == pe )
		goto _test_eof128;
case 128:
	switch( (*p) ) {
		case 65: goto st129;
		case 97: goto st129;
	}
	goto tr36;
st129:
	if ( ++p == pe )
		goto _test_eof129;
case 129:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr542;
		case 32: goto tr542;
		case 40: goto tr543;
		case 41: goto tr544;
		case 2058: goto tr545;
		case 2107: goto tr546;
		case 2314: goto tr547;
		case 2363: goto tr547;
		case 2570: goto tr548;
		case 2619: goto tr549;
	}
	goto tr57;
st130:
	if ( ++p == pe )
		goto _test_eof130;
case 130:
	switch( (*p) ) {
		case 84: goto st131;
		case 116: goto st131;
	}
	goto tr36;
st131:
	if ( ++p == pe )
		goto _test_eof131;
case 131:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr551;
		case 32: goto tr551;
		case 40: goto tr552;
		case 41: goto tr553;
		case 2058: goto tr554;
		case 2107: goto tr555;
		case 2314: goto tr556;
		case 2363: goto tr556;
		case 2570: goto tr557;
		case 2619: goto tr558;
	}
	goto tr57;
st132:
	if ( ++p == pe )
		goto _test_eof132;
case 132:
	switch( (*p) ) {
		case 80: goto st133;
		case 112: goto st133;
	}
	goto tr36;
st133:
	if ( ++p == pe )
		goto _test_eof133;
case 133:
	switch( (*p) ) {
		case 69: goto st134;
		case 101: goto st134;
	}
	goto tr36;
st134:
	if ( ++p == pe )
		goto _test_eof134;
case 134:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr562;
	goto tr561;
tr562:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st135;
tr567:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st135;
st135:
	if ( ++p == pe )
		goto _test_eof135;
case 135:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr564;
		case 32: goto tr564;
		case 40: goto tr565;
		case 41: goto tr566;
		case 2058: goto tr568;
		case 2107: goto tr569;
		case 2314: goto tr570;
		case 2363: goto tr570;
		case 2570: goto tr571;
		case 2619: goto tr572;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr567;
	goto tr563;
tr19:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st136;
tr54:
	{
		s->r_class = s->default_class;
	}
	goto st136;
tr612:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st136;
st136:
	if ( ++p == pe )
		goto _test_eof136;
case 136:
	switch( (*p) ) {
		case 82: goto st137;
		case 114: goto st137;
	}
	goto tr36;
st137:
	if ( ++p == pe )
		goto _test_eof137;
case 137:
	switch( (*p) ) {
		case 73: goto st138;
		case 105: goto st138;
	}
	goto tr36;
st138:
	if ( ++p == pe )
		goto _test_eof138;
case 138:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr575;
		case 32: goto tr575;
		case 40: goto tr576;
		case 41: goto tr577;
		case 2058: goto tr578;
		case 2107: goto tr579;
		case 2314: goto tr580;
		case 2363: goto tr580;
		case 2570: goto tr581;
		case 2619: goto tr582;
	}
	goto tr57;
tr625:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st139;
tr278:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st139;
tr638:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st139;
st139:
	if ( ++p == pe )
		goto _test_eof139;
case 139:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr297;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st139;
	goto tr36;
tr132:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1113; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1113; goto _out;}
		}
	}
	goto st1113;
tr126:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1113; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1113; goto _out;}
		}
	}
	goto st1113;
st1113:
	if ( ++p == pe )
		goto _test_eof1113;
case 1113:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3330;
		case 32: goto tr3330;
		case 36: goto st150;
		case 40: goto tr3331;
		case 41: goto tr3332;
		case 42: goto tr3316;
		case 65: goto tr3333;
		case 67: goto tr3334;
		case 68: goto tr3335;
		case 69: goto tr3336;
		case 72: goto tr3337;
		case 73: goto tr3338;
		case 75: goto tr3339;
		case 76: goto tr3340;
		case 77: goto tr3341;
		case 78: goto tr3342;
		case 80: goto tr3343;
		case 82: goto tr3344;
		case 83: goto tr3345;
		case 84: goto tr3346;
		case 85: goto tr3347;
		case 92: goto tr3316;
		case 95: goto tr3316;
		case 97: goto tr3333;
		case 99: goto tr3334;
		case 100: goto tr3335;
		case 101: goto tr3336;
		case 104: goto tr3337;
		case 105: goto tr3338;
		case 107: goto tr3339;
		case 108: goto tr3340;
		case 109: goto tr3341;
		case 110: goto tr3342;
		case 112: goto tr3343;
		case 114: goto tr3344;
		case 115: goto tr3345;
		case 116: goto tr3346;
		case 117: goto tr3347;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr3348;
		case 1083: goto tr3349;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3316;
	} else if ( _widec > 90 ) {
		if ( 98 <= _widec && _widec <= 122 )
			goto tr3316;
	} else
		goto tr3316;
	goto tr3329;
tr584:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st140;
tr585:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st140;
tr3330:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st140;
tr3331:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st140;
tr3332:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st140;
st140:
	if ( ++p == pe )
		goto _test_eof140;
case 140:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st140;
		case 32: goto st140;
		case 40: goto tr584;
		case 41: goto tr585;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr586;
		case 1083: goto st258;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr10:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st141;
st141:
	if ( ++p == pe )
		goto _test_eof141;
case 141:
	switch( (*p) ) {
		case 78: goto st142;
		case 80: goto st64;
		case 110: goto st142;
		case 112: goto st64;
	}
	goto tr36;
st142:
	if ( ++p == pe )
		goto _test_eof142;
case 142:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr589;
		case 32: goto tr589;
		case 40: goto tr590;
		case 41: goto tr591;
		case 1034: goto tr592;
		case 1083: goto tr593;
	}
	goto tr36;
tr595:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st143;
tr596:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st143;
tr613:
	{
		s->line_counter++;
	}
	goto st143;
tr589:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st143;
tr590:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st143;
tr591:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st143;
tr592:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->line_counter++;
	}
	goto st143;
st143:
	if ( ++p == pe )
		goto _test_eof143;
case 143:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st143;
		case 32: goto st143;
		case 40: goto tr595;
		case 41: goto tr596;
		case 65: goto tr598;
		case 67: goto tr599;
		case 68: goto tr600;
		case 69: goto tr601;
		case 72: goto tr602;
		case 73: goto tr603;
		case 75: goto tr604;
		case 76: goto tr605;
		case 77: goto tr606;
		case 78: goto tr607;
		case 80: goto tr608;
		case 82: goto tr609;
		case 83: goto tr610;
		case 84: goto tr611;
		case 85: goto tr612;
		case 97: goto tr598;
		case 99: goto tr599;
		case 100: goto tr600;
		case 101: goto tr601;
		case 104: goto tr602;
		case 105: goto tr603;
		case 107: goto tr604;
		case 108: goto tr605;
		case 109: goto tr606;
		case 110: goto tr607;
		case 112: goto tr608;
		case 114: goto tr609;
		case 115: goto tr610;
		case 116: goto tr611;
		case 117: goto tr612;
		case 1034: goto tr613;
		case 1083: goto st148;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr597;
	goto tr561;
tr597:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st144;
tr618:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st144;
st144:
	if ( ++p == pe )
		goto _test_eof144;
case 144:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr615;
		case 32: goto tr615;
		case 40: goto tr616;
		case 41: goto tr617;
		case 68: goto tr619;
		case 72: goto tr620;
		case 77: goto tr621;
		case 83: goto st145;
		case 87: goto tr623;
		case 100: goto tr619;
		case 104: goto tr620;
		case 109: goto tr621;
		case 115: goto st145;
		case 119: goto tr623;
		case 1034: goto tr624;
		case 1083: goto tr625;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr618;
	goto tr24;
tr619:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st145;
tr620:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st145;
tr621:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st145;
tr623:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st145;
st145:
	if ( ++p == pe )
		goto _test_eof145;
case 145:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr615;
		case 32: goto tr615;
		case 40: goto tr616;
		case 41: goto tr617;
		case 1034: goto tr624;
		case 1083: goto tr625;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr626;
	goto tr24;
tr627:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st146;
tr626:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st146;
tr636:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st146;
st146:
	if ( ++p == pe )
		goto _test_eof146;
case 146:
	switch( (*p) ) {
		case 68: goto tr628;
		case 72: goto tr629;
		case 77: goto tr630;
		case 83: goto st147;
		case 87: goto tr632;
		case 100: goto tr628;
		case 104: goto tr629;
		case 109: goto tr630;
		case 115: goto st147;
		case 119: goto tr632;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr627;
	goto tr24;
tr628:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st147;
tr629:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st147;
tr630:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st147;
tr632:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st147;
st147:
	if ( ++p == pe )
		goto _test_eof147;
case 147:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr633;
		case 32: goto tr633;
		case 40: goto tr634;
		case 41: goto tr635;
		case 1034: goto tr637;
		case 1083: goto tr638;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr636;
	goto tr24;
tr593:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st148;
st148:
	if ( ++p == pe )
		goto _test_eof148;
case 148:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr613;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st148;
	goto tr36;
tr3374:
	cs = 149;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	goto _again;
st149:
	if ( ++p == pe )
		goto _test_eof149;
case 149:
	if ( (*p) == 10 )
		goto tr20;
	goto st149;
tr586:
	{
		s->line_counter++;
	}
	goto st1114;
tr754:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1114; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1114; goto _out;}
		}
	}
	goto st1114;
tr749:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1114; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1114; goto _out;}
		}
	}
	goto st1114;
tr3348:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1114;
st1114:
	if ( ++p == pe )
		goto _test_eof1114;
case 1114:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3330;
		case 32: goto tr3330;
		case 36: goto st150;
		case 40: goto tr3331;
		case 41: goto tr3332;
		case 42: goto tr3316;
		case 65: goto tr3352;
		case 67: goto tr3353;
		case 68: goto tr3354;
		case 69: goto tr3355;
		case 72: goto tr3356;
		case 73: goto tr3357;
		case 75: goto tr3358;
		case 76: goto tr3359;
		case 77: goto tr3360;
		case 78: goto tr3361;
		case 80: goto tr3362;
		case 82: goto tr3363;
		case 83: goto tr3364;
		case 84: goto tr3365;
		case 85: goto tr3366;
		case 92: goto tr3316;
		case 95: goto tr3316;
		case 97: goto tr3352;
		case 99: goto tr3353;
		case 100: goto tr3354;
		case 101: goto tr3355;
		case 104: goto tr3356;
		case 105: goto tr3357;
		case 107: goto tr3358;
		case 108: goto tr3359;
		case 109: goto tr3360;
		case 110: goto tr3361;
		case 112: goto tr3362;
		case 114: goto tr3363;
		case 115: goto tr3364;
		case 116: goto tr3365;
		case 117: goto tr3366;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr3348;
		case 1083: goto tr3349;
	}
	if ( _widec < 48 ) {
		if ( 45 <= _widec && _widec <= 47 )
			goto tr3316;
	} else if ( _widec > 57 ) {
		if ( _widec > 90 ) {
			if ( 98 <= _widec && _widec <= 122 )
				goto tr3316;
		} else if ( _widec >= 64 )
			goto tr3316;
	} else
		goto tr3351;
	goto tr3350;
tr3369:
	cs = 150;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	goto _again;
st150:
	if ( ++p == pe )
		goto _test_eof150;
case 150:
	switch( (*p) ) {
		case 73: goto tr640;
		case 79: goto tr641;
		case 84: goto tr642;
		case 105: goto tr640;
		case 111: goto tr641;
		case 116: goto tr642;
	}
	goto tr639;
tr640:
	{
		ERR(ZS_OK);
	}
	goto st151;
st151:
	if ( ++p == pe )
		goto _test_eof151;
case 151:
	switch( (*p) ) {
		case 78: goto st152;
		case 110: goto st152;
	}
	goto tr639;
st152:
	if ( ++p == pe )
		goto _test_eof152;
case 152:
	switch( (*p) ) {
		case 67: goto st153;
		case 99: goto st153;
	}
	goto tr639;
st153:
	if ( ++p == pe )
		goto _test_eof153;
case 153:
	switch( (*p) ) {
		case 76: goto st154;
		case 108: goto st154;
	}
	goto tr639;
st154:
	if ( ++p == pe )
		goto _test_eof154;
case 154:
	switch( (*p) ) {
		case 85: goto st155;
		case 117: goto st155;
	}
	goto tr639;
st155:
	if ( ++p == pe )
		goto _test_eof155;
case 155:
	switch( (*p) ) {
		case 68: goto st156;
		case 100: goto st156;
	}
	goto tr639;
st156:
	if ( ++p == pe )
		goto _test_eof156;
case 156:
	switch( (*p) ) {
		case 69: goto st157;
		case 101: goto st157;
	}
	goto tr639;
st157:
	if ( ++p == pe )
		goto _test_eof157;
case 157:
	switch( (*p) ) {
		case 32: goto tr649;
		case 59: goto tr649;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr649;
	} else if ( (*p) >= 9 )
		goto tr649;
	goto tr639;
tr649:
	{ p--; {stack[top++] = 1115; goto st305;} }
	goto st1115;
tr735:
	{ p--; {stack[top++] = 1115; goto st293;} }
	goto st1115;
tr738:
	{ p--; {stack[top++] = 1115; goto st284;} }
	goto st1115;
st1115:
	if ( ++p == pe )
		goto _test_eof1115;
case 1115:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3368;
		case 32: goto tr3368;
		case 36: goto tr3369;
		case 40: goto tr3370;
		case 41: goto tr3371;
		case 42: goto tr3372;
		case 92: goto tr3372;
		case 95: goto tr3372;
		case 778: goto tr3373;
		case 827: goto tr3374;
		case 1034: goto tr3375;
		case 1083: goto tr3376;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3372;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3372;
	} else
		goto tr3372;
	goto tr3367;
tr3316:
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 158; goto st263;} }
	goto st158;
tr3372:
	cs = 158;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 158; goto st263;} }
	goto _again;
st158:
	if ( ++p == pe )
		goto _test_eof158;
case 158:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr650;
tr657:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st159;
tr658:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st159;
tr659:
	{
		s->line_counter++;
	}
	goto st159;
tr651:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	goto st159;
tr652:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st159;
tr653:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st159;
tr654:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st159;
st159:
	if ( ++p == pe )
		goto _test_eof159;
case 159:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st159;
		case 32: goto st159;
		case 40: goto tr657;
		case 41: goto tr658;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 1034: goto tr659;
		case 1083: goto st160;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr561;
tr655:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	goto st160;
st160:
	if ( ++p == pe )
		goto _test_eof160;
case 160:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr659;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st160;
	goto st0;
tr22:
	{
		s->line_counter++;
	}
	goto st1116;
tr718:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1116; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1116; goto _out;}
		}
	}
	goto st1116;
tr743:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1116; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1116; goto _out;}
		}
	}
	goto st1116;
tr3317:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1116;
tr3379:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1116;
tr3375:
	cs = 1116;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto _again;
tr3383:
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1116; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1116; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1116;
tr3407:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1116; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1116; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1116;
st1116:
	if ( ++p == pe )
		goto _test_eof1116;
case 1116:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3312;
		case 32: goto tr3312;
		case 36: goto st150;
		case 40: goto tr3377;
		case 41: goto tr3378;
		case 42: goto tr3316;
		case 65: goto tr3352;
		case 67: goto tr3353;
		case 68: goto tr3354;
		case 69: goto tr3355;
		case 72: goto tr3356;
		case 73: goto tr3357;
		case 75: goto tr3358;
		case 76: goto tr3359;
		case 77: goto tr3360;
		case 78: goto tr3361;
		case 80: goto tr3362;
		case 82: goto tr3363;
		case 83: goto tr3364;
		case 84: goto tr3365;
		case 85: goto tr3366;
		case 92: goto tr3316;
		case 95: goto tr3316;
		case 97: goto tr3352;
		case 99: goto tr3353;
		case 100: goto tr3354;
		case 101: goto tr3355;
		case 104: goto tr3356;
		case 105: goto tr3357;
		case 107: goto tr3358;
		case 108: goto tr3359;
		case 109: goto tr3360;
		case 110: goto tr3361;
		case 112: goto tr3362;
		case 114: goto tr3363;
		case 115: goto tr3364;
		case 116: goto tr3365;
		case 117: goto tr3366;
		case 778: goto tr20;
		case 827: goto st149;
		case 1034: goto tr3379;
		case 1083: goto tr3318;
	}
	if ( _widec < 48 ) {
		if ( 45 <= _widec && _widec <= 47 )
			goto tr3316;
	} else if ( _widec > 57 ) {
		if ( _widec > 90 ) {
			if ( 98 <= _widec && _widec <= 122 )
				goto tr3316;
		} else if ( _widec >= 64 )
			goto tr3316;
	} else
		goto tr3351;
	goto tr3350;
tr3351:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 161; goto st263;} }
	goto st161;
st161:
	if ( ++p == pe )
		goto _test_eof161;
case 161:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr663;
		case 32: goto tr663;
		case 40: goto tr664;
		case 41: goto tr665;
		case 68: goto tr29;
		case 72: goto tr30;
		case 77: goto tr31;
		case 83: goto st164;
		case 87: goto tr33;
		case 100: goto tr29;
		case 104: goto tr30;
		case 109: goto tr31;
		case 115: goto st164;
		case 119: goto tr33;
		case 1034: goto tr666;
		case 1083: goto tr667;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr28;
	goto tr662;
tr669:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st162;
tr670:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st162;
tr671:
	{
		s->line_counter++;
	}
	goto st162;
tr663:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st162;
tr664:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st162;
tr665:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st162;
tr666:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st162;
st162:
	if ( ++p == pe )
		goto _test_eof162;
case 162:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st162;
		case 32: goto st162;
		case 40: goto tr669;
		case 41: goto tr670;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 1034: goto tr671;
		case 1083: goto st163;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr561;
tr667:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st163;
st163:
	if ( ++p == pe )
		goto _test_eof163;
case 163:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr671;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st163;
	goto tr36;
tr29:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st164;
tr30:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st164;
tr31:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st164;
tr33:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st164;
st164:
	if ( ++p == pe )
		goto _test_eof164;
case 164:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr25;
		case 32: goto tr25;
		case 40: goto tr26;
		case 41: goto tr27;
		case 1034: goto tr34;
		case 1083: goto tr35;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr673;
	goto tr24;
tr674:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st165;
tr673:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st165;
tr683:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st165;
st165:
	if ( ++p == pe )
		goto _test_eof165;
case 165:
	switch( (*p) ) {
		case 68: goto tr675;
		case 72: goto tr676;
		case 77: goto tr677;
		case 83: goto st166;
		case 87: goto tr679;
		case 100: goto tr675;
		case 104: goto tr676;
		case 109: goto tr677;
		case 115: goto st166;
		case 119: goto tr679;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr674;
	goto tr24;
tr675:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st166;
tr676:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st166;
tr677:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st166;
tr679:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st166;
st166:
	if ( ++p == pe )
		goto _test_eof166;
case 166:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr680;
		case 32: goto tr680;
		case 40: goto tr681;
		case 41: goto tr682;
		case 1034: goto tr684;
		case 1083: goto tr685;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr683;
	goto tr24;
tr35:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st167;
tr685:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st167;
st167:
	if ( ++p == pe )
		goto _test_eof167;
case 167:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr55;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st167;
	goto tr36;
tr3333:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 168; goto st263;} }
	goto st168;
tr3352:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 168; goto st263;} }
	goto st168;
st168:
	if ( ++p == pe )
		goto _test_eof168;
case 168:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr687;
		case 32: goto tr687;
		case 40: goto tr688;
		case 41: goto tr689;
		case 65: goto st227;
		case 70: goto st230;
		case 80: goto st234;
		case 97: goto st227;
		case 102: goto st230;
		case 112: goto st234;
		case 2058: goto tr690;
		case 2107: goto tr691;
		case 2314: goto tr66;
		case 2363: goto tr66;
		case 2570: goto tr692;
		case 2619: goto tr693;
	}
	goto tr686;
tr695:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st169;
tr696:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st169;
tr697:
	{
		s->line_counter++;
	}
	goto st169;
tr687:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st169;
tr688:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st169;
tr689:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st169;
tr690:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st169;
st169:
	if ( ++p == pe )
		goto _test_eof169;
case 169:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st169;
		case 32: goto st169;
		case 40: goto tr695;
		case 41: goto tr696;
		case 58: goto tr69;
		case 65: goto tr101;
		case 67: goto tr102;
		case 68: goto tr103;
		case 69: goto tr104;
		case 72: goto tr105;
		case 73: goto tr106;
		case 75: goto tr107;
		case 76: goto tr108;
		case 77: goto tr109;
		case 78: goto tr110;
		case 80: goto tr111;
		case 82: goto tr112;
		case 83: goto tr113;
		case 84: goto tr114;
		case 85: goto tr115;
		case 92: goto st9;
		case 97: goto tr101;
		case 99: goto tr102;
		case 100: goto tr103;
		case 101: goto tr104;
		case 104: goto tr105;
		case 105: goto tr106;
		case 107: goto tr107;
		case 108: goto tr108;
		case 109: goto tr109;
		case 110: goto tr110;
		case 112: goto tr111;
		case 114: goto tr112;
		case 115: goto tr113;
		case 116: goto tr114;
		case 117: goto tr115;
		case 2058: goto tr697;
		case 2107: goto st241;
		case 2314: goto tr69;
		case 2363: goto tr69;
		case 2570: goto tr699;
		case 2619: goto tr700;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr69;
		} else if ( _widec >= 48 )
			goto tr100;
	} else
		goto tr69;
	goto tr563;
tr101:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 170; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 170; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 170; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 170; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 170; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 170; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 170; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 170; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 170; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 170; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 170; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 170; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 170; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 170; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 170; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 170; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 170; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 170; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 170; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 170; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 170; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 170; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 170; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 170; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 170; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 170; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 170; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 170; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 170; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st170;
st170:
	if ( ++p == pe )
		goto _test_eof170;
case 170:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr702;
		case 32: goto tr702;
		case 40: goto tr703;
		case 41: goto tr704;
		case 65: goto st227;
		case 70: goto st230;
		case 80: goto st234;
		case 97: goto st227;
		case 102: goto st230;
		case 112: goto st234;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr705;
		case 2107: goto tr706;
		case 2314: goto tr707;
		case 2363: goto tr708;
		case 2570: goto tr709;
		case 2619: goto tr710;
	}
	goto tr701;
tr712:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st171;
tr713:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st171;
tr702:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st171;
tr703:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st171;
tr704:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st171;
st171:
	if ( ++p == pe )
		goto _test_eof171;
case 171:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st171;
		case 32: goto st171;
		case 40: goto tr712;
		case 41: goto tr713;
		case 92: goto st9;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr95;
		case 2107: goto st12;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr714;
		case 2619: goto tr94;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr69;
	} else
		goto tr69;
	goto tr79;
tr92:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1117; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1117; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1117; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1117; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1117; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1117; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1117; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1117; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1117; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1117; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1117; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1117; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1117; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1117; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1117; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1117; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1117; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1117; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1117; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1117; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1117; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1117; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1117; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1117; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1117; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1117; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1117; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1117; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1117; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1117; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1117; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1117;
tr118:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1117; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1117; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1117; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1117; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1117; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1117; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1117; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1117; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1117; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1117; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1117; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1117; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1117; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1117; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1117; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1117; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1117; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1117; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1117; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1117; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1117; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1117; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1117; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1117; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1117; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1117; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1117; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1117; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1117; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1117;
tr707:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1117; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1117; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1117; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1117; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1117; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1117; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1117; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1117; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1117; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1117; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1117; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1117; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1117; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1117; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1117; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1117; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1117; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1117; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1117; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1117; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1117; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1117; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1117; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1117; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1117; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1117; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1117; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1117; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1117; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1117; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1117; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1117;
st1117:
	if ( ++p == pe )
		goto _test_eof1117;
case 1117:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3380;
		case 32: goto tr3380;
		case 36: goto st150;
		case 40: goto tr3381;
		case 41: goto tr3382;
		case 42: goto tr3316;
		case 92: goto tr3316;
		case 95: goto tr3316;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr3383;
		case 1083: goto tr3384;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3316;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3316;
	} else
		goto tr3316;
	goto tr739;
tr716:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st172;
tr717:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st172;
tr740:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	goto st172;
tr741:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st172;
tr742:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st172;
tr3380:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st172;
tr3381:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st172;
tr3382:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st172;
st172:
	if ( ++p == pe )
		goto _test_eof172;
case 172:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st172;
		case 32: goto st172;
		case 40: goto tr716;
		case 41: goto tr717;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr718;
		case 1083: goto st173;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr744:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	goto st173;
tr3384:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st173;
st173:
	if ( ++p == pe )
		goto _test_eof173;
case 173:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr83;
		case 1034: goto tr718;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st173;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr85;
tr708:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 174; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 174; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 174; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 174; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 174; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 174; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 174; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 174; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 174; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 174; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 174; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 174; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 174; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 174; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 174; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 174; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 174; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 174; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 174; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 174; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 174; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 174; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 174; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 174; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 174; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 174; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 174; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 174; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 174; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st174;
tr93:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 174; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 174; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 174; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 174; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 174; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 174; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 174; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 174; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 174; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 174; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 174; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 174; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 174; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 174; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 174; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 174; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 174; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 174; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 174; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 174; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 174; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 174; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 174; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 174; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 174; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 174; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 174; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 174; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 174; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st174;
st174:
	if ( ++p == pe )
		goto _test_eof174;
case 174:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st175;
		case 32: goto st175;
		case 40: goto tr721;
		case 41: goto tr722;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto st8;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto st8;
	} else
		goto st8;
	goto tr79;
tr721:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st175;
tr722:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st175;
st175:
	if ( ++p == pe )
		goto _test_eof175;
case 175:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st175;
		case 32: goto st175;
		case 40: goto tr721;
		case 41: goto tr722;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto st8;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto st8;
	} else
		goto st8;
	goto tr85;
tr709:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1118; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1118; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1118; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1118; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1118; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1118; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1118; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1118; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1118; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1118; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1118; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1118; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1118; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1118; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1118; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1118; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1118; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1118; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1118; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1118; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1118; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1118; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1118; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1118; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1118; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1118; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1118; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1118; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1118; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1118; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1118; goto _out;}
		}
	}
	goto st1118;
tr714:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1118; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1118; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1118; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1118; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1118; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1118; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1118; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1118; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1118; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1118; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1118; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1118; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1118; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1118; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1118; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1118; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1118; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1118; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1118; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1118; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1118; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1118; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1118; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1118; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1118; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1118; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1118; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1118; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1118; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1118; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1118; goto _out;}
		}
	}
	goto st1118;
st1118:
	if ( ++p == pe )
		goto _test_eof1118;
case 1118:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr3385;
		case 32: goto tr3385;
		case 36: goto tr3320;
		case 40: goto tr3386;
		case 41: goto tr3387;
		case 42: goto tr3323;
		case 58: goto tr69;
		case 92: goto tr3324;
		case 95: goto tr3323;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr3383;
		case 2107: goto tr3388;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr3383;
		case 2619: goto tr3389;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr69;
		} else if ( _widec > 44 ) {
			if ( 45 <= _widec && _widec <= 57 )
				goto tr3323;
		} else
			goto tr69;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr3323;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr69;
			} else if ( _widec >= 97 )
				goto tr3323;
		} else
			goto tr69;
	} else
		goto tr69;
	goto tr739;
tr724:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st176;
tr725:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st176;
tr699:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 176; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 176; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 176; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 176; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 176; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 176; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 176; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 176; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 176; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 176; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 176; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 176; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 176; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 176; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 176; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 176; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 176; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 176; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 176; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 176; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 176; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 176; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 176; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 176; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 176; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 176; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 176; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 176; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 176; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st176;
tr692:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 176; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 176; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 176; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 176; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 176; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 176; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 176; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 176; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 176; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 176; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 176; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 176; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 176; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 176; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 176; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 176; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 176; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 176; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 176; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 176; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 176; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 176; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 176; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 176; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 176; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 176; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 176; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 176; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 176; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st176;
tr3385:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st176;
tr3386:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st176;
tr3387:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st176;
st176:
	if ( ++p == pe )
		goto _test_eof176;
case 176:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st176;
		case 32: goto st176;
		case 40: goto tr724;
		case 41: goto tr725;
		case 58: goto tr69;
		case 65: goto tr101;
		case 67: goto tr102;
		case 68: goto tr103;
		case 69: goto tr104;
		case 72: goto tr105;
		case 73: goto tr106;
		case 75: goto tr107;
		case 76: goto tr108;
		case 77: goto tr109;
		case 78: goto tr110;
		case 80: goto tr111;
		case 82: goto tr112;
		case 83: goto tr113;
		case 84: goto tr114;
		case 85: goto tr115;
		case 92: goto st9;
		case 97: goto tr101;
		case 99: goto tr102;
		case 100: goto tr103;
		case 101: goto tr104;
		case 104: goto tr105;
		case 105: goto tr106;
		case 107: goto tr107;
		case 108: goto tr108;
		case 109: goto tr109;
		case 110: goto tr110;
		case 112: goto tr111;
		case 114: goto tr112;
		case 115: goto tr113;
		case 116: goto tr114;
		case 117: goto tr115;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr718;
		case 2107: goto st191;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr718;
		case 2619: goto tr727;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr69;
		} else if ( _widec >= 48 )
			goto tr100;
	} else
		goto tr69;
	goto tr97;
tr102:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 177; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 177; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 177; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 177; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 177; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 177; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 177; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 177; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 177; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 177; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 177; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 177; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 177; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 177; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 177; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 177; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 177; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 177; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 177; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 177; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 177; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 177; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 177; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 177; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 177; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 177; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 177; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 177; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 177; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st177;
st177:
	if ( ++p == pe )
		goto _test_eof177;
case 177:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 65: goto st17;
		case 68: goto st20;
		case 69: goto st27;
		case 78: goto st30;
		case 97: goto st17;
		case 100: goto st20;
		case 101: goto st27;
		case 110: goto st30;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr103:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 178; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 178; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 178; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 178; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 178; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 178; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 178; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 178; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 178; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 178; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 178; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 178; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 178; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 178; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 178; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 178; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 178; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 178; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 178; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 178; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 178; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 178; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 178; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 178; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 178; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 178; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 178; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 178; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 178; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st178;
st178:
	if ( ++p == pe )
		goto _test_eof178;
case 178:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 72: goto st35;
		case 78: goto st39;
		case 83: goto st47;
		case 104: goto st35;
		case 110: goto st39;
		case 115: goto st47;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr104:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 179; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 179; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 179; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 179; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 179; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 179; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 179; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 179; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 179; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 179; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 179; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 179; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 179; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 179; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 179; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 179; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 179; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 179; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 179; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 179; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 179; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 179; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 179; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 179; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 179; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 179; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 179; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 179; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 179; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st179;
st179:
	if ( ++p == pe )
		goto _test_eof179;
case 179:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 85: goto st49;
		case 117: goto st49;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr105:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 180; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 180; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 180; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 180; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 180; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 180; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 180; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 180; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 180; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 180; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 180; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 180; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 180; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 180; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 180; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 180; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 180; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 180; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 180; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 180; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 180; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 180; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 180; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 180; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 180; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 180; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 180; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 180; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 180; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st180;
st180:
	if ( ++p == pe )
		goto _test_eof180;
case 180:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 73: goto st56;
		case 105: goto st56;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr106:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 181; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 181; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 181; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 181; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 181; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 181; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 181; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 181; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 181; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 181; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 181; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 181; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 181; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 181; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 181; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 181; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 181; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 181; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 181; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 181; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 181; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 181; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 181; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 181; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 181; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 181; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 181; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 181; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 181; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st181;
st181:
	if ( ++p == pe )
		goto _test_eof181;
case 181:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 78: goto st142;
		case 80: goto st64;
		case 110: goto st142;
		case 112: goto st64;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr107:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 182; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 182; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 182; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 182; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 182; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 182; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 182; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 182; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 182; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 182; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 182; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 182; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 182; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 182; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 182; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 182; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 182; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 182; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 182; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 182; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 182; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 182; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 182; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 182; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 182; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 182; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 182; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 182; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 182; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st182;
st182:
	if ( ++p == pe )
		goto _test_eof182;
case 182:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 69: goto st72;
		case 88: goto st74;
		case 101: goto st72;
		case 120: goto st74;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr108:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 183; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 183; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 183; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 183; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 183; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 183; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 183; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 183; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 183; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 183; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 183; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 183; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 183; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 183; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 183; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 183; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 183; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 183; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 183; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 183; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 183; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 183; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 183; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 183; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 183; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 183; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 183; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 183; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 183; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st183;
st183:
	if ( ++p == pe )
		goto _test_eof183;
case 183:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 51: goto st76;
		case 54: goto st78;
		case 79: goto st80;
		case 80: goto st82;
		case 111: goto st80;
		case 112: goto st82;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr109:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 184; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 184; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 184; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 184; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 184; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 184; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 184; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 184; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 184; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 184; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 184; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 184; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 184; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 184; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 184; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 184; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 184; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 184; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 184; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 184; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 184; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 184; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 184; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 184; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 184; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 184; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 184; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 184; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 184; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st184;
st184:
	if ( ++p == pe )
		goto _test_eof184;
case 184:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 73: goto st84;
		case 88: goto st88;
		case 105: goto st84;
		case 120: goto st88;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr110:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 185; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 185; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 185; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 185; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 185; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 185; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 185; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 185; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 185; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 185; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 185; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 185; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 185; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 185; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 185; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 185; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 185; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 185; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 185; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 185; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 185; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 185; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 185; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 185; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 185; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 185; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 185; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 185; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 185; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st185;
st185:
	if ( ++p == pe )
		goto _test_eof185;
case 185:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 65: goto st90;
		case 73: goto st94;
		case 83: goto st96;
		case 97: goto st90;
		case 105: goto st94;
		case 115: goto st96;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr111:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 186; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 186; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 186; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 186; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 186; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 186; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 186; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 186; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 186; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 186; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 186; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 186; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 186; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 186; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 186; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 186; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 186; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 186; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 186; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 186; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 186; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 186; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 186; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 186; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 186; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 186; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 186; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 186; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 186; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st186;
st186:
	if ( ++p == pe )
		goto _test_eof186;
case 186:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 84: goto st106;
		case 116: goto st106;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr112:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 187; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 187; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 187; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 187; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 187; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 187; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 187; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 187; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 187; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 187; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 187; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 187; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 187; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 187; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 187; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 187; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 187; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 187; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 187; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 187; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 187; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 187; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 187; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 187; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 187; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 187; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 187; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 187; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 187; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st187;
st187:
	if ( ++p == pe )
		goto _test_eof187;
case 187:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 80: goto st109;
		case 82: goto st110;
		case 84: goto st114;
		case 112: goto st109;
		case 114: goto st110;
		case 116: goto st114;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr113:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 188; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 188; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 188; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 188; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 188; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 188; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 188; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 188; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 188; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 188; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 188; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 188; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 188; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 188; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 188; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 188; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 188; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 188; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 188; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 188; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 188; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 188; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 188; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 188; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 188; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 188; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 188; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 188; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 188; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st188;
st188:
	if ( ++p == pe )
		goto _test_eof188;
case 188:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 79: goto st116;
		case 80: goto st118;
		case 82: goto st120;
		case 83: goto st122;
		case 111: goto st116;
		case 112: goto st118;
		case 114: goto st120;
		case 115: goto st122;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr114:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 189; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 189; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 189; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 189; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 189; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 189; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 189; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 189; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 189; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 189; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 189; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 189; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 189; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 189; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 189; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 189; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 189; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 189; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 189; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 189; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 189; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 189; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 189; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 189; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 189; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 189; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 189; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 189; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 189; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st189;
st189:
	if ( ++p == pe )
		goto _test_eof189;
case 189:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 76: goto st127;
		case 88: goto st130;
		case 89: goto st132;
		case 108: goto st127;
		case 120: goto st130;
		case 121: goto st132;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr115:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 190; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 190; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 190; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 190; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 190; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 190; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 190; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 190; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 190; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 190; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 190; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 190; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 190; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 190; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 190; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 190; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 190; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 190; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 190; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 190; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 190; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 190; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 190; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 190; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 190; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 190; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 190; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 190; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 190; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st190;
st190:
	if ( ++p == pe )
		goto _test_eof190;
case 190:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 82: goto st137;
		case 114: goto st137;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr701;
tr761:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st191;
tr3388:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st191;
st191:
	if ( ++p == pe )
		goto _test_eof191;
case 191:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr83;
		case 1034: goto tr728;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st191;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr79;
tr116:
	{
		s->line_counter++;
	}
	goto st1119;
tr728:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1119; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1119; goto _out;}
		}
	}
	goto st1119;
tr760:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1119; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1119; goto _out;}
		}
	}
	goto st1119;
tr3325:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1119;
st1119:
	if ( ++p == pe )
		goto _test_eof1119;
case 1119:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr3319;
		case 32: goto tr3319;
		case 36: goto tr3320;
		case 40: goto tr3321;
		case 41: goto tr3322;
		case 42: goto tr3323;
		case 58: goto tr69;
		case 65: goto tr3392;
		case 67: goto tr3393;
		case 68: goto tr3394;
		case 69: goto tr3395;
		case 72: goto tr3396;
		case 73: goto tr3397;
		case 75: goto tr3398;
		case 76: goto tr3399;
		case 77: goto tr3400;
		case 78: goto tr3401;
		case 80: goto tr3402;
		case 82: goto tr3403;
		case 83: goto tr3404;
		case 84: goto tr3405;
		case 85: goto tr3406;
		case 92: goto tr3324;
		case 95: goto tr3323;
		case 97: goto tr3392;
		case 99: goto tr3393;
		case 100: goto tr3394;
		case 101: goto tr3395;
		case 104: goto tr3396;
		case 105: goto tr3397;
		case 107: goto tr3398;
		case 108: goto tr3399;
		case 109: goto tr3400;
		case 110: goto tr3401;
		case 112: goto tr3402;
		case 114: goto tr3403;
		case 115: goto tr3404;
		case 116: goto tr3405;
		case 117: goto tr3406;
		case 1802: goto tr20;
		case 1851: goto st149;
		case 2058: goto tr3325;
		case 2107: goto tr3326;
		case 2314: goto tr118;
		case 2363: goto tr119;
		case 2570: goto tr3327;
		case 2619: goto tr3328;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr69;
		} else if ( _widec > 44 ) {
			if ( _widec > 47 ) {
				if ( 48 <= _widec && _widec <= 57 )
					goto tr3391;
			} else if ( _widec >= 45 )
				goto tr3323;
		} else
			goto tr69;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr3323;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr69;
			} else if ( _widec >= 98 )
				goto tr3323;
		} else
			goto tr69;
	} else
		goto tr69;
	goto tr3390;
tr3320:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 192; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 192; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 192; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 192; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 192; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 192; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 192; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 192; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 192; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 192; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 192; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 192; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 192; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 192; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 192; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 192; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 192; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 192; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 192; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 192; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 192; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 192; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 192; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 192; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 192; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 192; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 192; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 192; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 192; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st192;
st192:
	if ( ++p == pe )
		goto _test_eof192;
case 192:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr81;
		case 41: goto tr82;
		case 73: goto tr640;
		case 79: goto tr641;
		case 84: goto tr642;
		case 105: goto tr640;
		case 111: goto tr641;
		case 116: goto tr642;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	goto tr729;
tr641:
	{
		ERR(ZS_OK);
	}
	goto st193;
st193:
	if ( ++p == pe )
		goto _test_eof193;
case 193:
	switch( (*p) ) {
		case 82: goto st194;
		case 114: goto st194;
	}
	goto tr639;
st194:
	if ( ++p == pe )
		goto _test_eof194;
case 194:
	switch( (*p) ) {
		case 73: goto st195;
		case 105: goto st195;
	}
	goto tr639;
st195:
	if ( ++p == pe )
		goto _test_eof195;
case 195:
	switch( (*p) ) {
		case 71: goto st196;
		case 103: goto st196;
	}
	goto tr639;
st196:
	if ( ++p == pe )
		goto _test_eof196;
case 196:
	switch( (*p) ) {
		case 73: goto st197;
		case 105: goto st197;
	}
	goto tr639;
st197:
	if ( ++p == pe )
		goto _test_eof197;
case 197:
	switch( (*p) ) {
		case 78: goto st198;
		case 110: goto st198;
	}
	goto tr639;
st198:
	if ( ++p == pe )
		goto _test_eof198;
case 198:
	switch( (*p) ) {
		case 32: goto tr735;
		case 59: goto tr735;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr735;
	} else if ( (*p) >= 9 )
		goto tr735;
	goto tr639;
tr642:
	{
		ERR(ZS_OK);
	}
	goto st199;
st199:
	if ( ++p == pe )
		goto _test_eof199;
case 199:
	switch( (*p) ) {
		case 84: goto st200;
		case 116: goto st200;
	}
	goto tr639;
st200:
	if ( ++p == pe )
		goto _test_eof200;
case 200:
	switch( (*p) ) {
		case 76: goto st201;
		case 108: goto st201;
	}
	goto tr639;
st201:
	if ( ++p == pe )
		goto _test_eof201;
case 201:
	switch( (*p) ) {
		case 32: goto tr738;
		case 59: goto tr738;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr738;
	} else if ( (*p) >= 9 )
		goto tr738;
	goto tr639;
tr3323:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 202; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 202; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 202; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 202; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 202; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 202; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 202; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 202; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 202; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 202; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 202; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 202; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 202; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 202; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 202; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 202; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 202; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 202; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 202; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 202; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 202; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 202; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 202; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 202; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 202; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 202; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 202; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 202; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 202; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 202; goto st263;} }
	goto st202;
st202:
	if ( ++p == pe )
		goto _test_eof202;
case 202:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr739;
tr3391:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 203; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 203; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 203; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 203; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 203; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 203; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 203; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 203; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 203; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 203; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 203; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 203; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 203; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 203; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 203; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 203; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 203; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 203; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 203; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 203; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 203; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 203; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 203; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 203; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 203; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 203; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 203; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 203; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 203; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 203; goto st263;} }
	goto st203;
st203:
	if ( ++p == pe )
		goto _test_eof203;
case 203:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr746;
		case 32: goto tr746;
		case 40: goto tr747;
		case 41: goto tr748;
		case 68: goto tr29;
		case 72: goto tr30;
		case 77: goto tr31;
		case 83: goto st164;
		case 87: goto tr33;
		case 100: goto tr29;
		case 104: goto tr30;
		case 109: goto tr31;
		case 115: goto st164;
		case 119: goto tr33;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr749;
		case 1083: goto tr750;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr28;
	goto tr745;
tr752:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st204;
tr753:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st204;
tr746:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st204;
tr747:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st204;
tr748:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st204;
st204:
	if ( ++p == pe )
		goto _test_eof204;
case 204:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st204;
		case 32: goto st204;
		case 40: goto tr752;
		case 41: goto tr753;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr754;
		case 1083: goto st205;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr750:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st205;
st205:
	if ( ++p == pe )
		goto _test_eof205;
case 205:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr83;
		case 1034: goto tr754;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st205;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr128;
tr3392:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 206; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 206; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 206; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 206; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 206; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 206; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 206; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 206; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 206; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 206; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 206; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 206; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 206; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 206; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 206; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 206; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 206; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 206; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 206; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 206; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 206; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 206; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 206; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 206; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 206; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 206; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 206; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 206; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 206; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 206; goto st263;} }
	goto st206;
st206:
	if ( ++p == pe )
		goto _test_eof206;
case 206:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr757;
		case 32: goto tr757;
		case 40: goto tr758;
		case 41: goto tr759;
		case 65: goto st227;
		case 70: goto st230;
		case 80: goto st234;
		case 97: goto st227;
		case 102: goto st230;
		case 112: goto st234;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr760;
		case 2107: goto tr761;
		case 2314: goto tr707;
		case 2363: goto tr708;
		case 2570: goto tr762;
		case 2619: goto tr763;
	}
	goto tr756;
tr765:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st207;
tr766:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st207;
tr757:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st207;
tr758:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st207;
tr759:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st207;
st207:
	if ( ++p == pe )
		goto _test_eof207;
case 207:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st207;
		case 32: goto st207;
		case 40: goto tr765;
		case 41: goto tr766;
		case 58: goto tr69;
		case 65: goto tr101;
		case 67: goto tr102;
		case 68: goto tr103;
		case 69: goto tr104;
		case 72: goto tr105;
		case 73: goto tr106;
		case 75: goto tr107;
		case 76: goto tr108;
		case 77: goto tr109;
		case 78: goto tr110;
		case 80: goto tr111;
		case 82: goto tr112;
		case 83: goto tr113;
		case 84: goto tr114;
		case 85: goto tr115;
		case 92: goto st9;
		case 97: goto tr101;
		case 99: goto tr102;
		case 100: goto tr103;
		case 101: goto tr104;
		case 104: goto tr105;
		case 105: goto tr106;
		case 107: goto tr107;
		case 108: goto tr108;
		case 109: goto tr109;
		case 110: goto tr110;
		case 112: goto tr111;
		case 114: goto tr112;
		case 115: goto tr113;
		case 116: goto tr114;
		case 117: goto tr115;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr728;
		case 2107: goto st191;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr767;
		case 2619: goto tr727;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr69;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr69;
		} else if ( _widec >= 48 )
			goto tr100;
	} else
		goto tr69;
	goto tr97;
tr120:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1120; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1120; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1120; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1120; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1120; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1120; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1120; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1120; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1120; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1120; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1120; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1120; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1120; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1120; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1120; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1120; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1120; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1120; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1120; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1120; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1120; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1120; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1120; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1120; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1120; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1120; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1120; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1120; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1120; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st1120;
tr767:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1120; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1120; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1120; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1120; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1120; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1120; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1120; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1120; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1120; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1120; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1120; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1120; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1120; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1120; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1120; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1120; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1120; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1120; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1120; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1120; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1120; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1120; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1120; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1120; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1120; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1120; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1120; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1120; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1120; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1120; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1120; goto _out;}
		}
	}
	goto st1120;
tr762:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1120; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1120; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1120; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1120; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1120; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1120; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1120; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1120; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1120; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1120; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1120; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1120; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1120; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1120; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1120; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1120; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1120; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1120; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1120; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1120; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1120; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1120; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1120; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1120; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1120; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1120; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1120; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1120; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1120; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1120; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1120; goto _out;}
		}
	}
	goto st1120;
tr3327:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1120; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1120; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1120; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1120; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1120; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1120; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 1120; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1120; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1120; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1120; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1120; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1120; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1120; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1120; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1120; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1120; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1120; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1120; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1120; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 1120; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1120; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1120; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 1120; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1120; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1120; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1120; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1120; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1120; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1120; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st1120;
st1120:
	if ( ++p == pe )
		goto _test_eof1120;
case 1120:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr3385;
		case 32: goto tr3385;
		case 36: goto tr3320;
		case 40: goto tr3386;
		case 41: goto tr3387;
		case 42: goto tr3323;
		case 58: goto tr69;
		case 65: goto tr3392;
		case 67: goto tr3393;
		case 68: goto tr3394;
		case 69: goto tr3395;
		case 72: goto tr3396;
		case 73: goto tr3397;
		case 75: goto tr3398;
		case 76: goto tr3399;
		case 77: goto tr3400;
		case 78: goto tr3401;
		case 80: goto tr3402;
		case 82: goto tr3403;
		case 83: goto tr3404;
		case 84: goto tr3405;
		case 85: goto tr3406;
		case 92: goto tr3324;
		case 95: goto tr3323;
		case 97: goto tr3392;
		case 99: goto tr3393;
		case 100: goto tr3394;
		case 101: goto tr3395;
		case 104: goto tr3396;
		case 105: goto tr3397;
		case 107: goto tr3398;
		case 108: goto tr3399;
		case 109: goto tr3400;
		case 110: goto tr3401;
		case 112: goto tr3402;
		case 114: goto tr3403;
		case 115: goto tr3404;
		case 116: goto tr3405;
		case 117: goto tr3406;
		case 1802: goto tr83;
		case 1851: goto st8;
		case 2058: goto tr3407;
		case 2107: goto tr3388;
		case 2314: goto tr92;
		case 2363: goto tr93;
		case 2570: goto tr3407;
		case 2619: goto tr3389;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr69;
		} else if ( _widec > 44 ) {
			if ( _widec > 47 ) {
				if ( 48 <= _widec && _widec <= 57 )
					goto tr3391;
			} else if ( _widec >= 45 )
				goto tr3323;
		} else
			goto tr69;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr3323;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr69;
			} else if ( _widec >= 98 )
				goto tr3323;
		} else
			goto tr69;
	} else
		goto tr69;
	goto tr3390;
tr3393:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 208; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 208; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 208; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 208; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 208; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 208; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 208; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 208; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 208; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 208; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 208; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 208; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 208; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 208; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 208; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 208; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 208; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 208; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 208; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 208; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 208; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 208; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 208; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 208; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 208; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 208; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 208; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 208; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 208; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 208; goto st263;} }
	goto st208;
st208:
	if ( ++p == pe )
		goto _test_eof208;
case 208:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 65: goto st17;
		case 68: goto st20;
		case 69: goto st27;
		case 78: goto st30;
		case 97: goto st17;
		case 100: goto st20;
		case 101: goto st27;
		case 110: goto st30;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3394:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 209; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 209; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 209; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 209; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 209; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 209; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 209; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 209; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 209; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 209; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 209; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 209; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 209; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 209; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 209; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 209; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 209; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 209; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 209; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 209; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 209; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 209; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 209; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 209; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 209; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 209; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 209; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 209; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 209; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 209; goto st263;} }
	goto st209;
st209:
	if ( ++p == pe )
		goto _test_eof209;
case 209:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 72: goto st35;
		case 78: goto st39;
		case 83: goto st47;
		case 104: goto st35;
		case 110: goto st39;
		case 115: goto st47;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3395:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 210; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 210; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 210; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 210; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 210; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 210; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 210; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 210; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 210; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 210; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 210; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 210; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 210; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 210; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 210; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 210; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 210; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 210; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 210; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 210; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 210; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 210; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 210; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 210; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 210; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 210; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 210; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 210; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 210; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 210; goto st263;} }
	goto st210;
st210:
	if ( ++p == pe )
		goto _test_eof210;
case 210:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 85: goto st49;
		case 117: goto st49;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3396:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 211; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 211; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 211; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 211; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 211; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 211; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 211; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 211; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 211; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 211; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 211; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 211; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 211; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 211; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 211; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 211; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 211; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 211; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 211; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 211; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 211; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 211; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 211; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 211; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 211; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 211; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 211; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 211; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 211; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 211; goto st263;} }
	goto st211;
st211:
	if ( ++p == pe )
		goto _test_eof211;
case 211:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 73: goto st56;
		case 105: goto st56;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3397:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 212; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 212; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 212; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 212; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 212; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 212; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 212; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 212; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 212; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 212; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 212; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 212; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 212; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 212; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 212; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 212; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 212; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 212; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 212; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 212; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 212; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 212; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 212; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 212; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 212; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 212; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 212; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 212; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 212; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 212; goto st263;} }
	goto st212;
st212:
	if ( ++p == pe )
		goto _test_eof212;
case 212:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 78: goto st142;
		case 80: goto st64;
		case 110: goto st142;
		case 112: goto st64;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3398:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 213; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 213; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 213; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 213; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 213; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 213; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 213; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 213; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 213; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 213; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 213; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 213; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 213; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 213; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 213; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 213; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 213; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 213; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 213; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 213; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 213; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 213; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 213; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 213; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 213; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 213; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 213; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 213; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 213; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 213; goto st263;} }
	goto st213;
st213:
	if ( ++p == pe )
		goto _test_eof213;
case 213:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 69: goto st72;
		case 88: goto st74;
		case 101: goto st72;
		case 120: goto st74;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3399:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 214; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 214; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 214; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 214; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 214; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 214; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 214; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 214; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 214; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 214; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 214; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 214; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 214; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 214; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 214; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 214; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 214; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 214; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 214; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 214; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 214; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 214; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 214; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 214; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 214; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 214; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 214; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 214; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 214; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 214; goto st263;} }
	goto st214;
st214:
	if ( ++p == pe )
		goto _test_eof214;
case 214:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 51: goto st76;
		case 54: goto st78;
		case 79: goto st80;
		case 80: goto st82;
		case 111: goto st80;
		case 112: goto st82;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3400:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 215; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 215; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 215; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 215; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 215; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 215; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 215; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 215; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 215; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 215; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 215; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 215; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 215; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 215; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 215; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 215; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 215; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 215; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 215; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 215; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 215; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 215; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 215; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 215; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 215; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 215; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 215; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 215; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 215; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 215; goto st263;} }
	goto st215;
st215:
	if ( ++p == pe )
		goto _test_eof215;
case 215:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 73: goto st84;
		case 88: goto st88;
		case 105: goto st84;
		case 120: goto st88;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3401:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 216; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 216; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 216; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 216; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 216; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 216; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 216; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 216; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 216; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 216; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 216; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 216; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 216; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 216; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 216; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 216; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 216; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 216; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 216; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 216; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 216; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 216; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 216; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 216; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 216; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 216; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 216; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 216; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 216; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 216; goto st263;} }
	goto st216;
st216:
	if ( ++p == pe )
		goto _test_eof216;
case 216:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 65: goto st90;
		case 73: goto st94;
		case 83: goto st96;
		case 97: goto st90;
		case 105: goto st94;
		case 115: goto st96;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3402:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 217; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 217; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 217; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 217; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 217; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 217; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 217; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 217; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 217; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 217; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 217; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 217; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 217; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 217; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 217; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 217; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 217; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 217; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 217; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 217; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 217; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 217; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 217; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 217; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 217; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 217; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 217; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 217; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 217; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 217; goto st263;} }
	goto st217;
st217:
	if ( ++p == pe )
		goto _test_eof217;
case 217:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 84: goto st106;
		case 116: goto st106;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3403:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 218; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 218; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 218; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 218; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 218; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 218; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 218; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 218; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 218; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 218; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 218; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 218; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 218; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 218; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 218; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 218; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 218; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 218; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 218; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 218; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 218; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 218; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 218; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 218; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 218; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 218; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 218; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 218; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 218; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 218; goto st263;} }
	goto st218;
st218:
	if ( ++p == pe )
		goto _test_eof218;
case 218:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 80: goto st109;
		case 82: goto st110;
		case 84: goto st114;
		case 112: goto st109;
		case 114: goto st110;
		case 116: goto st114;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3404:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 219; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 219; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 219; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 219; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 219; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 219; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 219; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 219; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 219; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 219; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 219; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 219; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 219; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 219; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 219; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 219; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 219; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 219; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 219; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 219; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 219; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 219; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 219; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 219; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 219; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 219; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 219; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 219; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 219; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 219; goto st263;} }
	goto st219;
st219:
	if ( ++p == pe )
		goto _test_eof219;
case 219:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 79: goto st116;
		case 80: goto st118;
		case 82: goto st120;
		case 83: goto st122;
		case 111: goto st116;
		case 112: goto st118;
		case 114: goto st120;
		case 115: goto st122;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3405:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 220; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 220; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 220; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 220; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 220; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 220; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 220; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 220; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 220; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 220; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 220; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 220; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 220; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 220; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 220; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 220; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 220; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 220; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 220; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 220; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 220; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 220; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 220; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 220; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 220; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 220; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 220; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 220; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 220; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 220; goto st263;} }
	goto st220;
st220:
	if ( ++p == pe )
		goto _test_eof220;
case 220:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 76: goto st127;
		case 88: goto st130;
		case 89: goto st132;
		case 108: goto st127;
		case 120: goto st130;
		case 121: goto st132;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3406:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 221; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 221; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 221; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 221; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 221; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 221; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 221; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 221; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 221; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 221; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 221; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 221; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 221; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 221; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 221; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 221; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 221; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 221; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 221; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 221; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 221; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 221; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 221; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 221; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 221; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 221; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 221; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 221; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 221; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 221; goto st263;} }
	goto st221;
st221:
	if ( ++p == pe )
		goto _test_eof221;
case 221:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr740;
		case 32: goto tr740;
		case 40: goto tr741;
		case 41: goto tr742;
		case 82: goto st137;
		case 114: goto st137;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr743;
		case 1083: goto tr744;
	}
	goto tr756;
tr3324:
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 222; goto st263;} }
	goto st222;
st222:
	if ( ++p == pe )
		goto _test_eof222;
case 222:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr768;
		case 32: goto tr768;
		case 35: goto tr87;
		case 40: goto tr770;
		case 41: goto tr771;
		case 778: goto tr86;
		case 827: goto tr86;
		case 1034: goto tr772;
		case 1083: goto tr773;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr86;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr86;
	} else
		goto tr86;
	goto tr769;
tr768:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 223; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 223; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 223; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 223; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 223; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 223; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 223; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 223; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 223; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 223; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 223; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 223; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 223; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 223; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 223; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 223; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 223; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 223; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 223; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 223; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 223; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 223; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 223; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 223; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 223; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 223; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 223; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 223; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 223; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st223;
tr770:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 223; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 223; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 223; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 223; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 223; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 223; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 223; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 223; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 223; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 223; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 223; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 223; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 223; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 223; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 223; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 223; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 223; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 223; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 223; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 223; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 223; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 223; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 223; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 223; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 223; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 223; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 223; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 223; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 223; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st223;
tr771:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 223; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 223; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 223; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 223; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 223; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 223; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 223; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 223; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 223; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 223; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 223; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 223; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 223; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 223; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 223; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 223; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 223; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 223; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 223; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 223; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 223; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 223; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 223; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 223; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 223; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 223; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 223; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 223; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 223; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st223;
tr772:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 223; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 223; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 223; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 223; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 223; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 223; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 223; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 223; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 223; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 223; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 223; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 223; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 223; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 223; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 223; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 223; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 223; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 223; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 223; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 223; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 223; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 223; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 223; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 223; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 223; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 223; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 223; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 223; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 223; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st223;
st223:
	if ( ++p == pe )
		goto _test_eof223;
case 223:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st172;
		case 32: goto st172;
		case 40: goto tr716;
		case 41: goto tr717;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 80: goto tr15;
		case 82: goto tr16;
		case 83: goto tr17;
		case 84: goto tr18;
		case 85: goto tr19;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 112: goto tr15;
		case 114: goto tr16;
		case 115: goto tr17;
		case 116: goto tr18;
		case 117: goto tr19;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr718;
		case 1083: goto st173;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr97;
tr773:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ p--; }
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 224; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 224; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 224; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 224; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 224; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 224; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 224; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 224; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 224; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 224; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 224; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 224; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 224; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 224; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 224; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 224; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 224; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 224; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 224; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 224; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 224; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 224; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 224; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 224; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 224; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 224; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 224; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 224; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 224; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st224;
st224:
	if ( ++p == pe )
		goto _test_eof224;
case 224:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st7;
		case 778: goto tr83;
		case 800: goto st7;
		case 808: goto tr81;
		case 809: goto tr82;
		case 827: goto st8;
		case 1033: goto st225;
		case 1034: goto tr718;
		case 1056: goto st225;
		case 1064: goto tr775;
		case 1065: goto tr776;
		case 1083: goto st173;
	}
	if ( 896 <= _widec && _widec <= 1151 )
		goto st160;
	goto tr79;
tr775:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st225;
tr776:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st225;
st225:
	if ( ++p == pe )
		goto _test_eof225;
case 225:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st7;
		case 778: goto tr83;
		case 800: goto st7;
		case 808: goto tr81;
		case 809: goto tr82;
		case 827: goto st8;
		case 1033: goto st225;
		case 1034: goto tr718;
		case 1056: goto st225;
		case 1064: goto tr775;
		case 1065: goto tr776;
		case 1083: goto st173;
	}
	if ( 896 <= _widec && _widec <= 1151 )
		goto st160;
	goto tr85;
tr778:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st226;
tr779:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st226;
tr727:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 226; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 226; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 226; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 226; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 226; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 226; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 226; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 226; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 226; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 226; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 226; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 226; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 226; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 226; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 226; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 226; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 226; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 226; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 226; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 226; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 226; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 226; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 226; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 226; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 226; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 226; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 226; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 226; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 226; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st226;
tr763:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 226; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 226; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 226; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 226; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 226; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 226; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 226; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 226; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 226; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 226; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 226; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 226; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 226; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 226; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 226; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 226; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 226; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 226; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 226; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 226; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 226; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 226; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 226; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 226; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 226; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 226; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 226; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 226; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 226; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st226;
tr3389:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 226; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 226; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 226; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 226; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 226; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 226; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 226; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 226; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 226; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 226; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 226; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 226; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 226; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 226; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 226; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 226; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 226; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 226; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 226; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 226; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 226; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 226; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 226; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 226; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 226; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 226; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 226; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 226; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 226; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st226;
st226:
	if ( ++p == pe )
		goto _test_eof226;
case 226:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st175;
		case 778: goto tr83;
		case 800: goto st175;
		case 808: goto tr721;
		case 809: goto tr722;
		case 1033: goto st226;
		case 1034: goto tr718;
		case 1056: goto st226;
		case 1064: goto tr778;
		case 1065: goto tr779;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st191;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr79;
st227:
	if ( ++p == pe )
		goto _test_eof227;
case 227:
	switch( (*p) ) {
		case 65: goto st228;
		case 97: goto st228;
	}
	goto tr36;
st228:
	if ( ++p == pe )
		goto _test_eof228;
case 228:
	switch( (*p) ) {
		case 65: goto st229;
		case 97: goto st229;
	}
	goto tr36;
st229:
	if ( ++p == pe )
		goto _test_eof229;
case 229:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr782;
		case 32: goto tr782;
		case 40: goto tr783;
		case 41: goto tr784;
		case 2058: goto tr785;
		case 2107: goto tr786;
		case 2314: goto tr787;
		case 2363: goto tr787;
		case 2570: goto tr788;
		case 2619: goto tr789;
	}
	goto tr57;
st230:
	if ( ++p == pe )
		goto _test_eof230;
case 230:
	switch( (*p) ) {
		case 83: goto st231;
		case 115: goto st231;
	}
	goto tr36;
st231:
	if ( ++p == pe )
		goto _test_eof231;
case 231:
	switch( (*p) ) {
		case 68: goto st232;
		case 100: goto st232;
	}
	goto tr36;
st232:
	if ( ++p == pe )
		goto _test_eof232;
case 232:
	switch( (*p) ) {
		case 66: goto st233;
		case 98: goto st233;
	}
	goto tr36;
st233:
	if ( ++p == pe )
		goto _test_eof233;
case 233:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr793;
		case 32: goto tr793;
		case 40: goto tr794;
		case 41: goto tr795;
		case 2058: goto tr796;
		case 2107: goto tr797;
		case 2314: goto tr798;
		case 2363: goto tr798;
		case 2570: goto tr799;
		case 2619: goto tr800;
	}
	goto tr57;
st234:
	if ( ++p == pe )
		goto _test_eof234;
case 234:
	switch( (*p) ) {
		case 76: goto st235;
		case 108: goto st235;
	}
	goto tr36;
st235:
	if ( ++p == pe )
		goto _test_eof235;
case 235:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr802;
		case 32: goto tr802;
		case 40: goto tr803;
		case 41: goto tr804;
		case 2058: goto tr805;
		case 2107: goto tr806;
		case 2314: goto tr807;
		case 2363: goto tr807;
		case 2570: goto tr808;
		case 2619: goto tr809;
	}
	goto tr57;
tr3326:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st236;
st236:
	if ( ++p == pe )
		goto _test_eof236;
case 236:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr20;
		case 1034: goto tr116;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st236;
	} else if ( _widec >= 640 )
		goto st149;
	goto tr79;
tr119:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 237; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 237; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 237; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 237; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 237; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 237; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 237; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 237; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 237; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 237; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 237; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 237; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 237; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 237; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 237; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 237; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 237; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 237; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 237; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 237; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 237; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 237; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 237; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 237; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 237; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 237; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 237; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 237; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 237; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st237;
st237:
	if ( ++p == pe )
		goto _test_eof237;
case 237:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st238;
		case 32: goto st238;
		case 40: goto tr811;
		case 41: goto tr812;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto st149;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto st149;
	} else
		goto st149;
	goto tr79;
tr811:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st238;
tr812:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st238;
st238:
	if ( ++p == pe )
		goto _test_eof238;
case 238:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st238;
		case 32: goto st238;
		case 40: goto tr811;
		case 41: goto tr812;
		case 778: goto tr83;
		case 827: goto st8;
		case 1034: goto tr83;
		case 1083: goto st8;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto st149;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto st149;
	} else
		goto st149;
	goto tr85;
tr814:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st239;
tr815:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st239;
tr121:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 239; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 239; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 239; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 239; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 239; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 239; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 239; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 239; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 239; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 239; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 239; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 239; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 239; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 239; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 239; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 239; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 239; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 239; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 239; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 239; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 239; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 239; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 239; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 239; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 239; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 239; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 239; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 239; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 239; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st239;
tr3328:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 239; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 239; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 239; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 239; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 239; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 239; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 239; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 239; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 239; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 239; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 239; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 239; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 239; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 239; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 239; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 239; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 239; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 239; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 239; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 239; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 239; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 239; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 239; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 239; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 239; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 239; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 239; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 239; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 239; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st239;
st239:
	if ( ++p == pe )
		goto _test_eof239;
case 239:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st238;
		case 778: goto tr83;
		case 800: goto st238;
		case 808: goto tr811;
		case 809: goto tr812;
		case 827: goto st8;
		case 1033: goto st239;
		case 1034: goto tr718;
		case 1056: goto st239;
		case 1064: goto tr814;
		case 1065: goto tr815;
		case 1083: goto st191;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st236;
	} else if ( _widec >= 640 )
		goto st149;
	goto tr79;
tr817:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st240;
tr818:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st240;
tr710:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 240; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 240; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 240; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 240; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 240; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 240; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 240; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 240; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 240; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 240; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 240; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 240; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 240; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 240; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 240; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 240; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 240; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 240; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 240; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 240; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 240; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 240; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 240; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 240; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 240; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 240; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 240; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 240; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 240; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st240;
tr94:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 240; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 240; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 240; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 240; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 240; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 240; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 240; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 240; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 240; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 240; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 240; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 240; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 240; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 240; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 240; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 240; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 240; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 240; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 240; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 240; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 240; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 240; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 240; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 240; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 240; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 240; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 240; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 240; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 240; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st240;
st240:
	if ( ++p == pe )
		goto _test_eof240;
case 240:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st175;
		case 778: goto tr83;
		case 800: goto st175;
		case 808: goto tr721;
		case 809: goto tr722;
		case 1033: goto st240;
		case 1034: goto tr83;
		case 1056: goto st240;
		case 1064: goto tr817;
		case 1065: goto tr818;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st12;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr79;
tr691:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st241;
st241:
	if ( ++p == pe )
		goto _test_eof241;
case 241:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr697;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st241;
	goto tr71;
tr820:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st242;
tr821:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st242;
tr700:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 242; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 242; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 242; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 242; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 242; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 242; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 242; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 242; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 242; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 242; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 242; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 242; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 242; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 242; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 242; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 242; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 242; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 242; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 242; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 242; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 242; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 242; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 242; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 242; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 242; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 242; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 242; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 242; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 242; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st242;
tr693:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 242; goto st616;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 242; goto st618;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 242; goto st620;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 242; goto st652;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 242; goto st657;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 242; goto st662;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
			{stack[top++] = 242; goto st667;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 242; goto st671;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 242; goto st673;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 242; goto st728;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 242; goto st739;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 242; goto st756;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 242; goto st767;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 242; goto st778;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 242; goto st791;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 242; goto st801;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 242; goto st840;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 242; goto st994;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 242; goto st997;}
		case KNOT_RRTYPE_DHCID:
			{stack[top++] = 242; goto st1008;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 242; goto st1010;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 242; goto st1039;}
		case KNOT_RRTYPE_TLSA:
			{stack[top++] = 242; goto st1052;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 242; goto st1070;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 242; goto st1065;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 242; goto st1083;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 242; goto st1089;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 242; goto st1095;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 242; goto st1103;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st261;}
		}
	}
	goto st242;
st242:
	if ( ++p == pe )
		goto _test_eof242;
case 242:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(640 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 777: goto st7;
		case 778: goto tr83;
		case 800: goto st7;
		case 808: goto tr81;
		case 809: goto tr82;
		case 827: goto st8;
		case 1033: goto st242;
		case 1034: goto tr718;
		case 1056: goto st242;
		case 1064: goto tr820;
		case 1065: goto tr821;
		case 1083: goto st191;
	}
	if ( 896 <= _widec && _widec <= 1151 )
		goto st241;
	goto tr79;
tr3334:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 243; goto st263;} }
	goto st243;
tr3353:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 243; goto st263;} }
	goto st243;
st243:
	if ( ++p == pe )
		goto _test_eof243;
case 243:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 65: goto st17;
		case 68: goto st20;
		case 69: goto st27;
		case 78: goto st30;
		case 97: goto st17;
		case 100: goto st20;
		case 101: goto st27;
		case 110: goto st30;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3335:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 244; goto st263;} }
	goto st244;
tr3354:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 244; goto st263;} }
	goto st244;
st244:
	if ( ++p == pe )
		goto _test_eof244;
case 244:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 72: goto st35;
		case 78: goto st39;
		case 83: goto st47;
		case 104: goto st35;
		case 110: goto st39;
		case 115: goto st47;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3336:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 245; goto st263;} }
	goto st245;
tr3355:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 245; goto st263;} }
	goto st245;
st245:
	if ( ++p == pe )
		goto _test_eof245;
case 245:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 85: goto st49;
		case 117: goto st49;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3337:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 246; goto st263;} }
	goto st246;
tr3356:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 246; goto st263;} }
	goto st246;
st246:
	if ( ++p == pe )
		goto _test_eof246;
case 246:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 73: goto st56;
		case 105: goto st56;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3357:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 247; goto st263;} }
	goto st247;
st247:
	if ( ++p == pe )
		goto _test_eof247;
case 247:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 78: goto st142;
		case 80: goto st64;
		case 110: goto st142;
		case 112: goto st64;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3339:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 248; goto st263;} }
	goto st248;
tr3358:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 248; goto st263;} }
	goto st248;
st248:
	if ( ++p == pe )
		goto _test_eof248;
case 248:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 69: goto st72;
		case 88: goto st74;
		case 101: goto st72;
		case 120: goto st74;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3340:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 249; goto st263;} }
	goto st249;
tr3359:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 249; goto st263;} }
	goto st249;
st249:
	if ( ++p == pe )
		goto _test_eof249;
case 249:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 51: goto st76;
		case 54: goto st78;
		case 79: goto st80;
		case 80: goto st82;
		case 111: goto st80;
		case 112: goto st82;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3341:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 250; goto st263;} }
	goto st250;
tr3360:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 250; goto st263;} }
	goto st250;
st250:
	if ( ++p == pe )
		goto _test_eof250;
case 250:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 73: goto st84;
		case 88: goto st88;
		case 105: goto st84;
		case 120: goto st88;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3342:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 251; goto st263;} }
	goto st251;
tr3361:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 251; goto st263;} }
	goto st251;
st251:
	if ( ++p == pe )
		goto _test_eof251;
case 251:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 65: goto st90;
		case 73: goto st94;
		case 83: goto st96;
		case 97: goto st90;
		case 105: goto st94;
		case 115: goto st96;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3343:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 252; goto st263;} }
	goto st252;
tr3362:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 252; goto st263;} }
	goto st252;
st252:
	if ( ++p == pe )
		goto _test_eof252;
case 252:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 84: goto st106;
		case 116: goto st106;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3344:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 253; goto st263;} }
	goto st253;
tr3363:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 253; goto st263;} }
	goto st253;
st253:
	if ( ++p == pe )
		goto _test_eof253;
case 253:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 80: goto st109;
		case 82: goto st110;
		case 84: goto st114;
		case 112: goto st109;
		case 114: goto st110;
		case 116: goto st114;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3345:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 254; goto st263;} }
	goto st254;
tr3364:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 254; goto st263;} }
	goto st254;
st254:
	if ( ++p == pe )
		goto _test_eof254;
case 254:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 79: goto st116;
		case 80: goto st118;
		case 82: goto st120;
		case 83: goto st122;
		case 111: goto st116;
		case 112: goto st118;
		case 114: goto st120;
		case 115: goto st122;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3346:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 255; goto st263;} }
	goto st255;
tr3365:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 255; goto st263;} }
	goto st255;
st255:
	if ( ++p == pe )
		goto _test_eof255;
case 255:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 76: goto st127;
		case 88: goto st130;
		case 89: goto st132;
		case 108: goto st127;
		case 120: goto st130;
		case 121: goto st132;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3347:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 256; goto st263;} }
	goto st256;
tr3366:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 256; goto st263;} }
	goto st256;
st256:
	if ( ++p == pe )
		goto _test_eof256;
case 256:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 82: goto st137;
		case 114: goto st137;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr3318:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st257;
tr3376:
	cs = 257;
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto _again;
st257:
	if ( ++p == pe )
		goto _test_eof257;
case 257:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr20;
		case 1034: goto tr22;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st257;
	} else if ( _widec >= 640 )
		goto st149;
	goto tr85;
tr3349:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st261;}
		}
	}
	goto st258;
st258:
	if ( ++p == pe )
		goto _test_eof258;
case 258:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr20;
		case 1034: goto tr586;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st258;
	} else if ( _widec >= 640 )
		goto st149;
	goto tr128;
tr3338:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 259; goto st263;} }
	goto st259;
st259:
	if ( ++p == pe )
		goto _test_eof259;
case 259:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr651;
		case 32: goto tr651;
		case 40: goto tr652;
		case 41: goto tr653;
		case 78: goto st61;
		case 80: goto st64;
		case 110: goto st61;
		case 112: goto st64;
		case 1034: goto tr654;
		case 1083: goto tr655;
	}
	goto tr822;
tr127:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st260;
st260:
	if ( ++p == pe )
		goto _test_eof260;
case 260:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr83;
		case 1034: goto tr132;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st260;
	} else if ( _widec >= 640 )
		goto st8;
	goto tr128;
st261:
	if ( ++p == pe )
		goto _test_eof261;
case 261:
	if ( (*p) == 10 )
		goto tr824;
	goto tr823;
tr823:
	{
		s->buffer_length = 0;
	}
	{
		if ((*p) == '\r') {
			ERR(ZS_DOS_NEWLINE);
		}

		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st262;
tr825:
	{
		if ((*p) == '\r') {
			ERR(ZS_DOS_NEWLINE);
		}

		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st262;
st262:
	if ( ++p == pe )
		goto _test_eof262;
case 262:
	if ( (*p) == 10 )
		goto tr826;
	goto tr825;
tr824:
	cs = 1121;
	{
		s->buffer_length = 0;
	}
	{
		// Terminate the error context string.
		s->buffer[s->buffer_length++] = 0;

		// Error counter incrementation.
		s->error.counter++;

		// Initialize the fcall stack.
		top = 0;

		// Reset the multiline context.
		s->multiline = false;

		s->state = ZS_STATE_ERROR;

		// Execute the error callback.
		if (s->process.automatic) {
			if (s->process.error != NULL) {
				s->process.error(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; goto _out;}
				}
			}

			// Stop the scanner if fatal.
			if (s->error.fatal) {
				s->state = ZS_STATE_STOP;
				{p++; goto _out;}
			}
		} else {
			// Return if external processing.
			escape = true;
		}
	}
	{
		s->line_counter++;
	}
	{
		if (escape) {
			cs = 1111; {p++; goto _out;}
		} else {
			{goto st1111;}
		}
	}
	goto _again;
tr826:
	cs = 1121;
	{
		// Terminate the error context string.
		s->buffer[s->buffer_length++] = 0;

		// Error counter incrementation.
		s->error.counter++;

		// Initialize the fcall stack.
		top = 0;

		// Reset the multiline context.
		s->multiline = false;

		s->state = ZS_STATE_ERROR;

		// Execute the error callback.
		if (s->process.automatic) {
			if (s->process.error != NULL) {
				s->process.error(s);

				// Stop the scanner if required.
				if (s->state == ZS_STATE_STOP) {
					{p++; goto _out;}
				}
			}

			// Stop the scanner if fatal.
			if (s->error.fatal) {
				s->state = ZS_STATE_STOP;
				{p++; goto _out;}
			}
		} else {
			// Return if external processing.
			escape = true;
		}
	}
	{
		s->line_counter++;
	}
	{
		if (escape) {
			cs = 1111; {p++; goto _out;}
		} else {
			{goto st1111;}
		}
	}
	goto _again;
st1121:
	if ( ++p == pe )
		goto _test_eof1121;
case 1121:
	goto st0;
st263:
	if ( ++p == pe )
		goto _test_eof263;
case 263:
	switch( (*p) ) {
		case 42: goto tr828;
		case 46: goto tr829;
		case 64: goto st271;
		case 92: goto tr831;
		case 95: goto tr828;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr828;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr828;
	} else
		goto tr828;
	goto tr827;
tr828:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st264;
tr833:
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st264;
tr837:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st264;
tr844:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st264;
st264:
	if ( ++p == pe )
		goto _test_eof264;
case 264:
	switch( (*p) ) {
		case 32: goto tr832;
		case 42: goto tr833;
		case 46: goto tr834;
		case 59: goto tr832;
		case 92: goto st266;
		case 95: goto tr833;
	}
	if ( (*p) < 45 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr832;
		} else if ( (*p) >= 9 )
			goto tr832;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr833;
		} else if ( (*p) >= 65 )
			goto tr833;
	} else
		goto tr833;
	goto tr827;
tr832:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		// Check for (relative + origin) dname length overflow.
		if (s->dname_tmp_length + s->zone_origin_length <= MAX_DNAME_LENGTH) {
			memcpy(s->dname + s->dname_tmp_length,
			       s->zone_origin,
			       s->zone_origin_length);

			s->dname_tmp_length += s->zone_origin_length;
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1122;
tr836:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1122;
tr843:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		// Check for (relative + origin) dname length overflow.
		if (s->dname_tmp_length + s->zone_origin_length <= MAX_DNAME_LENGTH) {
			memcpy(s->dname + s->dname_tmp_length,
			       s->zone_origin,
			       s->zone_origin_length);

			s->dname_tmp_length += s->zone_origin_length;
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1122;
tr847:
	{
		// Copy already verified zone origin.
		memcpy(s->dname,
		       s->zone_origin,
		       s->zone_origin_length);

		s->dname_tmp_length = s->zone_origin_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1122;
st1122:
	if ( ++p == pe )
		goto _test_eof1122;
case 1122:
	goto st0;
tr834:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st265;
tr845:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st265;
st265:
	if ( ++p == pe )
		goto _test_eof265;
case 265:
	switch( (*p) ) {
		case 32: goto tr836;
		case 42: goto tr837;
		case 45: goto tr837;
		case 59: goto tr836;
		case 92: goto tr838;
		case 95: goto tr837;
	}
	if ( (*p) < 47 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr836;
		} else if ( (*p) >= 9 )
			goto tr836;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr837;
		} else if ( (*p) >= 65 )
			goto tr837;
	} else
		goto tr837;
	goto tr827;
tr831:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st266;
tr838:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st266;
tr846:
	{
		s->dname_tmp_length++;
	}
	goto st266;
st266:
	if ( ++p == pe )
		goto _test_eof266;
case 266:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr839;
	goto tr833;
tr839:
	{
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st267;
st267:
	if ( ++p == pe )
		goto _test_eof267;
case 267:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr841;
	goto tr840;
tr841:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st268;
st268:
	if ( ++p == pe )
		goto _test_eof268;
case 268:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr842;
	goto tr840;
tr842:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st269;
st269:
	if ( ++p == pe )
		goto _test_eof269;
case 269:
	switch( (*p) ) {
		case 32: goto tr843;
		case 42: goto tr844;
		case 46: goto tr845;
		case 59: goto tr843;
		case 92: goto tr846;
		case 95: goto tr844;
	}
	if ( (*p) < 45 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr843;
		} else if ( (*p) >= 9 )
			goto tr843;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr844;
		} else if ( (*p) >= 65 )
			goto tr844;
	} else
		goto tr844;
	goto tr840;
tr829:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st270;
st270:
	if ( ++p == pe )
		goto _test_eof270;
case 270:
	switch( (*p) ) {
		case 32: goto tr836;
		case 59: goto tr836;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr836;
	} else if ( (*p) >= 9 )
		goto tr836;
	goto tr827;
st271:
	if ( ++p == pe )
		goto _test_eof271;
case 271:
	switch( (*p) ) {
		case 32: goto tr847;
		case 59: goto tr847;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr847;
	} else if ( (*p) >= 9 )
		goto tr847;
	goto tr827;
st272:
	if ( ++p == pe )
		goto _test_eof272;
case 272:
	switch( (*p) ) {
		case 34: goto st278;
		case 92: goto st274;
	}
	if ( (*p) > 58 ) {
		if ( 60 <= (*p) && (*p) <= 126 )
			goto tr849;
	} else if ( (*p) >= 33 )
		goto tr849;
	goto tr848;
tr849:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st273;
tr859:
	{
		rdata_tail++;
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st273;
st273:
	if ( ++p == pe )
		goto _test_eof273;
case 273:
	switch( (*p) ) {
		case 32: goto tr852;
		case 33: goto tr849;
		case 59: goto tr852;
		case 92: goto st274;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr852;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr849;
		} else if ( (*p) >= 40 )
			goto tr853;
	} else
		goto tr849;
	goto tr848;
tr852:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1123;
tr858:
	{
		rdata_tail++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1123;
st1123:
	if ( ++p == pe )
		goto _test_eof1123;
case 1123:
	goto st0;
tr853:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1124;
tr860:
	{
		rdata_tail++;
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1124;
st1124:
	if ( ++p == pe )
		goto _test_eof1124;
case 1124:
	switch( (*p) ) {
		case 32: goto tr852;
		case 33: goto tr849;
		case 59: goto tr852;
		case 92: goto st274;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr852;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr849;
		} else if ( (*p) >= 40 )
			goto tr853;
	} else
		goto tr849;
	goto tr848;
tr861:
	{
		rdata_tail++;
	}
	goto st274;
st274:
	if ( ++p == pe )
		goto _test_eof274;
case 274:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr854;
	goto tr849;
tr854:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*rdata_tail = 0;
			s->item_length++;
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st275;
st275:
	if ( ++p == pe )
		goto _test_eof275;
case 275:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr856;
	goto tr855;
tr856:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st276;
st276:
	if ( ++p == pe )
		goto _test_eof276;
case 276:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr857;
	goto tr855;
tr857:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st277;
st277:
	if ( ++p == pe )
		goto _test_eof277;
case 277:
	switch( (*p) ) {
		case 32: goto tr858;
		case 33: goto tr859;
		case 59: goto tr858;
		case 92: goto tr861;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr858;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr859;
		} else if ( (*p) >= 40 )
			goto tr860;
	} else
		goto tr859;
	goto tr855;
tr862:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st278;
tr869:
	{
		rdata_tail++;
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st278;
st278:
	if ( ++p == pe )
		goto _test_eof278;
case 278:
	_widec = (*p);
	if ( 10 <= (*p) && (*p) <= 10 ) {
		_widec = (short)(128 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr862;
		case 34: goto st279;
		case 92: goto st280;
		case 522: goto tr862;
	}
	if ( 32 <= _widec && _widec <= 126 )
		goto tr862;
	goto tr848;
tr870:
	{
		rdata_tail++;
	}
	goto st279;
st279:
	if ( ++p == pe )
		goto _test_eof279;
case 279:
	switch( (*p) ) {
		case 32: goto tr852;
		case 59: goto tr852;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr852;
	} else if ( (*p) >= 9 )
		goto tr852;
	goto tr865;
tr871:
	{
		rdata_tail++;
	}
	goto st280;
st280:
	if ( ++p == pe )
		goto _test_eof280;
case 280:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr866;
	goto tr862;
tr866:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st261;}
				}
			}

			*rdata_tail = 0;
			s->item_length++;
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st281;
st281:
	if ( ++p == pe )
		goto _test_eof281;
case 281:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr867;
	goto tr855;
tr867:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st282;
st282:
	if ( ++p == pe )
		goto _test_eof282;
case 282:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr868;
	goto tr855;
tr868:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st283;
st283:
	if ( ++p == pe )
		goto _test_eof283;
case 283:
	_widec = (*p);
	if ( 10 <= (*p) && (*p) <= 10 ) {
		_widec = (short)(128 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr869;
		case 34: goto tr870;
		case 92: goto tr871;
		case 522: goto tr869;
	}
	if ( 32 <= _widec && _widec <= 126 )
		goto tr869;
	goto tr855;
st284:
	if ( ++p == pe )
		goto _test_eof284;
case 284:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st285;
		case 32: goto st285;
		case 40: goto tr874;
		case 41: goto tr875;
		case 1034: goto tr876;
		case 1083: goto st292;
	}
	goto tr872;
tr874:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st285;
tr875:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st285;
tr876:
	{
		s->line_counter++;
	}
	goto st285;
st285:
	if ( ++p == pe )
		goto _test_eof285;
case 285:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st285;
		case 32: goto st285;
		case 40: goto tr874;
		case 41: goto tr875;
		case 1034: goto tr876;
		case 1083: goto st292;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr879;
	goto tr878;
tr879:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st286;
tr884:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st286;
st286:
	if ( ++p == pe )
		goto _test_eof286;
case 286:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st287;
		case 32: goto st287;
		case 40: goto tr882;
		case 41: goto tr883;
		case 68: goto tr885;
		case 72: goto tr886;
		case 77: goto tr887;
		case 83: goto st289;
		case 87: goto tr889;
		case 100: goto tr885;
		case 104: goto tr886;
		case 109: goto tr887;
		case 115: goto st289;
		case 119: goto tr889;
		case 778: goto tr890;
		case 827: goto st288;
		case 1034: goto tr890;
		case 1083: goto st288;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr884;
	goto tr880;
tr882:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st287;
tr883:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st287;
tr901:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st287;
tr902:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st287;
tr903:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st287;
st287:
	if ( ++p == pe )
		goto _test_eof287;
case 287:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st287;
		case 32: goto st287;
		case 40: goto tr882;
		case 41: goto tr883;
		case 778: goto tr890;
		case 827: goto st288;
		case 1034: goto tr890;
		case 1083: goto st288;
	}
	goto tr892;
tr890:
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1125;
tr905:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1125;
st1125:
	if ( ++p == pe )
		goto _test_eof1125;
case 1125:
	goto st0;
tr906:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st288;
st288:
	if ( ++p == pe )
		goto _test_eof288;
case 288:
	if ( (*p) == 10 )
		goto tr890;
	goto st288;
tr885:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st289;
tr886:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st289;
tr887:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st289;
tr889:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st289;
st289:
	if ( ++p == pe )
		goto _test_eof289;
case 289:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st287;
		case 32: goto st287;
		case 40: goto tr882;
		case 41: goto tr883;
		case 778: goto tr890;
		case 827: goto st288;
		case 1034: goto tr890;
		case 1083: goto st288;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr893;
	goto tr880;
tr895:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st290;
tr893:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st290;
tr904:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st290;
st290:
	if ( ++p == pe )
		goto _test_eof290;
case 290:
	switch( (*p) ) {
		case 68: goto tr896;
		case 72: goto tr897;
		case 77: goto tr898;
		case 83: goto st291;
		case 87: goto tr900;
		case 100: goto tr896;
		case 104: goto tr897;
		case 109: goto tr898;
		case 115: goto st291;
		case 119: goto tr900;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr895;
	goto tr894;
tr896:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st291;
tr897:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st291;
tr898:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st291;
tr900:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st291;
st291:
	if ( ++p == pe )
		goto _test_eof291;
case 291:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 778: goto tr905;
		case 827: goto tr906;
		case 1034: goto tr905;
		case 1083: goto tr906;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr904;
	goto tr880;
st292:
	if ( ++p == pe )
		goto _test_eof292;
case 292:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr876;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st292;
	goto tr872;
st293:
	if ( ++p == pe )
		goto _test_eof293;
case 293:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st294;
		case 32: goto st294;
		case 40: goto tr909;
		case 41: goto tr910;
		case 1034: goto tr911;
		case 1083: goto st304;
	}
	goto tr907;
tr909:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st294;
tr910:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st294;
tr911:
	{
		s->line_counter++;
	}
	goto st294;
st294:
	if ( ++p == pe )
		goto _test_eof294;
case 294:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st294;
		case 32: goto st294;
		case 40: goto tr909;
		case 41: goto tr910;
		case 42: goto tr913;
		case 46: goto tr914;
		case 92: goto tr915;
		case 95: goto tr913;
		case 1034: goto tr911;
		case 1083: goto st304;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr913;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr913;
	} else
		goto tr913;
	goto tr907;
tr916:
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st295;
tr923:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st295;
tr936:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st295;
tr913:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st295;
st295:
	if ( ++p == pe )
		goto _test_eof295;
case 295:
	switch( (*p) ) {
		case 42: goto tr916;
		case 46: goto tr917;
		case 92: goto st299;
		case 95: goto tr916;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr916;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr916;
	} else
		goto tr916;
	goto tr907;
tr917:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st296;
tr937:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st296;
st296:
	if ( ++p == pe )
		goto _test_eof296;
case 296:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr920;
		case 32: goto tr920;
		case 40: goto tr921;
		case 41: goto tr922;
		case 42: goto tr923;
		case 45: goto tr923;
		case 92: goto tr924;
		case 95: goto tr923;
		case 778: goto tr925;
		case 827: goto tr926;
		case 1034: goto tr925;
		case 1083: goto tr926;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr923;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr923;
	} else
		goto tr923;
	goto tr919;
tr928:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st297;
tr929:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st297;
tr920:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	goto st297;
tr921:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st297;
tr922:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st297;
st297:
	if ( ++p == pe )
		goto _test_eof297;
case 297:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st297;
		case 32: goto st297;
		case 40: goto tr928;
		case 41: goto tr929;
		case 778: goto tr930;
		case 827: goto st298;
		case 1034: goto tr930;
		case 1083: goto st298;
	}
	goto tr919;
tr925:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->zone_origin_length = s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1126;
tr930:
	{
		s->zone_origin_length = s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1126;
st1126:
	if ( ++p == pe )
		goto _test_eof1126;
case 1126:
	goto st0;
tr926:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	goto st298;
st298:
	if ( ++p == pe )
		goto _test_eof298;
case 298:
	if ( (*p) == 10 )
		goto tr930;
	goto st298;
tr924:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st299;
tr938:
	{
		s->dname_tmp_length++;
	}
	goto st299;
tr915:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st299;
st299:
	if ( ++p == pe )
		goto _test_eof299;
case 299:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr932;
	goto tr916;
tr932:
	{
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st300;
st300:
	if ( ++p == pe )
		goto _test_eof300;
case 300:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr934;
	goto tr933;
tr934:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st301;
st301:
	if ( ++p == pe )
		goto _test_eof301;
case 301:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr935;
	goto tr933;
tr935:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st302;
st302:
	if ( ++p == pe )
		goto _test_eof302;
case 302:
	switch( (*p) ) {
		case 42: goto tr936;
		case 46: goto tr937;
		case 92: goto tr938;
		case 95: goto tr936;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr936;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr936;
	} else
		goto tr936;
	goto tr933;
tr914:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st303;
st303:
	if ( ++p == pe )
		goto _test_eof303;
case 303:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr920;
		case 32: goto tr920;
		case 40: goto tr921;
		case 41: goto tr922;
		case 778: goto tr925;
		case 827: goto tr926;
		case 1034: goto tr925;
		case 1083: goto tr926;
	}
	goto tr919;
st304:
	if ( ++p == pe )
		goto _test_eof304;
case 304:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr911;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st304;
	goto tr907;
st305:
	if ( ++p == pe )
		goto _test_eof305;
case 305:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st306;
		case 32: goto st306;
		case 40: goto tr940;
		case 41: goto tr941;
		case 1034: goto tr942;
		case 1083: goto st321;
	}
	goto st0;
tr940:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st306;
tr941:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st306;
tr942:
	{
		s->line_counter++;
	}
	goto st306;
st306:
	if ( ++p == pe )
		goto _test_eof306;
case 306:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st306;
		case 32: goto st306;
		case 40: goto tr940;
		case 41: goto tr941;
		case 1034: goto tr942;
		case 1083: goto st321;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr944;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr944;
	} else
		goto tr944;
	goto tr945;
tr944:
	{
		rdata_tail = s->r_data;
	}
	{ p--; {stack[top++] = 307; goto st272;} }
	goto st307;
st307:
	if ( ++p == pe )
		goto _test_eof307;
case 307:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr947;
		case 32: goto tr947;
		case 40: goto tr948;
		case 41: goto tr949;
		case 778: goto tr950;
		case 827: goto tr951;
		case 1034: goto tr950;
		case 1083: goto tr952;
	}
	goto tr946;
tr955:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st308;
tr956:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st308;
tr947:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	goto st308;
tr948:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st308;
tr949:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st308;
st308:
	if ( ++p == pe )
		goto _test_eof308;
case 308:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st308;
		case 32: goto st308;
		case 40: goto tr955;
		case 41: goto tr956;
		case 42: goto tr957;
		case 46: goto tr958;
		case 92: goto tr959;
		case 95: goto tr957;
		case 778: goto tr960;
		case 827: goto st312;
		case 1034: goto tr960;
		case 1083: goto st318;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr957;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr957;
	} else
		goto tr957;
	goto tr953;
tr964:
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st309;
tr970:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st309;
tr981:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st309;
tr957:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st309;
st309:
	if ( ++p == pe )
		goto _test_eof309;
case 309:
	switch( (*p) ) {
		case 42: goto tr964;
		case 46: goto tr965;
		case 92: goto st313;
		case 95: goto tr964;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr964;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr964;
	} else
		goto tr964;
	goto tr963;
tr965:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st310;
tr982:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st310;
st310:
	if ( ++p == pe )
		goto _test_eof310;
case 310:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr967;
		case 32: goto tr967;
		case 40: goto tr968;
		case 41: goto tr969;
		case 42: goto tr970;
		case 45: goto tr970;
		case 92: goto tr971;
		case 95: goto tr970;
		case 778: goto tr972;
		case 827: goto tr973;
		case 1034: goto tr972;
		case 1083: goto tr973;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr970;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr970;
	} else
		goto tr970;
	goto tr953;
tr975:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st311;
tr976:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st311;
tr967:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	goto st311;
tr968:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st311;
tr969:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st311;
st311:
	if ( ++p == pe )
		goto _test_eof311;
case 311:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st311;
		case 32: goto st311;
		case 40: goto tr975;
		case 41: goto tr976;
		case 778: goto tr960;
		case 827: goto st312;
		case 1034: goto tr960;
		case 1083: goto st312;
	}
	goto tr85;
tr950:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			               "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret > sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st261;}
			}
			memcpy(s->include_filename, s->buffer, ret);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			wire_dname_to_str(s->zone_origin,
			                  s->zone_origin_length,
			                  (char *)s->buffer);
		} else { // Use specified origin.
			wire_dname_to_str(s->r_data,
			                  s->r_data_length,
			                  (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (!s->process.automatic) {
			s->state = ZS_STATE_INCLUDE;
			escape = true;
		} else {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st261;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st261;}
			}
			zs_deinit(ss);
			free(ss);
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1127;
tr960:
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			               "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret > sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st261;}
			}
			memcpy(s->include_filename, s->buffer, ret);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			wire_dname_to_str(s->zone_origin,
			                  s->zone_origin_length,
			                  (char *)s->buffer);
		} else { // Use specified origin.
			wire_dname_to_str(s->r_data,
			                  s->r_data_length,
			                  (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (!s->process.automatic) {
			s->state = ZS_STATE_INCLUDE;
			escape = true;
		} else {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st261;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st261;}
			}
			zs_deinit(ss);
			free(ss);
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1127;
tr972:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			               "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret > sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st261;}
			}
			memcpy(s->include_filename, s->buffer, ret);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			wire_dname_to_str(s->zone_origin,
			                  s->zone_origin_length,
			                  (char *)s->buffer);
		} else { // Use specified origin.
			wire_dname_to_str(s->r_data,
			                  s->r_data_length,
			                  (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (!s->process.automatic) {
			s->state = ZS_STATE_INCLUDE;
			escape = true;
		} else {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st261;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st261;}
			}
			zs_deinit(ss);
			free(ss);
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1127;
st1127:
	if ( ++p == pe )
		goto _test_eof1127;
case 1127:
	goto st0;
tr951:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	goto st312;
tr973:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	goto st312;
st312:
	if ( ++p == pe )
		goto _test_eof312;
case 312:
	if ( (*p) == 10 )
		goto tr960;
	goto st312;
tr971:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st313;
tr983:
	{
		s->dname_tmp_length++;
	}
	goto st313;
tr959:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st313;
st313:
	if ( ++p == pe )
		goto _test_eof313;
case 313:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr977;
	goto tr964;
tr977:
	{
		if (s->item_length < MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st314;
st314:
	if ( ++p == pe )
		goto _test_eof314;
case 314:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr979;
	goto tr978;
tr979:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st315;
st315:
	if ( ++p == pe )
		goto _test_eof315;
case 315:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr980;
	goto tr978;
tr980:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st316;
st316:
	if ( ++p == pe )
		goto _test_eof316;
case 316:
	switch( (*p) ) {
		case 42: goto tr981;
		case 46: goto tr982;
		case 92: goto tr983;
		case 95: goto tr981;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr981;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr981;
	} else
		goto tr981;
	goto tr978;
tr958:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st317;
st317:
	if ( ++p == pe )
		goto _test_eof317;
case 317:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr967;
		case 32: goto tr967;
		case 40: goto tr968;
		case 41: goto tr969;
		case 778: goto tr972;
		case 827: goto tr973;
		case 1034: goto tr972;
		case 1083: goto tr973;
	}
	goto tr953;
tr952:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st261;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	goto st318;
st318:
	if ( ++p == pe )
		goto _test_eof318;
case 318:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 778: goto tr960;
		case 1034: goto tr984;
	}
	if ( _widec > 895 ) {
		if ( 896 <= _widec && _widec <= 1151 )
			goto st318;
	} else if ( _widec >= 640 )
		goto st312;
	goto tr85;
tr984:
	{
		s->line_counter++;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			               "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret > sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st261;}
			}
			memcpy(s->include_filename, s->buffer, ret);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			wire_dname_to_str(s->zone_origin,
			                  s->zone_origin_length,
			                  (char *)s->buffer);
		} else { // Use specified origin.
			wire_dname_to_str(s->r_data,
			                  s->r_data_length,
			                  (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (!s->process.automatic) {
			s->state = ZS_STATE_INCLUDE;
			escape = true;
		} else {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st261;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st261;}
			}
			zs_deinit(ss);
			free(ss);
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1128;
st1128:
	if ( ++p == pe )
		goto _test_eof1128;
case 1128:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st319;
		case 32: goto st319;
		case 40: goto tr986;
		case 41: goto tr987;
		case 42: goto tr957;
		case 46: goto tr958;
		case 92: goto tr959;
		case 95: goto tr957;
		case 1034: goto tr988;
		case 1083: goto st320;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr957;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr957;
	} else
		goto tr957;
	goto tr963;
tr986:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st319;
tr987:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st319;
tr988:
	{
		s->line_counter++;
	}
	goto st319;
st319:
	if ( ++p == pe )
		goto _test_eof319;
case 319:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st319;
		case 32: goto st319;
		case 40: goto tr986;
		case 41: goto tr987;
		case 42: goto tr957;
		case 46: goto tr958;
		case 92: goto tr959;
		case 95: goto tr957;
		case 1034: goto tr988;
		case 1083: goto st320;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr957;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr957;
	} else
		goto tr957;
	goto tr963;
st320:
	if ( ++p == pe )
		goto _test_eof320;
case 320:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr988;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st320;
	goto st0;
st321:
	if ( ++p == pe )
		goto _test_eof321;
case 321:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr942;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st321;
	goto st0;
st322:
	if ( ++p == pe )
		goto _test_eof322;
case 322:
	if ( (*p) == 43 )
		goto tr991;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr991;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr991;
	} else
		goto tr991;
	goto tr990;
tr991:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st323;
st323:
	if ( ++p == pe )
		goto _test_eof323;
case 323:
	if ( (*p) == 43 )
		goto tr992;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr992;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr992;
	} else
		goto tr992;
	goto tr990;
tr992:
	{
		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st324;
st324:
	if ( ++p == pe )
		goto _test_eof324;
case 324:
	switch( (*p) ) {
		case 43: goto tr993;
		case 61: goto st328;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr993;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr993;
	} else
		goto tr993;
	goto tr990;
tr993:
	{
		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = third_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st325;
st325:
	if ( ++p == pe )
		goto _test_eof325;
case 325:
	switch( (*p) ) {
		case 43: goto tr995;
		case 61: goto st326;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr995;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr995;
	} else
		goto tr995;
	goto tr990;
tr997:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st326;
tr998:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st326;
tr999:
	{
		s->line_counter++;
	}
	goto st326;
tr995:
	{
		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)(*p)];
	}
	goto st326;
st326:
	if ( ++p == pe )
		goto _test_eof326;
case 326:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st326;
		case 32: goto st326;
		case 40: goto tr997;
		case 41: goto tr998;
		case 43: goto tr991;
		case 2058: goto tr999;
		case 2107: goto st327;
		case 2314: goto tr1001;
		case 2363: goto tr1001;
		case 2570: goto tr1002;
		case 2619: goto tr1003;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr991;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr991;
	} else
		goto tr991;
	goto tr990;
st327:
	if ( ++p == pe )
		goto _test_eof327;
case 327:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr999;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st327;
	goto tr990;
tr1001:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1129;
st1129:
	if ( ++p == pe )
		goto _test_eof1129;
case 1129:
	goto st0;
tr1002:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1130;
st1130:
	if ( ++p == pe )
		goto _test_eof1130;
case 1130:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st326;
		case 32: goto st326;
		case 40: goto tr997;
		case 41: goto tr998;
		case 43: goto tr991;
		case 2058: goto tr999;
		case 2107: goto st327;
		case 2314: goto tr1001;
		case 2363: goto tr1001;
		case 2570: goto tr1002;
		case 2619: goto tr1003;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr991;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr991;
	} else
		goto tr991;
	goto tr990;
tr1003:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1131;
st1131:
	if ( ++p == pe )
		goto _test_eof1131;
case 1131:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr999;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st327;
	goto tr990;
st328:
	if ( ++p == pe )
		goto _test_eof328;
case 328:
	if ( (*p) == 61 )
		goto st326;
	goto tr990;
st329:
	if ( ++p == pe )
		goto _test_eof329;
case 329:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1005;
		case 32: goto tr1005;
		case 40: goto tr1006;
		case 41: goto tr1007;
		case 2058: goto tr1008;
		case 2107: goto tr1009;
		case 2314: goto tr1010;
		case 2363: goto tr1010;
		case 2570: goto tr1011;
		case 2619: goto tr1012;
	}
	goto tr1004;
tr1014:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1015:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1031:
	{
		s->line_counter++;
	}
	goto st330;
tr1005:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	goto st330;
tr1006:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1007:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1008:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->line_counter++;
	}
	goto st330;
tr1036:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	goto st330;
tr1037:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1038:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1042:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1049:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	goto st330;
tr1050:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1051:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1052:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1062:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	goto st330;
tr1063:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1064:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1065:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1076:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	goto st330;
tr1077:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1078:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1079:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1084:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	goto st330;
tr1085:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1086:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1087:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1094:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	goto st330;
tr1095:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1096:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1097:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1105:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	goto st330;
tr1106:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1107:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1108:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1119:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	goto st330;
tr1120:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1121:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1122:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1131:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	goto st330;
tr1132:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1133:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1134:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1142:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	goto st330;
tr1143:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1144:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1145:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1150:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	goto st330;
tr1151:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1152:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1153:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1163:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	goto st330;
tr1164:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1165:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1166:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1172:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	goto st330;
tr1173:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1174:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1175:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1184:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	goto st330;
tr1185:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1186:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1187:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1199:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	goto st330;
tr1200:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1201:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1202:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1210:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	goto st330;
tr1211:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1212:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1213:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1218:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	goto st330;
tr1219:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1220:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1221:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1231:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	goto st330;
tr1232:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1233:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1234:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1240:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	goto st330;
tr1241:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1242:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1243:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1249:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	goto st330;
tr1250:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1251:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1252:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1257:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	goto st330;
tr1258:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1259:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1260:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1270:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	goto st330;
tr1271:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1272:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1273:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1278:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	goto st330;
tr1279:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1280:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1281:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1292:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	goto st330;
tr1293:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1294:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1295:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1301:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	goto st330;
tr1302:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1303:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1304:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1309:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	goto st330;
tr1310:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1311:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1313:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1319:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	goto st330;
tr1320:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1321:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1323:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1328:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	goto st330;
tr1329:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1330:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1332:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1341:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	goto st330;
tr1342:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1343:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1344:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1351:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	goto st330;
tr1352:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1353:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1354:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1362:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	goto st330;
tr1363:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1364:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1365:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1373:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	goto st330;
tr1374:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1375:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1376:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1381:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	goto st330;
tr1382:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1383:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1384:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1394:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	goto st330;
tr1395:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1396:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1397:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1403:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	goto st330;
tr1404:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1405:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1406:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1412:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	goto st330;
tr1413:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1414:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1415:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1423:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	goto st330;
tr1424:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1425:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1426:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1436:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	goto st330;
tr1437:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1438:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1439:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1445:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	goto st330;
tr1446:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1447:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1448:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1456:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st330;
tr1457:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1458:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1460:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st330;
tr1467:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	goto st330;
tr1468:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1469:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1470:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1478:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	goto st330;
tr1479:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1480:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1481:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->line_counter++;
	}
	goto st330;
tr1487:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	goto st330;
tr1488:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st330;
tr1489:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st330;
tr1490:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->line_counter++;
	}
	goto st330;
st330:
	if ( ++p == pe )
		goto _test_eof330;
case 330:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st330;
		case 32: goto st330;
		case 40: goto tr1014;
		case 41: goto tr1015;
		case 65: goto st331;
		case 67: goto st336;
		case 68: goto st353;
		case 69: goto st367;
		case 72: goto st374;
		case 73: goto st379;
		case 75: goto st387;
		case 76: goto st391;
		case 77: goto st399;
		case 78: goto st405;
		case 80: goto st421;
		case 82: goto st424;
		case 83: goto st431;
		case 84: goto st442;
		case 85: goto st452;
		case 97: goto st331;
		case 99: goto st336;
		case 100: goto st353;
		case 101: goto st367;
		case 104: goto st374;
		case 105: goto st379;
		case 107: goto st387;
		case 108: goto st391;
		case 109: goto st399;
		case 110: goto st405;
		case 112: goto st421;
		case 114: goto st424;
		case 115: goto st431;
		case 116: goto st442;
		case 117: goto st452;
		case 2058: goto tr1031;
		case 2107: goto st335;
		case 2314: goto tr1033;
		case 2363: goto tr1033;
		case 2570: goto tr1034;
		case 2619: goto tr1035;
	}
	goto tr1004;
st331:
	if ( ++p == pe )
		goto _test_eof331;
case 331:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1036;
		case 32: goto tr1036;
		case 40: goto tr1037;
		case 41: goto tr1038;
		case 65: goto st332;
		case 70: goto st455;
		case 80: goto st459;
		case 97: goto st332;
		case 102: goto st455;
		case 112: goto st459;
		case 2058: goto tr1042;
		case 2107: goto tr1043;
		case 2314: goto tr1044;
		case 2363: goto tr1044;
		case 2570: goto tr1045;
		case 2619: goto tr1046;
	}
	goto tr1004;
st332:
	if ( ++p == pe )
		goto _test_eof332;
case 332:
	switch( (*p) ) {
		case 65: goto st333;
		case 97: goto st333;
	}
	goto tr1004;
st333:
	if ( ++p == pe )
		goto _test_eof333;
case 333:
	switch( (*p) ) {
		case 65: goto st334;
		case 97: goto st334;
	}
	goto tr1004;
st334:
	if ( ++p == pe )
		goto _test_eof334;
case 334:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1049;
		case 32: goto tr1049;
		case 40: goto tr1050;
		case 41: goto tr1051;
		case 2058: goto tr1052;
		case 2107: goto tr1053;
		case 2314: goto tr1054;
		case 2363: goto tr1054;
		case 2570: goto tr1055;
		case 2619: goto tr1056;
	}
	goto tr1004;
tr1009:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	goto st335;
tr1043:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	goto st335;
tr1053:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	goto st335;
tr1066:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	goto st335;
tr1080:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	goto st335;
tr1088:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	goto st335;
tr1098:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	goto st335;
tr1109:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	goto st335;
tr1123:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	goto st335;
tr1135:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	goto st335;
tr1146:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	goto st335;
tr1154:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	goto st335;
tr1167:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	goto st335;
tr1176:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	goto st335;
tr1188:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	goto st335;
tr1203:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	goto st335;
tr1214:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	goto st335;
tr1222:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	goto st335;
tr1235:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	goto st335;
tr1244:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	goto st335;
tr1253:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	goto st335;
tr1261:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	goto st335;
tr1274:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	goto st335;
tr1282:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	goto st335;
tr1296:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	goto st335;
tr1305:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	goto st335;
tr1314:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	goto st335;
tr1324:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	goto st335;
tr1333:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	goto st335;
tr1345:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	goto st335;
tr1355:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	goto st335;
tr1366:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	goto st335;
tr1377:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	goto st335;
tr1385:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	goto st335;
tr1398:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	goto st335;
tr1407:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	goto st335;
tr1416:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	goto st335;
tr1427:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	goto st335;
tr1440:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	goto st335;
tr1449:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	goto st335;
tr1461:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st335;
tr1471:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	goto st335;
tr1482:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	goto st335;
tr1491:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	goto st335;
st335:
	if ( ++p == pe )
		goto _test_eof335;
case 335:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1031;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st335;
	goto tr1004;
tr1010:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1033:
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1044:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1054:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1067:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1081:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1089:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1099:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1110:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1124:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1136:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1147:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1155:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1168:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1177:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1189:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1204:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1215:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1223:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1236:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1245:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1254:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1262:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1275:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1283:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1297:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1306:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1315:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1325:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1334:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1346:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1356:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1367:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1378:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1386:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1399:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1408:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1417:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1428:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1441:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1450:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1462:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1472:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1483:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
tr1492:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1132;
st1132:
	if ( ++p == pe )
		goto _test_eof1132;
case 1132:
	goto st0;
tr1011:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1034:
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1045:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1055:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1068:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1082:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1090:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1100:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1111:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1125:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1137:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1148:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1156:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1169:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1178:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1190:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1205:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1216:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1224:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1237:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1246:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1255:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1263:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1276:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1284:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1298:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1307:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1316:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1326:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1335:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1347:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1357:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1368:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1379:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1387:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1400:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1409:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1418:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1429:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1442:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1451:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1463:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1473:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1484:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
tr1493:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->line_counter++;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1133;
st1133:
	if ( ++p == pe )
		goto _test_eof1133;
case 1133:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st330;
		case 32: goto st330;
		case 40: goto tr1014;
		case 41: goto tr1015;
		case 65: goto st331;
		case 67: goto st336;
		case 68: goto st353;
		case 69: goto st367;
		case 72: goto st374;
		case 73: goto st379;
		case 75: goto st387;
		case 76: goto st391;
		case 77: goto st399;
		case 78: goto st405;
		case 80: goto st421;
		case 82: goto st424;
		case 83: goto st431;
		case 84: goto st442;
		case 85: goto st452;
		case 97: goto st331;
		case 99: goto st336;
		case 100: goto st353;
		case 101: goto st367;
		case 104: goto st374;
		case 105: goto st379;
		case 107: goto st387;
		case 108: goto st391;
		case 109: goto st399;
		case 110: goto st405;
		case 112: goto st421;
		case 114: goto st424;
		case 115: goto st431;
		case 116: goto st442;
		case 117: goto st452;
		case 2058: goto tr1031;
		case 2107: goto st335;
		case 2314: goto tr1033;
		case 2363: goto tr1033;
		case 2570: goto tr1034;
		case 2619: goto tr1035;
	}
	goto tr1004;
st336:
	if ( ++p == pe )
		goto _test_eof336;
case 336:
	switch( (*p) ) {
		case 65: goto st337;
		case 68: goto st339;
		case 69: goto st346;
		case 78: goto st349;
		case 97: goto st337;
		case 100: goto st339;
		case 101: goto st346;
		case 110: goto st349;
	}
	goto tr1004;
st337:
	if ( ++p == pe )
		goto _test_eof337;
case 337:
	switch( (*p) ) {
		case 65: goto st338;
		case 97: goto st338;
	}
	goto tr1004;
st338:
	if ( ++p == pe )
		goto _test_eof338;
case 338:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1062;
		case 32: goto tr1062;
		case 40: goto tr1063;
		case 41: goto tr1064;
		case 2058: goto tr1065;
		case 2107: goto tr1066;
		case 2314: goto tr1067;
		case 2363: goto tr1067;
		case 2570: goto tr1068;
		case 2619: goto tr1069;
	}
	goto tr1004;
tr1012:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1035:
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1046:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1056:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1069:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1083:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1091:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1101:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1112:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1126:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1138:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1149:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1157:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1170:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1179:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1191:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1206:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1217:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1225:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1238:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1247:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1256:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1264:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1277:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1285:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1299:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1308:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1317:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1327:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1336:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1348:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1358:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1369:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1380:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1388:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1401:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1410:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1419:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1430:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1443:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1452:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1464:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1474:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1485:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
tr1494:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		for (window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st261;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1134;
st1134:
	if ( ++p == pe )
		goto _test_eof1134;
case 1134:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1031;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st335;
	goto tr1004;
st339:
	if ( ++p == pe )
		goto _test_eof339;
case 339:
	switch( (*p) ) {
		case 78: goto st340;
		case 83: goto st345;
		case 110: goto st340;
		case 115: goto st345;
	}
	goto tr1004;
st340:
	if ( ++p == pe )
		goto _test_eof340;
case 340:
	switch( (*p) ) {
		case 83: goto st341;
		case 115: goto st341;
	}
	goto tr1004;
st341:
	if ( ++p == pe )
		goto _test_eof341;
case 341:
	switch( (*p) ) {
		case 75: goto st342;
		case 107: goto st342;
	}
	goto tr1004;
st342:
	if ( ++p == pe )
		goto _test_eof342;
case 342:
	switch( (*p) ) {
		case 69: goto st343;
		case 101: goto st343;
	}
	goto tr1004;
st343:
	if ( ++p == pe )
		goto _test_eof343;
case 343:
	switch( (*p) ) {
		case 89: goto st344;
		case 121: goto st344;
	}
	goto tr1004;
st344:
	if ( ++p == pe )
		goto _test_eof344;
case 344:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1076;
		case 32: goto tr1076;
		case 40: goto tr1077;
		case 41: goto tr1078;
		case 2058: goto tr1079;
		case 2107: goto tr1080;
		case 2314: goto tr1081;
		case 2363: goto tr1081;
		case 2570: goto tr1082;
		case 2619: goto tr1083;
	}
	goto tr1004;
st345:
	if ( ++p == pe )
		goto _test_eof345;
case 345:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1084;
		case 32: goto tr1084;
		case 40: goto tr1085;
		case 41: goto tr1086;
		case 2058: goto tr1087;
		case 2107: goto tr1088;
		case 2314: goto tr1089;
		case 2363: goto tr1089;
		case 2570: goto tr1090;
		case 2619: goto tr1091;
	}
	goto tr1004;
st346:
	if ( ++p == pe )
		goto _test_eof346;
case 346:
	switch( (*p) ) {
		case 82: goto st347;
		case 114: goto st347;
	}
	goto tr1004;
st347:
	if ( ++p == pe )
		goto _test_eof347;
case 347:
	switch( (*p) ) {
		case 84: goto st348;
		case 116: goto st348;
	}
	goto tr1004;
st348:
	if ( ++p == pe )
		goto _test_eof348;
case 348:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1094;
		case 32: goto tr1094;
		case 40: goto tr1095;
		case 41: goto tr1096;
		case 2058: goto tr1097;
		case 2107: goto tr1098;
		case 2314: goto tr1099;
		case 2363: goto tr1099;
		case 2570: goto tr1100;
		case 2619: goto tr1101;
	}
	goto tr1004;
st349:
	if ( ++p == pe )
		goto _test_eof349;
case 349:
	switch( (*p) ) {
		case 65: goto st350;
		case 97: goto st350;
	}
	goto tr1004;
st350:
	if ( ++p == pe )
		goto _test_eof350;
case 350:
	switch( (*p) ) {
		case 77: goto st351;
		case 109: goto st351;
	}
	goto tr1004;
st351:
	if ( ++p == pe )
		goto _test_eof351;
case 351:
	switch( (*p) ) {
		case 69: goto st352;
		case 101: goto st352;
	}
	goto tr1004;
st352:
	if ( ++p == pe )
		goto _test_eof352;
case 352:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1105;
		case 32: goto tr1105;
		case 40: goto tr1106;
		case 41: goto tr1107;
		case 2058: goto tr1108;
		case 2107: goto tr1109;
		case 2314: goto tr1110;
		case 2363: goto tr1110;
		case 2570: goto tr1111;
		case 2619: goto tr1112;
	}
	goto tr1004;
st353:
	if ( ++p == pe )
		goto _test_eof353;
case 353:
	switch( (*p) ) {
		case 72: goto st354;
		case 78: goto st358;
		case 83: goto st366;
		case 104: goto st354;
		case 110: goto st358;
		case 115: goto st366;
	}
	goto tr1004;
st354:
	if ( ++p == pe )
		goto _test_eof354;
case 354:
	switch( (*p) ) {
		case 67: goto st355;
		case 99: goto st355;
	}
	goto tr1004;
st355:
	if ( ++p == pe )
		goto _test_eof355;
case 355:
	switch( (*p) ) {
		case 73: goto st356;
		case 105: goto st356;
	}
	goto tr1004;
st356:
	if ( ++p == pe )
		goto _test_eof356;
case 356:
	switch( (*p) ) {
		case 68: goto st357;
		case 100: goto st357;
	}
	goto tr1004;
st357:
	if ( ++p == pe )
		goto _test_eof357;
case 357:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1119;
		case 32: goto tr1119;
		case 40: goto tr1120;
		case 41: goto tr1121;
		case 2058: goto tr1122;
		case 2107: goto tr1123;
		case 2314: goto tr1124;
		case 2363: goto tr1124;
		case 2570: goto tr1125;
		case 2619: goto tr1126;
	}
	goto tr1004;
st358:
	if ( ++p == pe )
		goto _test_eof358;
case 358:
	switch( (*p) ) {
		case 65: goto st359;
		case 83: goto st362;
		case 97: goto st359;
		case 115: goto st362;
	}
	goto tr1004;
st359:
	if ( ++p == pe )
		goto _test_eof359;
case 359:
	switch( (*p) ) {
		case 77: goto st360;
		case 109: goto st360;
	}
	goto tr1004;
st360:
	if ( ++p == pe )
		goto _test_eof360;
case 360:
	switch( (*p) ) {
		case 69: goto st361;
		case 101: goto st361;
	}
	goto tr1004;
st361:
	if ( ++p == pe )
		goto _test_eof361;
case 361:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1131;
		case 32: goto tr1131;
		case 40: goto tr1132;
		case 41: goto tr1133;
		case 2058: goto tr1134;
		case 2107: goto tr1135;
		case 2314: goto tr1136;
		case 2363: goto tr1136;
		case 2570: goto tr1137;
		case 2619: goto tr1138;
	}
	goto tr1004;
st362:
	if ( ++p == pe )
		goto _test_eof362;
case 362:
	switch( (*p) ) {
		case 75: goto st363;
		case 107: goto st363;
	}
	goto tr1004;
st363:
	if ( ++p == pe )
		goto _test_eof363;
case 363:
	switch( (*p) ) {
		case 69: goto st364;
		case 101: goto st364;
	}
	goto tr1004;
st364:
	if ( ++p == pe )
		goto _test_eof364;
case 364:
	switch( (*p) ) {
		case 89: goto st365;
		case 121: goto st365;
	}
	goto tr1004;
st365:
	if ( ++p == pe )
		goto _test_eof365;
case 365:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1142;
		case 32: goto tr1142;
		case 40: goto tr1143;
		case 41: goto tr1144;
		case 2058: goto tr1145;
		case 2107: goto tr1146;
		case 2314: goto tr1147;
		case 2363: goto tr1147;
		case 2570: goto tr1148;
		case 2619: goto tr1149;
	}
	goto tr1004;
st366:
	if ( ++p == pe )
		goto _test_eof366;
case 366:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1150;
		case 32: goto tr1150;
		case 40: goto tr1151;
		case 41: goto tr1152;
		case 2058: goto tr1153;
		case 2107: goto tr1154;
		case 2314: goto tr1155;
		case 2363: goto tr1155;
		case 2570: goto tr1156;
		case 2619: goto tr1157;
	}
	goto tr1004;
st367:
	if ( ++p == pe )
		goto _test_eof367;
case 367:
	switch( (*p) ) {
		case 85: goto st368;
		case 117: goto st368;
	}
	goto tr1004;
st368:
	if ( ++p == pe )
		goto _test_eof368;
case 368:
	switch( (*p) ) {
		case 73: goto st369;
		case 105: goto st369;
	}
	goto tr1004;
st369:
	if ( ++p == pe )
		goto _test_eof369;
case 369:
	switch( (*p) ) {
		case 52: goto st370;
		case 54: goto st372;
	}
	goto tr1004;
st370:
	if ( ++p == pe )
		goto _test_eof370;
case 370:
	if ( (*p) == 56 )
		goto st371;
	goto tr1004;
st371:
	if ( ++p == pe )
		goto _test_eof371;
case 371:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1163;
		case 32: goto tr1163;
		case 40: goto tr1164;
		case 41: goto tr1165;
		case 2058: goto tr1166;
		case 2107: goto tr1167;
		case 2314: goto tr1168;
		case 2363: goto tr1168;
		case 2570: goto tr1169;
		case 2619: goto tr1170;
	}
	goto tr1004;
st372:
	if ( ++p == pe )
		goto _test_eof372;
case 372:
	if ( (*p) == 52 )
		goto st373;
	goto tr1004;
st373:
	if ( ++p == pe )
		goto _test_eof373;
case 373:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1172;
		case 32: goto tr1172;
		case 40: goto tr1173;
		case 41: goto tr1174;
		case 2058: goto tr1175;
		case 2107: goto tr1176;
		case 2314: goto tr1177;
		case 2363: goto tr1177;
		case 2570: goto tr1178;
		case 2619: goto tr1179;
	}
	goto tr1004;
st374:
	if ( ++p == pe )
		goto _test_eof374;
case 374:
	switch( (*p) ) {
		case 73: goto st375;
		case 105: goto st375;
	}
	goto tr1004;
st375:
	if ( ++p == pe )
		goto _test_eof375;
case 375:
	switch( (*p) ) {
		case 78: goto st376;
		case 110: goto st376;
	}
	goto tr1004;
st376:
	if ( ++p == pe )
		goto _test_eof376;
case 376:
	switch( (*p) ) {
		case 70: goto st377;
		case 102: goto st377;
	}
	goto tr1004;
st377:
	if ( ++p == pe )
		goto _test_eof377;
case 377:
	switch( (*p) ) {
		case 79: goto st378;
		case 111: goto st378;
	}
	goto tr1004;
st378:
	if ( ++p == pe )
		goto _test_eof378;
case 378:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1184;
		case 32: goto tr1184;
		case 40: goto tr1185;
		case 41: goto tr1186;
		case 2058: goto tr1187;
		case 2107: goto tr1188;
		case 2314: goto tr1189;
		case 2363: goto tr1189;
		case 2570: goto tr1190;
		case 2619: goto tr1191;
	}
	goto tr1004;
st379:
	if ( ++p == pe )
		goto _test_eof379;
case 379:
	switch( (*p) ) {
		case 80: goto st380;
		case 112: goto st380;
	}
	goto tr1004;
st380:
	if ( ++p == pe )
		goto _test_eof380;
case 380:
	switch( (*p) ) {
		case 83: goto st381;
		case 115: goto st381;
	}
	goto tr1004;
st381:
	if ( ++p == pe )
		goto _test_eof381;
case 381:
	switch( (*p) ) {
		case 69: goto st382;
		case 101: goto st382;
	}
	goto tr1004;
st382:
	if ( ++p == pe )
		goto _test_eof382;
case 382:
	switch( (*p) ) {
		case 67: goto st383;
		case 99: goto st383;
	}
	goto tr1004;
st383:
	if ( ++p == pe )
		goto _test_eof383;
case 383:
	switch( (*p) ) {
		case 75: goto st384;
		case 107: goto st384;
	}
	goto tr1004;
st384:
	if ( ++p == pe )
		goto _test_eof384;
case 384:
	switch( (*p) ) {
		case 69: goto st385;
		case 101: goto st385;
	}
	goto tr1004;
st385:
	if ( ++p == pe )
		goto _test_eof385;
case 385:
	switch( (*p) ) {
		case 89: goto st386;
		case 121: goto st386;
	}
	goto tr1004;
st386:
	if ( ++p == pe )
		goto _test_eof386;
case 386:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1199;
		case 32: goto tr1199;
		case 40: goto tr1200;
		case 41: goto tr1201;
		case 2058: goto tr1202;
		case 2107: goto tr1203;
		case 2314: goto tr1204;
		case 2363: goto tr1204;
		case 2570: goto tr1205;
		case 2619: goto tr1206;
	}
	goto tr1004;
st387:
	if ( ++p == pe )
		goto _test_eof387;
case 387:
	switch( (*p) ) {
		case 69: goto st388;
		case 88: goto st390;
		case 101: goto st388;
		case 120: goto st390;
	}
	goto tr1004;
st388:
	if ( ++p == pe )
		goto _test_eof388;
case 388:
	switch( (*p) ) {
		case 89: goto st389;
		case 121: goto st389;
	}
	goto tr1004;
st389:
	if ( ++p == pe )
		goto _test_eof389;
case 389:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1210;
		case 32: goto tr1210;
		case 40: goto tr1211;
		case 41: goto tr1212;
		case 2058: goto tr1213;
		case 2107: goto tr1214;
		case 2314: goto tr1215;
		case 2363: goto tr1215;
		case 2570: goto tr1216;
		case 2619: goto tr1217;
	}
	goto tr1004;
st390:
	if ( ++p == pe )
		goto _test_eof390;
case 390:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1218;
		case 32: goto tr1218;
		case 40: goto tr1219;
		case 41: goto tr1220;
		case 2058: goto tr1221;
		case 2107: goto tr1222;
		case 2314: goto tr1223;
		case 2363: goto tr1223;
		case 2570: goto tr1224;
		case 2619: goto tr1225;
	}
	goto tr1004;
st391:
	if ( ++p == pe )
		goto _test_eof391;
case 391:
	switch( (*p) ) {
		case 51: goto st392;
		case 54: goto st394;
		case 79: goto st396;
		case 80: goto st398;
		case 111: goto st396;
		case 112: goto st398;
	}
	goto tr1004;
st392:
	if ( ++p == pe )
		goto _test_eof392;
case 392:
	if ( (*p) == 50 )
		goto st393;
	goto tr1004;
st393:
	if ( ++p == pe )
		goto _test_eof393;
case 393:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1231;
		case 32: goto tr1231;
		case 40: goto tr1232;
		case 41: goto tr1233;
		case 2058: goto tr1234;
		case 2107: goto tr1235;
		case 2314: goto tr1236;
		case 2363: goto tr1236;
		case 2570: goto tr1237;
		case 2619: goto tr1238;
	}
	goto tr1004;
st394:
	if ( ++p == pe )
		goto _test_eof394;
case 394:
	if ( (*p) == 52 )
		goto st395;
	goto tr1004;
st395:
	if ( ++p == pe )
		goto _test_eof395;
case 395:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1240;
		case 32: goto tr1240;
		case 40: goto tr1241;
		case 41: goto tr1242;
		case 2058: goto tr1243;
		case 2107: goto tr1244;
		case 2314: goto tr1245;
		case 2363: goto tr1245;
		case 2570: goto tr1246;
		case 2619: goto tr1247;
	}
	goto tr1004;
st396:
	if ( ++p == pe )
		goto _test_eof396;
case 396:
	switch( (*p) ) {
		case 67: goto st397;
		case 99: goto st397;
	}
	goto tr1004;
st397:
	if ( ++p == pe )
		goto _test_eof397;
case 397:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1249;
		case 32: goto tr1249;
		case 40: goto tr1250;
		case 41: goto tr1251;
		case 2058: goto tr1252;
		case 2107: goto tr1253;
		case 2314: goto tr1254;
		case 2363: goto tr1254;
		case 2570: goto tr1255;
		case 2619: goto tr1256;
	}
	goto tr1004;
st398:
	if ( ++p == pe )
		goto _test_eof398;
case 398:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1257;
		case 32: goto tr1257;
		case 40: goto tr1258;
		case 41: goto tr1259;
		case 2058: goto tr1260;
		case 2107: goto tr1261;
		case 2314: goto tr1262;
		case 2363: goto tr1262;
		case 2570: goto tr1263;
		case 2619: goto tr1264;
	}
	goto tr1004;
st399:
	if ( ++p == pe )
		goto _test_eof399;
case 399:
	switch( (*p) ) {
		case 73: goto st400;
		case 88: goto st404;
		case 105: goto st400;
		case 120: goto st404;
	}
	goto tr1004;
st400:
	if ( ++p == pe )
		goto _test_eof400;
case 400:
	switch( (*p) ) {
		case 78: goto st401;
		case 110: goto st401;
	}
	goto tr1004;
st401:
	if ( ++p == pe )
		goto _test_eof401;
case 401:
	switch( (*p) ) {
		case 70: goto st402;
		case 102: goto st402;
	}
	goto tr1004;
st402:
	if ( ++p == pe )
		goto _test_eof402;
case 402:
	switch( (*p) ) {
		case 79: goto st403;
		case 111: goto st403;
	}
	goto tr1004;
st403:
	if ( ++p == pe )
		goto _test_eof403;
case 403:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1270;
		case 32: goto tr1270;
		case 40: goto tr1271;
		case 41: goto tr1272;
		case 2058: goto tr1273;
		case 2107: goto tr1274;
		case 2314: goto tr1275;
		case 2363: goto tr1275;
		case 2570: goto tr1276;
		case 2619: goto tr1277;
	}
	goto tr1004;
st404:
	if ( ++p == pe )
		goto _test_eof404;
case 404:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1278;
		case 32: goto tr1278;
		case 40: goto tr1279;
		case 41: goto tr1280;
		case 2058: goto tr1281;
		case 2107: goto tr1282;
		case 2314: goto tr1283;
		case 2363: goto tr1283;
		case 2570: goto tr1284;
		case 2619: goto tr1285;
	}
	goto tr1004;
st405:
	if ( ++p == pe )
		goto _test_eof405;
case 405:
	switch( (*p) ) {
		case 65: goto st406;
		case 73: goto st410;
		case 83: goto st412;
		case 97: goto st406;
		case 105: goto st410;
		case 115: goto st412;
	}
	goto tr1004;
st406:
	if ( ++p == pe )
		goto _test_eof406;
case 406:
	switch( (*p) ) {
		case 80: goto st407;
		case 112: goto st407;
	}
	goto tr1004;
st407:
	if ( ++p == pe )
		goto _test_eof407;
case 407:
	switch( (*p) ) {
		case 84: goto st408;
		case 116: goto st408;
	}
	goto tr1004;
st408:
	if ( ++p == pe )
		goto _test_eof408;
case 408:
	switch( (*p) ) {
		case 82: goto st409;
		case 114: goto st409;
	}
	goto tr1004;
st409:
	if ( ++p == pe )
		goto _test_eof409;
case 409:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1292;
		case 32: goto tr1292;
		case 40: goto tr1293;
		case 41: goto tr1294;
		case 2058: goto tr1295;
		case 2107: goto tr1296;
		case 2314: goto tr1297;
		case 2363: goto tr1297;
		case 2570: goto tr1298;
		case 2619: goto tr1299;
	}
	goto tr1004;
st410:
	if ( ++p == pe )
		goto _test_eof410;
case 410:
	switch( (*p) ) {
		case 68: goto st411;
		case 100: goto st411;
	}
	goto tr1004;
st411:
	if ( ++p == pe )
		goto _test_eof411;
case 411:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1301;
		case 32: goto tr1301;
		case 40: goto tr1302;
		case 41: goto tr1303;
		case 2058: goto tr1304;
		case 2107: goto tr1305;
		case 2314: goto tr1306;
		case 2363: goto tr1306;
		case 2570: goto tr1307;
		case 2619: goto tr1308;
	}
	goto tr1004;
st412:
	if ( ++p == pe )
		goto _test_eof412;
case 412:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1309;
		case 32: goto tr1309;
		case 40: goto tr1310;
		case 41: goto tr1311;
		case 69: goto st413;
		case 101: goto st413;
		case 2058: goto tr1313;
		case 2107: goto tr1314;
		case 2314: goto tr1315;
		case 2363: goto tr1315;
		case 2570: goto tr1316;
		case 2619: goto tr1317;
	}
	goto tr1004;
st413:
	if ( ++p == pe )
		goto _test_eof413;
case 413:
	switch( (*p) ) {
		case 67: goto st414;
		case 99: goto st414;
	}
	goto tr1004;
st414:
	if ( ++p == pe )
		goto _test_eof414;
case 414:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1319;
		case 32: goto tr1319;
		case 40: goto tr1320;
		case 41: goto tr1321;
		case 51: goto st415;
		case 2058: goto tr1323;
		case 2107: goto tr1324;
		case 2314: goto tr1325;
		case 2363: goto tr1325;
		case 2570: goto tr1326;
		case 2619: goto tr1327;
	}
	goto tr1004;
st415:
	if ( ++p == pe )
		goto _test_eof415;
case 415:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1328;
		case 32: goto tr1328;
		case 40: goto tr1329;
		case 41: goto tr1330;
		case 80: goto st416;
		case 112: goto st416;
		case 2058: goto tr1332;
		case 2107: goto tr1333;
		case 2314: goto tr1334;
		case 2363: goto tr1334;
		case 2570: goto tr1335;
		case 2619: goto tr1336;
	}
	goto tr1004;
st416:
	if ( ++p == pe )
		goto _test_eof416;
case 416:
	switch( (*p) ) {
		case 65: goto st417;
		case 97: goto st417;
	}
	goto tr1004;
st417:
	if ( ++p == pe )
		goto _test_eof417;
case 417:
	switch( (*p) ) {
		case 82: goto st418;
		case 114: goto st418;
	}
	goto tr1004;
st418:
	if ( ++p == pe )
		goto _test_eof418;
case 418:
	switch( (*p) ) {
		case 65: goto st419;
		case 97: goto st419;
	}
	goto tr1004;
st419:
	if ( ++p == pe )
		goto _test_eof419;
case 419:
	switch( (*p) ) {
		case 77: goto st420;
		case 109: goto st420;
	}
	goto tr1004;
st420:
	if ( ++p == pe )
		goto _test_eof420;
case 420:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1341;
		case 32: goto tr1341;
		case 40: goto tr1342;
		case 41: goto tr1343;
		case 2058: goto tr1344;
		case 2107: goto tr1345;
		case 2314: goto tr1346;
		case 2363: goto tr1346;
		case 2570: goto tr1347;
		case 2619: goto tr1348;
	}
	goto tr1004;
st421:
	if ( ++p == pe )
		goto _test_eof421;
case 421:
	switch( (*p) ) {
		case 84: goto st422;
		case 116: goto st422;
	}
	goto tr1004;
st422:
	if ( ++p == pe )
		goto _test_eof422;
case 422:
	switch( (*p) ) {
		case 82: goto st423;
		case 114: goto st423;
	}
	goto tr1004;
st423:
	if ( ++p == pe )
		goto _test_eof423;
case 423:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1351;
		case 32: goto tr1351;
		case 40: goto tr1352;
		case 41: goto tr1353;
		case 2058: goto tr1354;
		case 2107: goto tr1355;
		case 2314: goto tr1356;
		case 2363: goto tr1356;
		case 2570: goto tr1357;
		case 2619: goto tr1358;
	}
	goto tr1004;
st424:
	if ( ++p == pe )
		goto _test_eof424;
case 424:
	switch( (*p) ) {
		case 80: goto st425;
		case 82: goto st426;
		case 84: goto st430;
		case 112: goto st425;
		case 114: goto st426;
		case 116: goto st430;
	}
	goto tr1004;
st425:
	if ( ++p == pe )
		goto _test_eof425;
case 425:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1362;
		case 32: goto tr1362;
		case 40: goto tr1363;
		case 41: goto tr1364;
		case 2058: goto tr1365;
		case 2107: goto tr1366;
		case 2314: goto tr1367;
		case 2363: goto tr1367;
		case 2570: goto tr1368;
		case 2619: goto tr1369;
	}
	goto tr1004;
st426:
	if ( ++p == pe )
		goto _test_eof426;
case 426:
	switch( (*p) ) {
		case 83: goto st427;
		case 115: goto st427;
	}
	goto tr1004;
st427:
	if ( ++p == pe )
		goto _test_eof427;
case 427:
	switch( (*p) ) {
		case 73: goto st428;
		case 105: goto st428;
	}
	goto tr1004;
st428:
	if ( ++p == pe )
		goto _test_eof428;
case 428:
	switch( (*p) ) {
		case 71: goto st429;
		case 103: goto st429;
	}
	goto tr1004;
st429:
	if ( ++p == pe )
		goto _test_eof429;
case 429:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1373;
		case 32: goto tr1373;
		case 40: goto tr1374;
		case 41: goto tr1375;
		case 2058: goto tr1376;
		case 2107: goto tr1377;
		case 2314: goto tr1378;
		case 2363: goto tr1378;
		case 2570: goto tr1379;
		case 2619: goto tr1380;
	}
	goto tr1004;
st430:
	if ( ++p == pe )
		goto _test_eof430;
case 430:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1381;
		case 32: goto tr1381;
		case 40: goto tr1382;
		case 41: goto tr1383;
		case 2058: goto tr1384;
		case 2107: goto tr1385;
		case 2314: goto tr1386;
		case 2363: goto tr1386;
		case 2570: goto tr1387;
		case 2619: goto tr1388;
	}
	goto tr1004;
st431:
	if ( ++p == pe )
		goto _test_eof431;
case 431:
	switch( (*p) ) {
		case 79: goto st432;
		case 80: goto st434;
		case 82: goto st436;
		case 83: goto st438;
		case 111: goto st432;
		case 112: goto st434;
		case 114: goto st436;
		case 115: goto st438;
	}
	goto tr1004;
st432:
	if ( ++p == pe )
		goto _test_eof432;
case 432:
	switch( (*p) ) {
		case 65: goto st433;
		case 97: goto st433;
	}
	goto tr1004;
st433:
	if ( ++p == pe )
		goto _test_eof433;
case 433:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1394;
		case 32: goto tr1394;
		case 40: goto tr1395;
		case 41: goto tr1396;
		case 2058: goto tr1397;
		case 2107: goto tr1398;
		case 2314: goto tr1399;
		case 2363: goto tr1399;
		case 2570: goto tr1400;
		case 2619: goto tr1401;
	}
	goto tr1004;
st434:
	if ( ++p == pe )
		goto _test_eof434;
case 434:
	switch( (*p) ) {
		case 70: goto st435;
		case 102: goto st435;
	}
	goto tr1004;
st435:
	if ( ++p == pe )
		goto _test_eof435;
case 435:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1403;
		case 32: goto tr1403;
		case 40: goto tr1404;
		case 41: goto tr1405;
		case 2058: goto tr1406;
		case 2107: goto tr1407;
		case 2314: goto tr1408;
		case 2363: goto tr1408;
		case 2570: goto tr1409;
		case 2619: goto tr1410;
	}
	goto tr1004;
st436:
	if ( ++p == pe )
		goto _test_eof436;
case 436:
	switch( (*p) ) {
		case 86: goto st437;
		case 118: goto st437;
	}
	goto tr1004;
st437:
	if ( ++p == pe )
		goto _test_eof437;
case 437:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1412;
		case 32: goto tr1412;
		case 40: goto tr1413;
		case 41: goto tr1414;
		case 2058: goto tr1415;
		case 2107: goto tr1416;
		case 2314: goto tr1417;
		case 2363: goto tr1417;
		case 2570: goto tr1418;
		case 2619: goto tr1419;
	}
	goto tr1004;
st438:
	if ( ++p == pe )
		goto _test_eof438;
case 438:
	switch( (*p) ) {
		case 72: goto st439;
		case 104: goto st439;
	}
	goto tr1004;
st439:
	if ( ++p == pe )
		goto _test_eof439;
case 439:
	switch( (*p) ) {
		case 70: goto st440;
		case 102: goto st440;
	}
	goto tr1004;
st440:
	if ( ++p == pe )
		goto _test_eof440;
case 440:
	switch( (*p) ) {
		case 80: goto st441;
		case 112: goto st441;
	}
	goto tr1004;
st441:
	if ( ++p == pe )
		goto _test_eof441;
case 441:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1423;
		case 32: goto tr1423;
		case 40: goto tr1424;
		case 41: goto tr1425;
		case 2058: goto tr1426;
		case 2107: goto tr1427;
		case 2314: goto tr1428;
		case 2363: goto tr1428;
		case 2570: goto tr1429;
		case 2619: goto tr1430;
	}
	goto tr1004;
st442:
	if ( ++p == pe )
		goto _test_eof442;
case 442:
	switch( (*p) ) {
		case 76: goto st443;
		case 88: goto st446;
		case 89: goto st448;
		case 108: goto st443;
		case 120: goto st446;
		case 121: goto st448;
	}
	goto tr1004;
st443:
	if ( ++p == pe )
		goto _test_eof443;
case 443:
	switch( (*p) ) {
		case 83: goto st444;
		case 115: goto st444;
	}
	goto tr1004;
st444:
	if ( ++p == pe )
		goto _test_eof444;
case 444:
	switch( (*p) ) {
		case 65: goto st445;
		case 97: goto st445;
	}
	goto tr1004;
st445:
	if ( ++p == pe )
		goto _test_eof445;
case 445:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1436;
		case 32: goto tr1436;
		case 40: goto tr1437;
		case 41: goto tr1438;
		case 2058: goto tr1439;
		case 2107: goto tr1440;
		case 2314: goto tr1441;
		case 2363: goto tr1441;
		case 2570: goto tr1442;
		case 2619: goto tr1443;
	}
	goto tr1004;
st446:
	if ( ++p == pe )
		goto _test_eof446;
case 446:
	switch( (*p) ) {
		case 84: goto st447;
		case 116: goto st447;
	}
	goto tr1004;
st447:
	if ( ++p == pe )
		goto _test_eof447;
case 447:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1445;
		case 32: goto tr1445;
		case 40: goto tr1446;
		case 41: goto tr1447;
		case 2058: goto tr1448;
		case 2107: goto tr1449;
		case 2314: goto tr1450;
		case 2363: goto tr1450;
		case 2570: goto tr1451;
		case 2619: goto tr1452;
	}
	goto tr1004;
st448:
	if ( ++p == pe )
		goto _test_eof448;
case 448:
	switch( (*p) ) {
		case 80: goto st449;
		case 112: goto st449;
	}
	goto tr1004;
st449:
	if ( ++p == pe )
		goto _test_eof449;
case 449:
	switch( (*p) ) {
		case 69: goto st450;
		case 101: goto st450;
	}
	goto tr1004;
st450:
	if ( ++p == pe )
		goto _test_eof450;
case 450:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1455;
	goto tr1004;
tr1455:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st451;
tr1459:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st451;
st451:
	if ( ++p == pe )
		goto _test_eof451;
case 451:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1456;
		case 32: goto tr1456;
		case 40: goto tr1457;
		case 41: goto tr1458;
		case 2058: goto tr1460;
		case 2107: goto tr1461;
		case 2314: goto tr1462;
		case 2363: goto tr1462;
		case 2570: goto tr1463;
		case 2619: goto tr1464;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1459;
	goto tr1004;
st452:
	if ( ++p == pe )
		goto _test_eof452;
case 452:
	switch( (*p) ) {
		case 82: goto st453;
		case 114: goto st453;
	}
	goto tr1004;
st453:
	if ( ++p == pe )
		goto _test_eof453;
case 453:
	switch( (*p) ) {
		case 73: goto st454;
		case 105: goto st454;
	}
	goto tr1004;
st454:
	if ( ++p == pe )
		goto _test_eof454;
case 454:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1467;
		case 32: goto tr1467;
		case 40: goto tr1468;
		case 41: goto tr1469;
		case 2058: goto tr1470;
		case 2107: goto tr1471;
		case 2314: goto tr1472;
		case 2363: goto tr1472;
		case 2570: goto tr1473;
		case 2619: goto tr1474;
	}
	goto tr1004;
st455:
	if ( ++p == pe )
		goto _test_eof455;
case 455:
	switch( (*p) ) {
		case 83: goto st456;
		case 115: goto st456;
	}
	goto tr1004;
st456:
	if ( ++p == pe )
		goto _test_eof456;
case 456:
	switch( (*p) ) {
		case 68: goto st457;
		case 100: goto st457;
	}
	goto tr1004;
st457:
	if ( ++p == pe )
		goto _test_eof457;
case 457:
	switch( (*p) ) {
		case 66: goto st458;
		case 98: goto st458;
	}
	goto tr1004;
st458:
	if ( ++p == pe )
		goto _test_eof458;
case 458:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1478;
		case 32: goto tr1478;
		case 40: goto tr1479;
		case 41: goto tr1480;
		case 2058: goto tr1481;
		case 2107: goto tr1482;
		case 2314: goto tr1483;
		case 2363: goto tr1483;
		case 2570: goto tr1484;
		case 2619: goto tr1485;
	}
	goto tr1004;
st459:
	if ( ++p == pe )
		goto _test_eof459;
case 459:
	switch( (*p) ) {
		case 76: goto st460;
		case 108: goto st460;
	}
	goto tr1004;
st460:
	if ( ++p == pe )
		goto _test_eof460;
case 460:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1487;
		case 32: goto tr1487;
		case 40: goto tr1488;
		case 41: goto tr1489;
		case 2058: goto tr1490;
		case 2107: goto tr1491;
		case 2314: goto tr1492;
		case 2363: goto tr1492;
		case 2570: goto tr1493;
		case 2619: goto tr1494;
	}
	goto tr1004;
st461:
	if ( ++p == pe )
		goto _test_eof461;
case 461:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st462;
		case 32: goto st462;
		case 40: goto tr1497;
		case 41: goto tr1498;
		case 1034: goto tr1499;
		case 1083: goto st469;
	}
	goto tr1495;
tr1497:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st462;
tr1498:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st462;
tr1499:
	{
		s->line_counter++;
	}
	goto st462;
st462:
	if ( ++p == pe )
		goto _test_eof462;
case 462:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st462;
		case 32: goto st462;
		case 40: goto tr1497;
		case 41: goto tr1498;
		case 1034: goto tr1499;
		case 1083: goto st469;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1502;
	goto tr1501;
tr1502:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st463;
tr1506:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st463;
st463:
	if ( ++p == pe )
		goto _test_eof463;
case 463:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1503;
		case 32: goto tr1503;
		case 40: goto tr1504;
		case 41: goto tr1505;
		case 1034: goto tr1507;
		case 1083: goto tr1508;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1506;
	goto tr1501;
tr1511:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st464;
tr1512:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st464;
tr1514:
	{
		s->line_counter++;
	}
	goto st464;
tr1503:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st464;
tr1504:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st464;
tr1505:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st464;
tr1507:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st464;
st464:
	if ( ++p == pe )
		goto _test_eof464;
case 464:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st464;
		case 32: goto st464;
		case 40: goto tr1511;
		case 41: goto tr1512;
		case 1034: goto tr1514;
		case 1083: goto st468;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1513;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1513;
	} else
		goto tr1513;
	goto tr1509;
tr1513:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st465;
st465:
	if ( ++p == pe )
		goto _test_eof465;
case 465:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1516;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr1516;
	} else
		goto tr1516;
	goto tr1509;
tr1518:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st466;
tr1519:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st466;
tr1520:
	{
		s->line_counter++;
	}
	goto st466;
tr1516:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st466;
st466:
	if ( ++p == pe )
		goto _test_eof466;
case 466:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st466;
		case 32: goto st466;
		case 40: goto tr1518;
		case 41: goto tr1519;
		case 2058: goto tr1520;
		case 2107: goto st467;
		case 2314: goto tr1522;
		case 2363: goto tr1522;
		case 2570: goto tr1523;
		case 2619: goto tr1524;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1513;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1513;
	} else
		goto tr1513;
	goto tr1509;
st467:
	if ( ++p == pe )
		goto _test_eof467;
case 467:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1520;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st467;
	goto tr1509;
tr1522:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1135;
st1135:
	if ( ++p == pe )
		goto _test_eof1135;
case 1135:
	goto st0;
tr1523:
	{
		s->line_counter++;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1136;
st1136:
	if ( ++p == pe )
		goto _test_eof1136;
case 1136:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st466;
		case 32: goto st466;
		case 40: goto tr1518;
		case 41: goto tr1519;
		case 2058: goto tr1520;
		case 2107: goto st467;
		case 2314: goto tr1522;
		case 2363: goto tr1522;
		case 2570: goto tr1523;
		case 2619: goto tr1524;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1513;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1513;
	} else
		goto tr1513;
	goto tr1509;
tr1524:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1137;
st1137:
	if ( ++p == pe )
		goto _test_eof1137;
case 1137:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1520;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st467;
	goto tr1509;
tr1508:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st468;
st468:
	if ( ++p == pe )
		goto _test_eof468;
case 468:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1514;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st468;
	goto tr1495;
st469:
	if ( ++p == pe )
		goto _test_eof469;
case 469:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1499;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st469;
	goto tr1495;
st470:
	if ( ++p == pe )
		goto _test_eof470;
case 470:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st471;
		case 32: goto st471;
		case 40: goto tr1526;
		case 41: goto tr1527;
		case 1034: goto tr1528;
		case 1083: goto st479;
	}
	goto tr1495;
tr1526:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st471;
tr1527:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st471;
tr1528:
	{
		s->line_counter++;
	}
	goto st471;
st471:
	if ( ++p == pe )
		goto _test_eof471;
case 471:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st471;
		case 32: goto st471;
		case 40: goto tr1526;
		case 41: goto tr1527;
		case 48: goto tr1530;
		case 1034: goto tr1528;
		case 1083: goto st479;
	}
	if ( 49 <= _widec && _widec <= 57 )
		goto tr1531;
	goto tr1501;
tr1530:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st472;
st472:
	if ( ++p == pe )
		goto _test_eof472;
case 472:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1532;
		case 32: goto tr1532;
		case 40: goto tr1533;
		case 41: goto tr1534;
		case 778: goto tr1536;
		case 827: goto tr1536;
		case 1034: goto tr1537;
		case 1083: goto tr1538;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1535;
	goto tr1501;
tr1532:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1138;
tr1533:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1138;
tr1534:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1138;
tr1537:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1138;
st1138:
	if ( ++p == pe )
		goto _test_eof1138;
case 1138:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st473;
		case 32: goto st473;
		case 40: goto tr1540;
		case 41: goto tr1541;
		case 1034: goto tr1543;
		case 1083: goto st477;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1542;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1542;
	} else
		goto tr1542;
	goto tr1509;
tr1540:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st473;
tr1541:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st473;
tr1543:
	{
		s->line_counter++;
	}
	goto st473;
tr1554:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st473;
tr1555:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st473;
tr1556:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st473;
tr1557:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st473;
st473:
	if ( ++p == pe )
		goto _test_eof473;
case 473:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st473;
		case 32: goto st473;
		case 40: goto tr1540;
		case 41: goto tr1541;
		case 1034: goto tr1543;
		case 1083: goto st477;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1542;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1542;
	} else
		goto tr1542;
	goto tr1509;
tr1542:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st474;
st474:
	if ( ++p == pe )
		goto _test_eof474;
case 474:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1545;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr1545;
	} else
		goto tr1545;
	goto tr1509;
tr1547:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st475;
tr1548:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st475;
tr1549:
	{
		s->line_counter++;
	}
	goto st475;
tr1545:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st475;
st475:
	if ( ++p == pe )
		goto _test_eof475;
case 475:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st475;
		case 32: goto st475;
		case 40: goto tr1547;
		case 41: goto tr1548;
		case 2058: goto tr1549;
		case 2107: goto st476;
		case 2314: goto tr1551;
		case 2363: goto tr1551;
		case 2570: goto tr1552;
		case 2619: goto tr1553;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1542;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1542;
	} else
		goto tr1542;
	goto tr1509;
st476:
	if ( ++p == pe )
		goto _test_eof476;
case 476:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1549;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st476;
	goto tr1509;
tr1536:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1139;
tr1551:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1139;
st1139:
	if ( ++p == pe )
		goto _test_eof1139;
case 1139:
	goto tr1495;
tr1552:
	{
		s->line_counter++;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1140;
st1140:
	if ( ++p == pe )
		goto _test_eof1140;
case 1140:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st475;
		case 32: goto st475;
		case 40: goto tr1547;
		case 41: goto tr1548;
		case 2058: goto tr1549;
		case 2107: goto st476;
		case 2314: goto tr1551;
		case 2363: goto tr1551;
		case 2570: goto tr1552;
		case 2619: goto tr1553;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1542;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1542;
	} else
		goto tr1542;
	goto tr1509;
tr1553:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1141;
st1141:
	if ( ++p == pe )
		goto _test_eof1141;
case 1141:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1549;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st476;
	goto tr1509;
tr1558:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st477;
st477:
	if ( ++p == pe )
		goto _test_eof477;
case 477:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1543;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st477;
	goto tr1495;
tr1531:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st478;
tr1535:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st478;
st478:
	if ( ++p == pe )
		goto _test_eof478;
case 478:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1554;
		case 32: goto tr1554;
		case 40: goto tr1555;
		case 41: goto tr1556;
		case 1034: goto tr1557;
		case 1083: goto tr1558;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1535;
	goto tr1501;
tr1538:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1142;
st1142:
	if ( ++p == pe )
		goto _test_eof1142;
case 1142:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1543;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st477;
	goto tr1495;
st479:
	if ( ++p == pe )
		goto _test_eof479;
case 479:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1528;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st479;
	goto tr1495;
st480:
	if ( ++p == pe )
		goto _test_eof480;
case 480:
	switch( (*p) ) {
		case 68: goto st482;
		case 69: goto st497;
		case 73: goto st527;
		case 80: goto st535;
		case 82: goto st548;
		case 100: goto st482;
		case 101: goto st497;
		case 105: goto st527;
		case 112: goto st535;
		case 114: goto st548;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1560;
	goto tr1559;
tr1560:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st481;
tr1567:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st481;
st481:
	if ( ++p == pe )
		goto _test_eof481;
case 481:
	switch( (*p) ) {
		case 32: goto tr1566;
		case 59: goto tr1566;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1566;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1567;
	} else
		goto tr1566;
	goto tr1559;
tr1566:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1570:
	{
		*(rdata_tail++) = 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1572:
	{
		*(rdata_tail++) = 3;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1584:
	{
		*(rdata_tail++) = 6;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1593:
	{
		*(rdata_tail++) = 12;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1607:
	{
		*(rdata_tail++) = 13;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1616:
	{
		*(rdata_tail++) = 14;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1624:
	{
		*(rdata_tail++) = 252;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1635:
	{
		*(rdata_tail++) = 253;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1638:
	{
		*(rdata_tail++) = 254;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1645:
	{
		*(rdata_tail++) = 1;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1651:
	{
		*(rdata_tail++) = 5;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1663:
	{
		*(rdata_tail++) = 7;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1666:
	{
		*(rdata_tail++) = 8;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
tr1669:
	{
		*(rdata_tail++) = 10;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1143;
st1143:
	if ( ++p == pe )
		goto _test_eof1143;
case 1143:
	goto st0;
st482:
	if ( ++p == pe )
		goto _test_eof482;
case 482:
	switch( (*p) ) {
		case 72: goto st483;
		case 83: goto st484;
		case 104: goto st483;
		case 115: goto st484;
	}
	goto tr1559;
st483:
	if ( ++p == pe )
		goto _test_eof483;
case 483:
	switch( (*p) ) {
		case 32: goto tr1570;
		case 59: goto tr1570;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1570;
	} else if ( (*p) >= 9 )
		goto tr1570;
	goto tr1559;
st484:
	if ( ++p == pe )
		goto _test_eof484;
case 484:
	switch( (*p) ) {
		case 65: goto st485;
		case 97: goto st485;
	}
	goto tr1559;
st485:
	if ( ++p == pe )
		goto _test_eof485;
case 485:
	switch( (*p) ) {
		case 32: goto tr1572;
		case 45: goto st486;
		case 59: goto tr1572;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1572;
	} else if ( (*p) >= 9 )
		goto tr1572;
	goto tr1559;
st486:
	if ( ++p == pe )
		goto _test_eof486;
case 486:
	switch( (*p) ) {
		case 78: goto st487;
		case 110: goto st487;
	}
	goto tr1559;
st487:
	if ( ++p == pe )
		goto _test_eof487;
case 487:
	switch( (*p) ) {
		case 83: goto st488;
		case 115: goto st488;
	}
	goto tr1559;
st488:
	if ( ++p == pe )
		goto _test_eof488;
case 488:
	switch( (*p) ) {
		case 69: goto st489;
		case 101: goto st489;
	}
	goto tr1559;
st489:
	if ( ++p == pe )
		goto _test_eof489;
case 489:
	switch( (*p) ) {
		case 67: goto st490;
		case 99: goto st490;
	}
	goto tr1559;
st490:
	if ( ++p == pe )
		goto _test_eof490;
case 490:
	if ( (*p) == 51 )
		goto st491;
	goto tr1559;
st491:
	if ( ++p == pe )
		goto _test_eof491;
case 491:
	if ( (*p) == 45 )
		goto st492;
	goto tr1559;
st492:
	if ( ++p == pe )
		goto _test_eof492;
case 492:
	switch( (*p) ) {
		case 83: goto st493;
		case 115: goto st493;
	}
	goto tr1559;
st493:
	if ( ++p == pe )
		goto _test_eof493;
case 493:
	switch( (*p) ) {
		case 72: goto st494;
		case 104: goto st494;
	}
	goto tr1559;
st494:
	if ( ++p == pe )
		goto _test_eof494;
case 494:
	switch( (*p) ) {
		case 65: goto st495;
		case 97: goto st495;
	}
	goto tr1559;
st495:
	if ( ++p == pe )
		goto _test_eof495;
case 495:
	if ( (*p) == 49 )
		goto st496;
	goto tr1559;
st496:
	if ( ++p == pe )
		goto _test_eof496;
case 496:
	switch( (*p) ) {
		case 32: goto tr1584;
		case 59: goto tr1584;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1584;
	} else if ( (*p) >= 9 )
		goto tr1584;
	goto tr1559;
st497:
	if ( ++p == pe )
		goto _test_eof497;
case 497:
	switch( (*p) ) {
		case 67: goto st498;
		case 99: goto st498;
	}
	goto tr1559;
st498:
	if ( ++p == pe )
		goto _test_eof498;
case 498:
	switch( (*p) ) {
		case 67: goto st499;
		case 68: goto st505;
		case 99: goto st499;
		case 100: goto st505;
	}
	goto tr1559;
st499:
	if ( ++p == pe )
		goto _test_eof499;
case 499:
	if ( (*p) == 45 )
		goto st500;
	goto tr1559;
st500:
	if ( ++p == pe )
		goto _test_eof500;
case 500:
	switch( (*p) ) {
		case 71: goto st501;
		case 103: goto st501;
	}
	goto tr1559;
st501:
	if ( ++p == pe )
		goto _test_eof501;
case 501:
	switch( (*p) ) {
		case 79: goto st502;
		case 111: goto st502;
	}
	goto tr1559;
st502:
	if ( ++p == pe )
		goto _test_eof502;
case 502:
	switch( (*p) ) {
		case 83: goto st503;
		case 115: goto st503;
	}
	goto tr1559;
st503:
	if ( ++p == pe )
		goto _test_eof503;
case 503:
	switch( (*p) ) {
		case 84: goto st504;
		case 116: goto st504;
	}
	goto tr1559;
st504:
	if ( ++p == pe )
		goto _test_eof504;
case 504:
	switch( (*p) ) {
		case 32: goto tr1593;
		case 59: goto tr1593;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1593;
	} else if ( (*p) >= 9 )
		goto tr1593;
	goto tr1559;
st505:
	if ( ++p == pe )
		goto _test_eof505;
case 505:
	switch( (*p) ) {
		case 83: goto st506;
		case 115: goto st506;
	}
	goto tr1559;
st506:
	if ( ++p == pe )
		goto _test_eof506;
case 506:
	switch( (*p) ) {
		case 65: goto st507;
		case 97: goto st507;
	}
	goto tr1559;
st507:
	if ( ++p == pe )
		goto _test_eof507;
case 507:
	switch( (*p) ) {
		case 80: goto st508;
		case 112: goto st508;
	}
	goto tr1559;
st508:
	if ( ++p == pe )
		goto _test_eof508;
case 508:
	switch( (*p) ) {
		case 50: goto st509;
		case 51: goto st518;
	}
	goto tr1559;
st509:
	if ( ++p == pe )
		goto _test_eof509;
case 509:
	if ( (*p) == 53 )
		goto st510;
	goto tr1559;
st510:
	if ( ++p == pe )
		goto _test_eof510;
case 510:
	if ( (*p) == 54 )
		goto st511;
	goto tr1559;
st511:
	if ( ++p == pe )
		goto _test_eof511;
case 511:
	switch( (*p) ) {
		case 83: goto st512;
		case 115: goto st512;
	}
	goto tr1559;
st512:
	if ( ++p == pe )
		goto _test_eof512;
case 512:
	switch( (*p) ) {
		case 72: goto st513;
		case 104: goto st513;
	}
	goto tr1559;
st513:
	if ( ++p == pe )
		goto _test_eof513;
case 513:
	switch( (*p) ) {
		case 65: goto st514;
		case 97: goto st514;
	}
	goto tr1559;
st514:
	if ( ++p == pe )
		goto _test_eof514;
case 514:
	if ( (*p) == 50 )
		goto st515;
	goto tr1559;
st515:
	if ( ++p == pe )
		goto _test_eof515;
case 515:
	if ( (*p) == 53 )
		goto st516;
	goto tr1559;
st516:
	if ( ++p == pe )
		goto _test_eof516;
case 516:
	if ( (*p) == 54 )
		goto st517;
	goto tr1559;
st517:
	if ( ++p == pe )
		goto _test_eof517;
case 517:
	switch( (*p) ) {
		case 32: goto tr1607;
		case 59: goto tr1607;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1607;
	} else if ( (*p) >= 9 )
		goto tr1607;
	goto tr1559;
st518:
	if ( ++p == pe )
		goto _test_eof518;
case 518:
	if ( (*p) == 56 )
		goto st519;
	goto tr1559;
st519:
	if ( ++p == pe )
		goto _test_eof519;
case 519:
	if ( (*p) == 52 )
		goto st520;
	goto tr1559;
st520:
	if ( ++p == pe )
		goto _test_eof520;
case 520:
	switch( (*p) ) {
		case 83: goto st521;
		case 115: goto st521;
	}
	goto tr1559;
st521:
	if ( ++p == pe )
		goto _test_eof521;
case 521:
	switch( (*p) ) {
		case 72: goto st522;
		case 104: goto st522;
	}
	goto tr1559;
st522:
	if ( ++p == pe )
		goto _test_eof522;
case 522:
	switch( (*p) ) {
		case 65: goto st523;
		case 97: goto st523;
	}
	goto tr1559;
st523:
	if ( ++p == pe )
		goto _test_eof523;
case 523:
	if ( (*p) == 51 )
		goto st524;
	goto tr1559;
st524:
	if ( ++p == pe )
		goto _test_eof524;
case 524:
	if ( (*p) == 56 )
		goto st525;
	goto tr1559;
st525:
	if ( ++p == pe )
		goto _test_eof525;
case 525:
	if ( (*p) == 52 )
		goto st526;
	goto tr1559;
st526:
	if ( ++p == pe )
		goto _test_eof526;
case 526:
	switch( (*p) ) {
		case 32: goto tr1616;
		case 59: goto tr1616;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1616;
	} else if ( (*p) >= 9 )
		goto tr1616;
	goto tr1559;
st527:
	if ( ++p == pe )
		goto _test_eof527;
case 527:
	switch( (*p) ) {
		case 78: goto st528;
		case 110: goto st528;
	}
	goto tr1559;
st528:
	if ( ++p == pe )
		goto _test_eof528;
case 528:
	switch( (*p) ) {
		case 68: goto st529;
		case 100: goto st529;
	}
	goto tr1559;
st529:
	if ( ++p == pe )
		goto _test_eof529;
case 529:
	switch( (*p) ) {
		case 73: goto st530;
		case 105: goto st530;
	}
	goto tr1559;
st530:
	if ( ++p == pe )
		goto _test_eof530;
case 530:
	switch( (*p) ) {
		case 82: goto st531;
		case 114: goto st531;
	}
	goto tr1559;
st531:
	if ( ++p == pe )
		goto _test_eof531;
case 531:
	switch( (*p) ) {
		case 69: goto st532;
		case 101: goto st532;
	}
	goto tr1559;
st532:
	if ( ++p == pe )
		goto _test_eof532;
case 532:
	switch( (*p) ) {
		case 67: goto st533;
		case 99: goto st533;
	}
	goto tr1559;
st533:
	if ( ++p == pe )
		goto _test_eof533;
case 533:
	switch( (*p) ) {
		case 84: goto st534;
		case 116: goto st534;
	}
	goto tr1559;
st534:
	if ( ++p == pe )
		goto _test_eof534;
case 534:
	switch( (*p) ) {
		case 32: goto tr1624;
		case 59: goto tr1624;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1624;
	} else if ( (*p) >= 9 )
		goto tr1624;
	goto tr1559;
st535:
	if ( ++p == pe )
		goto _test_eof535;
case 535:
	switch( (*p) ) {
		case 82: goto st536;
		case 114: goto st536;
	}
	goto tr1559;
st536:
	if ( ++p == pe )
		goto _test_eof536;
case 536:
	switch( (*p) ) {
		case 73: goto st537;
		case 105: goto st537;
	}
	goto tr1559;
st537:
	if ( ++p == pe )
		goto _test_eof537;
case 537:
	switch( (*p) ) {
		case 86: goto st538;
		case 118: goto st538;
	}
	goto tr1559;
st538:
	if ( ++p == pe )
		goto _test_eof538;
case 538:
	switch( (*p) ) {
		case 65: goto st539;
		case 97: goto st539;
	}
	goto tr1559;
st539:
	if ( ++p == pe )
		goto _test_eof539;
case 539:
	switch( (*p) ) {
		case 84: goto st540;
		case 116: goto st540;
	}
	goto tr1559;
st540:
	if ( ++p == pe )
		goto _test_eof540;
case 540:
	switch( (*p) ) {
		case 69: goto st541;
		case 101: goto st541;
	}
	goto tr1559;
st541:
	if ( ++p == pe )
		goto _test_eof541;
case 541:
	switch( (*p) ) {
		case 68: goto st542;
		case 79: goto st545;
		case 100: goto st542;
		case 111: goto st545;
	}
	goto tr1559;
st542:
	if ( ++p == pe )
		goto _test_eof542;
case 542:
	switch( (*p) ) {
		case 78: goto st543;
		case 110: goto st543;
	}
	goto tr1559;
st543:
	if ( ++p == pe )
		goto _test_eof543;
case 543:
	switch( (*p) ) {
		case 83: goto st544;
		case 115: goto st544;
	}
	goto tr1559;
st544:
	if ( ++p == pe )
		goto _test_eof544;
case 544:
	switch( (*p) ) {
		case 32: goto tr1635;
		case 59: goto tr1635;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1635;
	} else if ( (*p) >= 9 )
		goto tr1635;
	goto tr1559;
st545:
	if ( ++p == pe )
		goto _test_eof545;
case 545:
	switch( (*p) ) {
		case 73: goto st546;
		case 105: goto st546;
	}
	goto tr1559;
st546:
	if ( ++p == pe )
		goto _test_eof546;
case 546:
	switch( (*p) ) {
		case 68: goto st547;
		case 100: goto st547;
	}
	goto tr1559;
st547:
	if ( ++p == pe )
		goto _test_eof547;
case 547:
	switch( (*p) ) {
		case 32: goto tr1638;
		case 59: goto tr1638;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1638;
	} else if ( (*p) >= 9 )
		goto tr1638;
	goto tr1559;
st548:
	if ( ++p == pe )
		goto _test_eof548;
case 548:
	switch( (*p) ) {
		case 83: goto st549;
		case 115: goto st549;
	}
	goto tr1559;
st549:
	if ( ++p == pe )
		goto _test_eof549;
case 549:
	switch( (*p) ) {
		case 65: goto st550;
		case 97: goto st550;
	}
	goto tr1559;
st550:
	if ( ++p == pe )
		goto _test_eof550;
case 550:
	switch( (*p) ) {
		case 77: goto st551;
		case 83: goto st554;
		case 109: goto st551;
		case 115: goto st554;
	}
	goto tr1559;
st551:
	if ( ++p == pe )
		goto _test_eof551;
case 551:
	switch( (*p) ) {
		case 68: goto st552;
		case 100: goto st552;
	}
	goto tr1559;
st552:
	if ( ++p == pe )
		goto _test_eof552;
case 552:
	if ( (*p) == 53 )
		goto st553;
	goto tr1559;
st553:
	if ( ++p == pe )
		goto _test_eof553;
case 553:
	switch( (*p) ) {
		case 32: goto tr1645;
		case 59: goto tr1645;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1645;
	} else if ( (*p) >= 9 )
		goto tr1645;
	goto tr1559;
st554:
	if ( ++p == pe )
		goto _test_eof554;
case 554:
	switch( (*p) ) {
		case 72: goto st555;
		case 104: goto st555;
	}
	goto tr1559;
st555:
	if ( ++p == pe )
		goto _test_eof555;
case 555:
	switch( (*p) ) {
		case 65: goto st556;
		case 97: goto st556;
	}
	goto tr1559;
st556:
	if ( ++p == pe )
		goto _test_eof556;
case 556:
	switch( (*p) ) {
		case 49: goto st557;
		case 50: goto st569;
		case 53: goto st572;
	}
	goto tr1559;
st557:
	if ( ++p == pe )
		goto _test_eof557;
case 557:
	switch( (*p) ) {
		case 32: goto tr1651;
		case 45: goto st558;
		case 59: goto tr1651;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1651;
	} else if ( (*p) >= 9 )
		goto tr1651;
	goto tr1559;
st558:
	if ( ++p == pe )
		goto _test_eof558;
case 558:
	switch( (*p) ) {
		case 78: goto st559;
		case 110: goto st559;
	}
	goto tr1559;
st559:
	if ( ++p == pe )
		goto _test_eof559;
case 559:
	switch( (*p) ) {
		case 83: goto st560;
		case 115: goto st560;
	}
	goto tr1559;
st560:
	if ( ++p == pe )
		goto _test_eof560;
case 560:
	switch( (*p) ) {
		case 69: goto st561;
		case 101: goto st561;
	}
	goto tr1559;
st561:
	if ( ++p == pe )
		goto _test_eof561;
case 561:
	switch( (*p) ) {
		case 67: goto st562;
		case 99: goto st562;
	}
	goto tr1559;
st562:
	if ( ++p == pe )
		goto _test_eof562;
case 562:
	if ( (*p) == 51 )
		goto st563;
	goto tr1559;
st563:
	if ( ++p == pe )
		goto _test_eof563;
case 563:
	if ( (*p) == 45 )
		goto st564;
	goto tr1559;
st564:
	if ( ++p == pe )
		goto _test_eof564;
case 564:
	switch( (*p) ) {
		case 83: goto st565;
		case 115: goto st565;
	}
	goto tr1559;
st565:
	if ( ++p == pe )
		goto _test_eof565;
case 565:
	switch( (*p) ) {
		case 72: goto st566;
		case 104: goto st566;
	}
	goto tr1559;
st566:
	if ( ++p == pe )
		goto _test_eof566;
case 566:
	switch( (*p) ) {
		case 65: goto st567;
		case 97: goto st567;
	}
	goto tr1559;
st567:
	if ( ++p == pe )
		goto _test_eof567;
case 567:
	if ( (*p) == 49 )
		goto st568;
	goto tr1559;
st568:
	if ( ++p == pe )
		goto _test_eof568;
case 568:
	switch( (*p) ) {
		case 32: goto tr1663;
		case 59: goto tr1663;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1663;
	} else if ( (*p) >= 9 )
		goto tr1663;
	goto tr1559;
st569:
	if ( ++p == pe )
		goto _test_eof569;
case 569:
	if ( (*p) == 53 )
		goto st570;
	goto tr1559;
st570:
	if ( ++p == pe )
		goto _test_eof570;
case 570:
	if ( (*p) == 54 )
		goto st571;
	goto tr1559;
st571:
	if ( ++p == pe )
		goto _test_eof571;
case 571:
	switch( (*p) ) {
		case 32: goto tr1666;
		case 59: goto tr1666;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1666;
	} else if ( (*p) >= 9 )
		goto tr1666;
	goto tr1559;
st572:
	if ( ++p == pe )
		goto _test_eof572;
case 572:
	if ( (*p) == 49 )
		goto st573;
	goto tr1559;
st573:
	if ( ++p == pe )
		goto _test_eof573;
case 573:
	if ( (*p) == 50 )
		goto st574;
	goto tr1559;
st574:
	if ( ++p == pe )
		goto _test_eof574;
case 574:
	switch( (*p) ) {
		case 32: goto tr1669;
		case 59: goto tr1669;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1669;
	} else if ( (*p) >= 9 )
		goto tr1669;
	goto tr1559;
st575:
	if ( ++p == pe )
		goto _test_eof575;
case 575:
	switch( (*p) ) {
		case 65: goto st577;
		case 73: goto st583;
		case 79: goto st600;
		case 80: goto st603;
		case 83: goto st609;
		case 85: goto st613;
		case 97: goto st577;
		case 105: goto st583;
		case 111: goto st600;
		case 112: goto st603;
		case 115: goto st609;
		case 117: goto st613;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1671;
	goto tr1670;
tr1671:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st576;
tr1679:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st576;
st576:
	if ( ++p == pe )
		goto _test_eof576;
case 576:
	switch( (*p) ) {
		case 32: goto tr1678;
		case 59: goto tr1678;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1678;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1679;
	} else
		goto tr1678;
	goto tr1670;
tr1678:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1685:
	{
		*((uint16_t *)rdata_tail) = htons(7);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1694:
	{
		*((uint16_t *)rdata_tail) = htons(8);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1698:
	{
		*((uint16_t *)rdata_tail) = htons(6);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1701:
	{
		*((uint16_t *)rdata_tail) = htons(4);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1705:
	{
		*((uint16_t *)rdata_tail) = htons(5);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1708:
	{
		*((uint16_t *)rdata_tail) = htons(254);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1712:
	{
		*((uint16_t *)rdata_tail) = htons(3);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1715:
	{
		*((uint16_t *)rdata_tail) = htons(1);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1719:
	{
		*((uint16_t *)rdata_tail) = htons(2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
tr1722:
	{
		*((uint16_t *)rdata_tail) = htons(253);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1144;
st1144:
	if ( ++p == pe )
		goto _test_eof1144;
case 1144:
	goto st0;
st577:
	if ( ++p == pe )
		goto _test_eof577;
case 577:
	switch( (*p) ) {
		case 67: goto st578;
		case 99: goto st578;
	}
	goto tr1670;
st578:
	if ( ++p == pe )
		goto _test_eof578;
case 578:
	switch( (*p) ) {
		case 80: goto st579;
		case 112: goto st579;
	}
	goto tr1670;
st579:
	if ( ++p == pe )
		goto _test_eof579;
case 579:
	switch( (*p) ) {
		case 75: goto st580;
		case 107: goto st580;
	}
	goto tr1670;
st580:
	if ( ++p == pe )
		goto _test_eof580;
case 580:
	switch( (*p) ) {
		case 73: goto st581;
		case 105: goto st581;
	}
	goto tr1670;
st581:
	if ( ++p == pe )
		goto _test_eof581;
case 581:
	switch( (*p) ) {
		case 88: goto st582;
		case 120: goto st582;
	}
	goto tr1670;
st582:
	if ( ++p == pe )
		goto _test_eof582;
case 582:
	switch( (*p) ) {
		case 32: goto tr1685;
		case 59: goto tr1685;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1685;
	} else if ( (*p) >= 9 )
		goto tr1685;
	goto tr1670;
st583:
	if ( ++p == pe )
		goto _test_eof583;
case 583:
	switch( (*p) ) {
		case 65: goto st584;
		case 80: goto st590;
		case 83: goto st596;
		case 97: goto st584;
		case 112: goto st590;
		case 115: goto st596;
	}
	goto tr1670;
st584:
	if ( ++p == pe )
		goto _test_eof584;
case 584:
	switch( (*p) ) {
		case 67: goto st585;
		case 99: goto st585;
	}
	goto tr1670;
st585:
	if ( ++p == pe )
		goto _test_eof585;
case 585:
	switch( (*p) ) {
		case 80: goto st586;
		case 112: goto st586;
	}
	goto tr1670;
st586:
	if ( ++p == pe )
		goto _test_eof586;
case 586:
	switch( (*p) ) {
		case 75: goto st587;
		case 107: goto st587;
	}
	goto tr1670;
st587:
	if ( ++p == pe )
		goto _test_eof587;
case 587:
	switch( (*p) ) {
		case 73: goto st588;
		case 105: goto st588;
	}
	goto tr1670;
st588:
	if ( ++p == pe )
		goto _test_eof588;
case 588:
	switch( (*p) ) {
		case 88: goto st589;
		case 120: goto st589;
	}
	goto tr1670;
st589:
	if ( ++p == pe )
		goto _test_eof589;
case 589:
	switch( (*p) ) {
		case 32: goto tr1694;
		case 59: goto tr1694;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1694;
	} else if ( (*p) >= 9 )
		goto tr1694;
	goto tr1670;
st590:
	if ( ++p == pe )
		goto _test_eof590;
case 590:
	switch( (*p) ) {
		case 71: goto st591;
		case 75: goto st593;
		case 103: goto st591;
		case 107: goto st593;
	}
	goto tr1670;
st591:
	if ( ++p == pe )
		goto _test_eof591;
case 591:
	switch( (*p) ) {
		case 80: goto st592;
		case 112: goto st592;
	}
	goto tr1670;
st592:
	if ( ++p == pe )
		goto _test_eof592;
case 592:
	switch( (*p) ) {
		case 32: goto tr1698;
		case 59: goto tr1698;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1698;
	} else if ( (*p) >= 9 )
		goto tr1698;
	goto tr1670;
st593:
	if ( ++p == pe )
		goto _test_eof593;
case 593:
	switch( (*p) ) {
		case 73: goto st594;
		case 105: goto st594;
	}
	goto tr1670;
st594:
	if ( ++p == pe )
		goto _test_eof594;
case 594:
	switch( (*p) ) {
		case 88: goto st595;
		case 120: goto st595;
	}
	goto tr1670;
st595:
	if ( ++p == pe )
		goto _test_eof595;
case 595:
	switch( (*p) ) {
		case 32: goto tr1701;
		case 59: goto tr1701;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1701;
	} else if ( (*p) >= 9 )
		goto tr1701;
	goto tr1670;
st596:
	if ( ++p == pe )
		goto _test_eof596;
case 596:
	switch( (*p) ) {
		case 80: goto st597;
		case 112: goto st597;
	}
	goto tr1670;
st597:
	if ( ++p == pe )
		goto _test_eof597;
case 597:
	switch( (*p) ) {
		case 75: goto st598;
		case 107: goto st598;
	}
	goto tr1670;
st598:
	if ( ++p == pe )
		goto _test_eof598;
case 598:
	switch( (*p) ) {
		case 73: goto st599;
		case 105: goto st599;
	}
	goto tr1670;
st599:
	if ( ++p == pe )
		goto _test_eof599;
case 599:
	switch( (*p) ) {
		case 32: goto tr1705;
		case 59: goto tr1705;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1705;
	} else if ( (*p) >= 9 )
		goto tr1705;
	goto tr1670;
st600:
	if ( ++p == pe )
		goto _test_eof600;
case 600:
	switch( (*p) ) {
		case 73: goto st601;
		case 105: goto st601;
	}
	goto tr1670;
st601:
	if ( ++p == pe )
		goto _test_eof601;
case 601:
	switch( (*p) ) {
		case 68: goto st602;
		case 100: goto st602;
	}
	goto tr1670;
st602:
	if ( ++p == pe )
		goto _test_eof602;
case 602:
	switch( (*p) ) {
		case 32: goto tr1708;
		case 59: goto tr1708;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1708;
	} else if ( (*p) >= 9 )
		goto tr1708;
	goto tr1670;
st603:
	if ( ++p == pe )
		goto _test_eof603;
case 603:
	switch( (*p) ) {
		case 71: goto st604;
		case 75: goto st606;
		case 103: goto st604;
		case 107: goto st606;
	}
	goto tr1670;
st604:
	if ( ++p == pe )
		goto _test_eof604;
case 604:
	switch( (*p) ) {
		case 80: goto st605;
		case 112: goto st605;
	}
	goto tr1670;
st605:
	if ( ++p == pe )
		goto _test_eof605;
case 605:
	switch( (*p) ) {
		case 32: goto tr1712;
		case 59: goto tr1712;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1712;
	} else if ( (*p) >= 9 )
		goto tr1712;
	goto tr1670;
st606:
	if ( ++p == pe )
		goto _test_eof606;
case 606:
	switch( (*p) ) {
		case 73: goto st607;
		case 105: goto st607;
	}
	goto tr1670;
st607:
	if ( ++p == pe )
		goto _test_eof607;
case 607:
	switch( (*p) ) {
		case 88: goto st608;
		case 120: goto st608;
	}
	goto tr1670;
st608:
	if ( ++p == pe )
		goto _test_eof608;
case 608:
	switch( (*p) ) {
		case 32: goto tr1715;
		case 59: goto tr1715;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1715;
	} else if ( (*p) >= 9 )
		goto tr1715;
	goto tr1670;
st609:
	if ( ++p == pe )
		goto _test_eof609;
case 609:
	switch( (*p) ) {
		case 80: goto st610;
		case 112: goto st610;
	}
	goto tr1670;
st610:
	if ( ++p == pe )
		goto _test_eof610;
case 610:
	switch( (*p) ) {
		case 75: goto st611;
		case 107: goto st611;
	}
	goto tr1670;
st611:
	if ( ++p == pe )
		goto _test_eof611;
case 611:
	switch( (*p) ) {
		case 73: goto st612;
		case 105: goto st612;
	}
	goto tr1670;
st612:
	if ( ++p == pe )
		goto _test_eof612;
case 612:
	switch( (*p) ) {
		case 32: goto tr1719;
		case 59: goto tr1719;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1719;
	} else if ( (*p) >= 9 )
		goto tr1719;
	goto tr1670;
st613:
	if ( ++p == pe )
		goto _test_eof613;
case 613:
	switch( (*p) ) {
		case 82: goto st614;
		case 114: goto st614;
	}
	goto tr1670;
st614:
	if ( ++p == pe )
		goto _test_eof614;
case 614:
	switch( (*p) ) {
		case 73: goto st615;
		case 105: goto st615;
	}
	goto tr1670;
st615:
	if ( ++p == pe )
		goto _test_eof615;
case 615:
	switch( (*p) ) {
		case 32: goto tr1722;
		case 59: goto tr1722;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1722;
	} else if ( (*p) >= 9 )
		goto tr1722;
	goto tr1670;
st616:
	if ( ++p == pe )
		goto _test_eof616;
case 616:
	if ( (*p) == 46 )
		goto tr1724;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1724;
	goto tr1723;
tr1724:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st617;
tr1726:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st617;
st617:
	if ( ++p == pe )
		goto _test_eof617;
case 617:
	switch( (*p) ) {
		case 32: goto tr1725;
		case 46: goto tr1726;
		case 59: goto tr1725;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1725;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1726;
	} else
		goto tr1725;
	goto tr1723;
tr1725:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1145;
st1145:
	if ( ++p == pe )
		goto _test_eof1145;
case 1145:
	goto st0;
st618:
	if ( ++p == pe )
		goto _test_eof618;
case 618:
	switch( (*p) ) {
		case 42: goto tr1727;
		case 92: goto tr1727;
		case 95: goto tr1727;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1727;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1727;
	} else
		goto tr1727;
	goto tr71;
tr1727:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 619; goto st263;} }
	goto st619;
st619:
	if ( ++p == pe )
		goto _test_eof619;
case 619:
	switch( (*p) ) {
		case 32: goto tr1728;
		case 59: goto tr1728;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1728;
	} else if ( (*p) >= 9 )
		goto tr1728;
	goto tr71;
tr1728:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1146;
st1146:
	if ( ++p == pe )
		goto _test_eof1146;
case 1146:
	goto st0;
st620:
	if ( ++p == pe )
		goto _test_eof620;
case 620:
	switch( (*p) ) {
		case 42: goto tr1729;
		case 92: goto tr1729;
		case 95: goto tr1729;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1729;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1729;
	} else
		goto tr1729;
	goto tr71;
tr1729:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 621; goto st263;} }
	goto st621;
st621:
	if ( ++p == pe )
		goto _test_eof621;
case 621:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1730;
		case 32: goto tr1730;
		case 40: goto tr1731;
		case 41: goto tr1732;
		case 1034: goto tr1733;
		case 1083: goto tr1734;
	}
	goto tr71;
tr1736:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st622;
tr1737:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st622;
tr1739:
	{
		s->line_counter++;
	}
	goto st622;
tr1730:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st622;
tr1731:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st622;
tr1732:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st622;
tr1733:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st622;
st622:
	if ( ++p == pe )
		goto _test_eof622;
case 622:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st622;
		case 32: goto st622;
		case 40: goto tr1736;
		case 41: goto tr1737;
		case 42: goto tr1738;
		case 92: goto tr1738;
		case 95: goto tr1738;
		case 1034: goto tr1739;
		case 1083: goto st651;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1738;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1738;
	} else
		goto tr1738;
	goto tr71;
tr1738:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 623; goto st263;} }
	goto st623;
st623:
	if ( ++p == pe )
		goto _test_eof623;
case 623:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1741;
		case 32: goto tr1741;
		case 40: goto tr1742;
		case 41: goto tr1743;
		case 1034: goto tr1744;
		case 1083: goto tr1745;
	}
	goto tr71;
tr1748:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st624;
tr1749:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st624;
tr1751:
	{
		s->line_counter++;
	}
	goto st624;
tr1741:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st624;
tr1742:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st624;
tr1743:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st624;
tr1744:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st624;
st624:
	if ( ++p == pe )
		goto _test_eof624;
case 624:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st624;
		case 32: goto st624;
		case 40: goto tr1748;
		case 41: goto tr1749;
		case 1034: goto tr1751;
		case 1083: goto st650;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1750;
	goto tr1746;
tr1750:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st625;
tr1756:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st625;
st625:
	if ( ++p == pe )
		goto _test_eof625;
case 625:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1753;
		case 32: goto tr1753;
		case 40: goto tr1754;
		case 41: goto tr1755;
		case 1034: goto tr1757;
		case 1083: goto tr1758;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1756;
	goto tr1746;
tr1760:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st626;
tr1761:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st626;
tr1763:
	{
		s->line_counter++;
	}
	goto st626;
tr1753:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st626;
tr1754:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st626;
tr1755:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st626;
tr1757:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st626;
st626:
	if ( ++p == pe )
		goto _test_eof626;
case 626:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st626;
		case 32: goto st626;
		case 40: goto tr1760;
		case 41: goto tr1761;
		case 1034: goto tr1763;
		case 1083: goto st649;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1762;
	goto tr1746;
tr1762:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st627;
tr1769:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st627;
st627:
	if ( ++p == pe )
		goto _test_eof627;
case 627:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1766;
		case 32: goto tr1766;
		case 40: goto tr1767;
		case 41: goto tr1768;
		case 68: goto tr1770;
		case 72: goto tr1771;
		case 77: goto tr1772;
		case 83: goto st646;
		case 87: goto tr1774;
		case 100: goto tr1770;
		case 104: goto tr1771;
		case 109: goto tr1772;
		case 115: goto st646;
		case 119: goto tr1774;
		case 1034: goto tr1775;
		case 1083: goto tr1776;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1769;
	goto tr1765;
tr1778:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st628;
tr1779:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st628;
tr1781:
	{
		s->line_counter++;
	}
	goto st628;
tr1766:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st628;
tr1767:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st628;
tr1768:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st628;
tr1775:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st628;
tr1866:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st628;
tr1867:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st628;
tr1868:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st628;
tr1870:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st628;
st628:
	if ( ++p == pe )
		goto _test_eof628;
case 628:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st628;
		case 32: goto st628;
		case 40: goto tr1778;
		case 41: goto tr1779;
		case 1034: goto tr1781;
		case 1083: goto st645;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1780;
	goto tr1746;
tr1780:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st629;
tr1786:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st629;
st629:
	if ( ++p == pe )
		goto _test_eof629;
case 629:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1783;
		case 32: goto tr1783;
		case 40: goto tr1784;
		case 41: goto tr1785;
		case 68: goto tr1787;
		case 72: goto tr1788;
		case 77: goto tr1789;
		case 83: goto st642;
		case 87: goto tr1791;
		case 100: goto tr1787;
		case 104: goto tr1788;
		case 109: goto tr1789;
		case 115: goto st642;
		case 119: goto tr1791;
		case 1034: goto tr1792;
		case 1083: goto tr1793;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1786;
	goto tr1765;
tr1795:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st630;
tr1796:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st630;
tr1798:
	{
		s->line_counter++;
	}
	goto st630;
tr1783:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st630;
tr1784:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st630;
tr1785:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st630;
tr1792:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st630;
tr1853:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st630;
tr1854:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st630;
tr1855:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st630;
tr1857:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st630;
st630:
	if ( ++p == pe )
		goto _test_eof630;
case 630:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st630;
		case 32: goto st630;
		case 40: goto tr1795;
		case 41: goto tr1796;
		case 1034: goto tr1798;
		case 1083: goto st641;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1797;
	goto tr1746;
tr1797:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st631;
tr1803:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st631;
st631:
	if ( ++p == pe )
		goto _test_eof631;
case 631:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1800;
		case 32: goto tr1800;
		case 40: goto tr1801;
		case 41: goto tr1802;
		case 68: goto tr1804;
		case 72: goto tr1805;
		case 77: goto tr1806;
		case 83: goto st638;
		case 87: goto tr1808;
		case 100: goto tr1804;
		case 104: goto tr1805;
		case 109: goto tr1806;
		case 115: goto st638;
		case 119: goto tr1808;
		case 1034: goto tr1809;
		case 1083: goto tr1810;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1803;
	goto tr1765;
tr1812:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st632;
tr1813:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st632;
tr1815:
	{
		s->line_counter++;
	}
	goto st632;
tr1800:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st632;
tr1801:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st632;
tr1802:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st632;
tr1809:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st632;
tr1840:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st632;
tr1841:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st632;
tr1842:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st632;
tr1844:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st632;
st632:
	if ( ++p == pe )
		goto _test_eof632;
case 632:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st632;
		case 32: goto st632;
		case 40: goto tr1812;
		case 41: goto tr1813;
		case 1034: goto tr1815;
		case 1083: goto st637;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1814;
	goto tr1746;
tr1814:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st633;
tr1818:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st633;
st633:
	if ( ++p == pe )
		goto _test_eof633;
case 633:
	switch( (*p) ) {
		case 32: goto tr1817;
		case 59: goto tr1817;
		case 68: goto tr1819;
		case 72: goto tr1820;
		case 77: goto tr1821;
		case 83: goto st634;
		case 87: goto tr1823;
		case 100: goto tr1819;
		case 104: goto tr1820;
		case 109: goto tr1821;
		case 115: goto st634;
		case 119: goto tr1823;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1817;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1818;
	} else
		goto tr1817;
	goto tr1765;
tr1817:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1147;
tr1831:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1147;
st1147:
	if ( ++p == pe )
		goto _test_eof1147;
case 1147:
	goto st0;
tr1819:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st634;
tr1820:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st634;
tr1821:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st634;
tr1823:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st634;
st634:
	if ( ++p == pe )
		goto _test_eof634;
case 634:
	switch( (*p) ) {
		case 32: goto tr1817;
		case 59: goto tr1817;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1817;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1824;
	} else
		goto tr1817;
	goto tr1765;
tr1825:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st635;
tr1824:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st635;
tr1832:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st635;
st635:
	if ( ++p == pe )
		goto _test_eof635;
case 635:
	switch( (*p) ) {
		case 68: goto tr1826;
		case 72: goto tr1827;
		case 77: goto tr1828;
		case 83: goto st636;
		case 87: goto tr1830;
		case 100: goto tr1826;
		case 104: goto tr1827;
		case 109: goto tr1828;
		case 115: goto st636;
		case 119: goto tr1830;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1825;
	goto tr1765;
tr1826:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st636;
tr1827:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st636;
tr1828:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st636;
tr1830:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st636;
st636:
	if ( ++p == pe )
		goto _test_eof636;
case 636:
	switch( (*p) ) {
		case 32: goto tr1831;
		case 59: goto tr1831;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1831;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1832;
	} else
		goto tr1831;
	goto tr1765;
tr1810:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st637;
tr1845:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st637;
st637:
	if ( ++p == pe )
		goto _test_eof637;
case 637:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1815;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st637;
	goto tr71;
tr1804:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st638;
tr1805:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st638;
tr1806:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st638;
tr1808:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st638;
st638:
	if ( ++p == pe )
		goto _test_eof638;
case 638:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1800;
		case 32: goto tr1800;
		case 40: goto tr1801;
		case 41: goto tr1802;
		case 1034: goto tr1809;
		case 1083: goto tr1810;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1833;
	goto tr1765;
tr1834:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st639;
tr1833:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st639;
tr1843:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st639;
st639:
	if ( ++p == pe )
		goto _test_eof639;
case 639:
	switch( (*p) ) {
		case 68: goto tr1835;
		case 72: goto tr1836;
		case 77: goto tr1837;
		case 83: goto st640;
		case 87: goto tr1839;
		case 100: goto tr1835;
		case 104: goto tr1836;
		case 109: goto tr1837;
		case 115: goto st640;
		case 119: goto tr1839;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1834;
	goto tr1765;
tr1835:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st640;
tr1836:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st640;
tr1837:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st640;
tr1839:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st640;
st640:
	if ( ++p == pe )
		goto _test_eof640;
case 640:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1840;
		case 32: goto tr1840;
		case 40: goto tr1841;
		case 41: goto tr1842;
		case 1034: goto tr1844;
		case 1083: goto tr1845;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1843;
	goto tr1765;
tr1793:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st641;
tr1858:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st641;
st641:
	if ( ++p == pe )
		goto _test_eof641;
case 641:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1798;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st641;
	goto tr71;
tr1787:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st642;
tr1788:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st642;
tr1789:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st642;
tr1791:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st642;
st642:
	if ( ++p == pe )
		goto _test_eof642;
case 642:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1783;
		case 32: goto tr1783;
		case 40: goto tr1784;
		case 41: goto tr1785;
		case 1034: goto tr1792;
		case 1083: goto tr1793;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1846;
	goto tr1765;
tr1847:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st643;
tr1846:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st643;
tr1856:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st643;
st643:
	if ( ++p == pe )
		goto _test_eof643;
case 643:
	switch( (*p) ) {
		case 68: goto tr1848;
		case 72: goto tr1849;
		case 77: goto tr1850;
		case 83: goto st644;
		case 87: goto tr1852;
		case 100: goto tr1848;
		case 104: goto tr1849;
		case 109: goto tr1850;
		case 115: goto st644;
		case 119: goto tr1852;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1847;
	goto tr1765;
tr1848:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st644;
tr1849:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st644;
tr1850:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st644;
tr1852:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st644;
st644:
	if ( ++p == pe )
		goto _test_eof644;
case 644:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1853;
		case 32: goto tr1853;
		case 40: goto tr1854;
		case 41: goto tr1855;
		case 1034: goto tr1857;
		case 1083: goto tr1858;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1856;
	goto tr1765;
tr1776:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st645;
tr1871:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st645;
st645:
	if ( ++p == pe )
		goto _test_eof645;
case 645:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1781;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st645;
	goto tr71;
tr1770:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st646;
tr1771:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st646;
tr1772:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st646;
tr1774:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st646;
st646:
	if ( ++p == pe )
		goto _test_eof646;
case 646:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1766;
		case 32: goto tr1766;
		case 40: goto tr1767;
		case 41: goto tr1768;
		case 1034: goto tr1775;
		case 1083: goto tr1776;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1859;
	goto tr1765;
tr1860:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st647;
tr1859:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st647;
tr1869:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st647;
st647:
	if ( ++p == pe )
		goto _test_eof647;
case 647:
	switch( (*p) ) {
		case 68: goto tr1861;
		case 72: goto tr1862;
		case 77: goto tr1863;
		case 83: goto st648;
		case 87: goto tr1865;
		case 100: goto tr1861;
		case 104: goto tr1862;
		case 109: goto tr1863;
		case 115: goto st648;
		case 119: goto tr1865;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1860;
	goto tr1765;
tr1861:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st648;
tr1862:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st648;
tr1863:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st648;
tr1865:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st261;}
	              }
	            }
	goto st648;
st648:
	if ( ++p == pe )
		goto _test_eof648;
case 648:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1866;
		case 32: goto tr1866;
		case 40: goto tr1867;
		case 41: goto tr1868;
		case 1034: goto tr1870;
		case 1083: goto tr1871;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1869;
	goto tr1765;
tr1758:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st649;
st649:
	if ( ++p == pe )
		goto _test_eof649;
case 649:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1763;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st649;
	goto tr71;
tr1745:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st650;
st650:
	if ( ++p == pe )
		goto _test_eof650;
case 650:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1751;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st650;
	goto tr71;
tr1734:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st651;
st651:
	if ( ++p == pe )
		goto _test_eof651;
case 651:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1739;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st651;
	goto tr71;
st652:
	if ( ++p == pe )
		goto _test_eof652;
case 652:
	switch( (*p) ) {
		case 32: goto tr71;
		case 59: goto tr71;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr71;
	} else if ( (*p) >= 9 )
		goto tr71;
	goto tr1872;
tr1872:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 653; goto st272;} }
	goto st653;
st653:
	if ( ++p == pe )
		goto _test_eof653;
case 653:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1873;
		case 32: goto tr1873;
		case 40: goto tr1874;
		case 41: goto tr1875;
		case 1034: goto tr1876;
		case 1083: goto tr1877;
	}
	goto tr71;
tr1880:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st654;
tr1881:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st654;
tr1882:
	{
		s->line_counter++;
	}
	goto st654;
tr1873:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st654;
tr1874:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st654;
tr1875:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st654;
tr1876:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st654;
st654:
	if ( ++p == pe )
		goto _test_eof654;
case 654:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st654;
		case 32: goto st654;
		case 40: goto tr1880;
		case 41: goto tr1881;
		case 1034: goto tr1882;
		case 1083: goto st656;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr1878;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr1878;
	} else
		goto tr1878;
	goto tr71;
tr1878:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 655; goto st272;} }
	goto st655;
st655:
	if ( ++p == pe )
		goto _test_eof655;
case 655:
	switch( (*p) ) {
		case 32: goto tr1884;
		case 59: goto tr1884;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1884;
	} else if ( (*p) >= 9 )
		goto tr1884;
	goto tr71;
tr1884:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1148;
st1148:
	if ( ++p == pe )
		goto _test_eof1148;
case 1148:
	goto st0;
tr1877:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st656;
st656:
	if ( ++p == pe )
		goto _test_eof656;
case 656:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1882;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st656;
	goto tr71;
st657:
	if ( ++p == pe )
		goto _test_eof657;
case 657:
	switch( (*p) ) {
		case 42: goto tr1885;
		case 92: goto tr1885;
		case 95: goto tr1885;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1885;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1885;
	} else
		goto tr1885;
	goto tr71;
tr1885:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 658; goto st263;} }
	goto st658;
st658:
	if ( ++p == pe )
		goto _test_eof658;
case 658:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1886;
		case 32: goto tr1886;
		case 40: goto tr1887;
		case 41: goto tr1888;
		case 1034: goto tr1889;
		case 1083: goto tr1890;
	}
	goto tr71;
tr1892:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st659;
tr1893:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st659;
tr1895:
	{
		s->line_counter++;
	}
	goto st659;
tr1886:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st659;
tr1887:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st659;
tr1888:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st659;
tr1889:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st659;
st659:
	if ( ++p == pe )
		goto _test_eof659;
case 659:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st659;
		case 32: goto st659;
		case 40: goto tr1892;
		case 41: goto tr1893;
		case 42: goto tr1894;
		case 92: goto tr1894;
		case 95: goto tr1894;
		case 1034: goto tr1895;
		case 1083: goto st661;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1894;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1894;
	} else
		goto tr1894;
	goto tr71;
tr1894:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 660; goto st263;} }
	goto st660;
st660:
	if ( ++p == pe )
		goto _test_eof660;
case 660:
	switch( (*p) ) {
		case 32: goto tr1897;
		case 59: goto tr1897;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1897;
	} else if ( (*p) >= 9 )
		goto tr1897;
	goto tr71;
tr1897:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1149;
st1149:
	if ( ++p == pe )
		goto _test_eof1149;
case 1149:
	goto st0;
tr1890:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st661;
st661:
	if ( ++p == pe )
		goto _test_eof661;
case 661:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1895;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st661;
	goto tr71;
st662:
	if ( ++p == pe )
		goto _test_eof662;
case 662:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1898;
	goto tr1746;
tr1898:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st663;
tr1902:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st663;
st663:
	if ( ++p == pe )
		goto _test_eof663;
case 663:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1899;
		case 32: goto tr1899;
		case 40: goto tr1900;
		case 41: goto tr1901;
		case 1034: goto tr1903;
		case 1083: goto tr1904;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1902;
	goto tr1746;
tr1906:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st664;
tr1907:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st664;
tr1909:
	{
		s->line_counter++;
	}
	goto st664;
tr1899:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st664;
tr1900:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st664;
tr1901:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st664;
tr1903:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st664;
st664:
	if ( ++p == pe )
		goto _test_eof664;
case 664:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st664;
		case 32: goto st664;
		case 40: goto tr1906;
		case 41: goto tr1907;
		case 42: goto tr1908;
		case 92: goto tr1908;
		case 95: goto tr1908;
		case 1034: goto tr1909;
		case 1083: goto st666;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1908;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1908;
	} else
		goto tr1908;
	goto tr71;
tr1908:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 665; goto st263;} }
	goto st665;
st665:
	if ( ++p == pe )
		goto _test_eof665;
case 665:
	switch( (*p) ) {
		case 32: goto tr1911;
		case 59: goto tr1911;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1911;
	} else if ( (*p) >= 9 )
		goto tr1911;
	goto tr71;
tr1911:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1150;
st1150:
	if ( ++p == pe )
		goto _test_eof1150;
case 1150:
	goto st0;
tr1904:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st666;
st666:
	if ( ++p == pe )
		goto _test_eof666;
case 666:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1909;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st666;
	goto tr71;
st667:
	if ( ++p == pe )
		goto _test_eof667;
case 667:
	switch( (*p) ) {
		case 32: goto tr1913;
		case 59: goto tr1913;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1913;
	} else if ( (*p) >= 9 )
		goto tr1913;
	goto tr1912;
tr1922:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 668; goto st272;} }
	goto st668;
tr1912:
	{
		s->long_string = true;
	}
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 668; goto st272;} }
	goto st668;
st668:
	if ( ++p == pe )
		goto _test_eof668;
case 668:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1914;
		case 32: goto tr1914;
		case 40: goto tr1915;
		case 41: goto tr1916;
		case 2058: goto tr1917;
		case 2107: goto tr1918;
		case 2314: goto tr1919;
		case 2363: goto tr1919;
		case 2570: goto tr1920;
		case 2619: goto tr1921;
	}
	goto tr1913;
tr1924:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st669;
tr1925:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st669;
tr1926:
	{
		s->line_counter++;
	}
	goto st669;
tr1914:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st669;
tr1915:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st669;
tr1916:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st669;
tr1917:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st669;
st669:
	if ( ++p == pe )
		goto _test_eof669;
case 669:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st669;
		case 32: goto st669;
		case 40: goto tr1924;
		case 41: goto tr1925;
		case 2058: goto tr1926;
		case 2107: goto st670;
		case 2314: goto tr1928;
		case 2363: goto tr1928;
		case 2570: goto tr1929;
		case 2619: goto tr1930;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr1922;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr1922;
	} else
		goto tr1922;
	goto tr1913;
tr1918:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st670;
st670:
	if ( ++p == pe )
		goto _test_eof670;
case 670:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1926;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st670;
	goto tr1913;
tr1919:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1151;
tr1928:
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1151;
st1151:
	if ( ++p == pe )
		goto _test_eof1151;
case 1151:
	goto st0;
tr1920:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1152;
tr1929:
	{
		s->line_counter++;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1152;
st1152:
	if ( ++p == pe )
		goto _test_eof1152;
case 1152:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st669;
		case 32: goto st669;
		case 40: goto tr1924;
		case 41: goto tr1925;
		case 2058: goto tr1926;
		case 2107: goto st670;
		case 2314: goto tr1928;
		case 2363: goto tr1928;
		case 2570: goto tr1929;
		case 2619: goto tr1930;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr1922;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr1922;
	} else
		goto tr1922;
	goto tr1913;
tr1921:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1153;
tr1930:
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1153;
st1153:
	if ( ++p == pe )
		goto _test_eof1153;
case 1153:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1926;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st670;
	goto tr1913;
st671:
	if ( ++p == pe )
		goto _test_eof671;
case 671:
	if ( (*p) == 46 )
		goto tr1931;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr1931;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr1931;
	} else
		goto tr1931;
	goto tr1723;
tr1931:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st672;
tr1933:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st672;
st672:
	if ( ++p == pe )
		goto _test_eof672;
case 672:
	switch( (*p) ) {
		case 32: goto tr1932;
		case 46: goto tr1933;
		case 59: goto tr1932;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr1932;
		} else if ( (*p) >= 9 )
			goto tr1932;
	} else if ( (*p) > 58 ) {
		if ( (*p) > 70 ) {
			if ( 97 <= (*p) && (*p) <= 102 )
				goto tr1933;
		} else if ( (*p) >= 65 )
			goto tr1933;
	} else
		goto tr1933;
	goto tr1723;
tr1932:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1154;
st1154:
	if ( ++p == pe )
		goto _test_eof1154;
case 1154:
	goto st0;
st673:
	if ( ++p == pe )
		goto _test_eof673;
case 673:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1935;
	goto tr1934;
tr1939:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st674;
tr1935:
	{
		memset(&(s->loc), 0, sizeof(s->loc));
		// Defaults.
		s->loc.siz = 100;
		s->loc.vp  = 1000;
		s->loc.hp  = 1000000;
		s->loc.lat_sign  = 1;
		s->loc.long_sign = 1;
		s->loc.alt_sign  = 1;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st674;
st674:
	if ( ++p == pe )
		goto _test_eof674;
case 674:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1936;
		case 32: goto tr1936;
		case 40: goto tr1937;
		case 41: goto tr1938;
		case 1034: goto tr1940;
		case 1083: goto tr1941;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1939;
	goto tr1934;
tr1943:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st675;
tr1944:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st675;
tr1948:
	{
		s->line_counter++;
	}
	goto st675;
tr1936:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st675;
tr1937:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st675;
tr1938:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st675;
tr1940:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st675;
st675:
	if ( ++p == pe )
		goto _test_eof675;
case 675:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st675;
		case 32: goto st675;
		case 40: goto tr1943;
		case 41: goto tr1944;
		case 78: goto st680;
		case 83: goto st722;
		case 1034: goto tr1948;
		case 1083: goto st727;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1945;
	goto tr1934;
tr1945:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st676;
tr1953:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st676;
st676:
	if ( ++p == pe )
		goto _test_eof676;
case 676:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1950;
		case 32: goto tr1950;
		case 40: goto tr1951;
		case 41: goto tr1952;
		case 1034: goto tr1954;
		case 1083: goto tr1955;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1953;
	goto tr1934;
tr1957:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st677;
tr1958:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st677;
tr1960:
	{
		s->line_counter++;
	}
	goto st677;
tr1950:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st677;
tr1951:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st677;
tr1952:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st677;
tr1954:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st677;
st677:
	if ( ++p == pe )
		goto _test_eof677;
case 677:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st677;
		case 32: goto st677;
		case 40: goto tr1957;
		case 41: goto tr1958;
		case 78: goto st680;
		case 83: goto st722;
		case 1034: goto tr1960;
		case 1083: goto st726;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1959;
	goto tr1934;
tr1966:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st678;
tr1959:
	{
		s->decimals = 3;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st678;
st678:
	if ( ++p == pe )
		goto _test_eof678;
case 678:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1962;
		case 32: goto tr1962;
		case 40: goto tr1963;
		case 41: goto tr1964;
		case 46: goto st724;
		case 1034: goto tr1967;
		case 1083: goto tr1968;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1966;
	goto tr1934;
tr1970:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st679;
tr1971:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st679;
tr1972:
	{
		s->line_counter++;
	}
	goto st679;
tr1962:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st679;
tr1963:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st679;
tr1964:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st679;
tr1967:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st679;
tr2161:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st679;
tr2162:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st679;
tr2163:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st679;
tr2165:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st679;
st679:
	if ( ++p == pe )
		goto _test_eof679;
case 679:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st679;
		case 32: goto st679;
		case 40: goto tr1970;
		case 41: goto tr1971;
		case 78: goto st680;
		case 83: goto st722;
		case 1034: goto tr1972;
		case 1083: goto st723;
	}
	goto tr1934;
st680:
	if ( ++p == pe )
		goto _test_eof680;
case 680:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st681;
		case 32: goto st681;
		case 40: goto tr1975;
		case 41: goto tr1976;
		case 1034: goto tr1977;
		case 1083: goto st721;
	}
	goto tr1934;
tr1975:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st681;
tr1976:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st681;
tr1977:
	{
		s->line_counter++;
	}
	goto st681;
tr2156:
	{
		s->loc.lat_sign = -1;
	}
	goto st681;
tr2157:
	{
		s->loc.lat_sign = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st681;
tr2158:
	{
		s->loc.lat_sign = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st681;
tr2159:
	{
		s->loc.lat_sign = -1;
	}
	{
		s->line_counter++;
	}
	goto st681;
st681:
	if ( ++p == pe )
		goto _test_eof681;
case 681:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st681;
		case 32: goto st681;
		case 40: goto tr1975;
		case 41: goto tr1976;
		case 1034: goto tr1977;
		case 1083: goto st721;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1979;
	goto tr1934;
tr1979:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st682;
tr1983:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st682;
st682:
	if ( ++p == pe )
		goto _test_eof682;
case 682:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1980;
		case 32: goto tr1980;
		case 40: goto tr1981;
		case 41: goto tr1982;
		case 1034: goto tr1984;
		case 1083: goto tr1985;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1983;
	goto tr1934;
tr1987:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st683;
tr1988:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st683;
tr1992:
	{
		s->line_counter++;
	}
	goto st683;
tr1980:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st683;
tr1981:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st683;
tr1982:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st683;
tr1984:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st683;
st683:
	if ( ++p == pe )
		goto _test_eof683;
case 683:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st683;
		case 32: goto st683;
		case 40: goto tr1987;
		case 41: goto tr1988;
		case 69: goto st688;
		case 87: goto st715;
		case 1034: goto tr1992;
		case 1083: goto st720;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1989;
	goto tr1934;
tr1989:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st684;
tr1997:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st684;
st684:
	if ( ++p == pe )
		goto _test_eof684;
case 684:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1994;
		case 32: goto tr1994;
		case 40: goto tr1995;
		case 41: goto tr1996;
		case 1034: goto tr1998;
		case 1083: goto tr1999;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1997;
	goto tr1934;
tr2001:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st685;
tr2002:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st685;
tr2004:
	{
		s->line_counter++;
	}
	goto st685;
tr1994:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st685;
tr1995:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st685;
tr1996:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st685;
tr1998:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st685;
st685:
	if ( ++p == pe )
		goto _test_eof685;
case 685:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st685;
		case 32: goto st685;
		case 40: goto tr2001;
		case 41: goto tr2002;
		case 69: goto st688;
		case 87: goto st715;
		case 1034: goto tr2004;
		case 1083: goto st719;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2003;
	goto tr1934;
tr2010:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st686;
tr2003:
	{
		s->decimals = 3;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st686;
st686:
	if ( ++p == pe )
		goto _test_eof686;
case 686:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2006;
		case 32: goto tr2006;
		case 40: goto tr2007;
		case 41: goto tr2008;
		case 46: goto st717;
		case 1034: goto tr2011;
		case 1083: goto tr2012;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2010;
	goto tr1934;
tr2014:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st687;
tr2015:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st687;
tr2016:
	{
		s->line_counter++;
	}
	goto st687;
tr2006:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st687;
tr2007:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st687;
tr2008:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st687;
tr2011:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st687;
tr2149:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st687;
tr2150:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st687;
tr2151:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st687;
tr2153:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st687;
st687:
	if ( ++p == pe )
		goto _test_eof687;
case 687:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st687;
		case 32: goto st687;
		case 40: goto tr2014;
		case 41: goto tr2015;
		case 69: goto st688;
		case 87: goto st715;
		case 1034: goto tr2016;
		case 1083: goto st716;
	}
	goto tr1934;
st688:
	if ( ++p == pe )
		goto _test_eof688;
case 688:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st689;
		case 32: goto st689;
		case 40: goto tr2019;
		case 41: goto tr2020;
		case 1034: goto tr2021;
		case 1083: goto st714;
	}
	goto tr1934;
tr2019:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st689;
tr2020:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st689;
tr2021:
	{
		s->line_counter++;
	}
	goto st689;
tr2144:
	{
		s->loc.long_sign = -1;
	}
	goto st689;
tr2145:
	{
		s->loc.long_sign = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st689;
tr2146:
	{
		s->loc.long_sign = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st689;
tr2147:
	{
		s->loc.long_sign = -1;
	}
	{
		s->line_counter++;
	}
	goto st689;
st689:
	if ( ++p == pe )
		goto _test_eof689;
case 689:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st689;
		case 32: goto st689;
		case 40: goto tr2019;
		case 41: goto tr2020;
		case 45: goto st690;
		case 1034: goto tr2021;
		case 1083: goto st714;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2024;
	goto tr1934;
st690:
	if ( ++p == pe )
		goto _test_eof690;
case 690:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2025;
	goto tr1934;
tr2030:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st691;
tr2024:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st691;
tr2025:
	{
		s->loc.alt_sign = -1;
	}
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st691;
st691:
	if ( ++p == pe )
		goto _test_eof691;
case 691:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2026;
		case 32: goto tr2026;
		case 40: goto tr2027;
		case 41: goto tr2028;
		case 46: goto st711;
		case 109: goto tr2031;
		case 2058: goto tr2032;
		case 2107: goto tr2033;
		case 2314: goto tr2034;
		case 2363: goto tr2034;
		case 2570: goto tr2035;
		case 2619: goto tr2036;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2030;
	goto tr1934;
tr2038:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st692;
tr2039:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st692;
tr2041:
	{
		s->line_counter++;
	}
	goto st692;
tr2026:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st692;
tr2027:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st692;
tr2028:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st692;
tr2032:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st692;
tr2133:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st692;
tr2134:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st692;
tr2135:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st692;
tr2138:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st692;
st692:
	if ( ++p == pe )
		goto _test_eof692;
case 692:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st692;
		case 32: goto st692;
		case 40: goto tr2038;
		case 41: goto tr2039;
		case 2058: goto tr2041;
		case 2107: goto st710;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2044;
		case 2619: goto tr2045;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2040;
	goto tr1934;
tr2050:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st693;
tr2040:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st693;
st693:
	if ( ++p == pe )
		goto _test_eof693;
case 693:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2046;
		case 32: goto tr2046;
		case 40: goto tr2047;
		case 41: goto tr2048;
		case 46: goto st707;
		case 109: goto tr2051;
		case 2058: goto tr2052;
		case 2107: goto tr2053;
		case 2314: goto tr2054;
		case 2363: goto tr2054;
		case 2570: goto tr2055;
		case 2619: goto tr2056;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2050;
	goto tr1934;
tr2058:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st694;
tr2059:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st694;
tr2061:
	{
		s->line_counter++;
	}
	goto st694;
tr2046:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st694;
tr2047:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st694;
tr2048:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st694;
tr2052:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st694;
tr2122:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st694;
tr2123:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st694;
tr2124:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st694;
tr2127:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st694;
st694:
	if ( ++p == pe )
		goto _test_eof694;
case 694:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st694;
		case 32: goto st694;
		case 40: goto tr2058;
		case 41: goto tr2059;
		case 2058: goto tr2061;
		case 2107: goto st706;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2063;
		case 2619: goto tr2064;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2060;
	goto tr1934;
tr2069:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st695;
tr2060:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st695;
st695:
	if ( ++p == pe )
		goto _test_eof695;
case 695:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2065;
		case 32: goto tr2065;
		case 40: goto tr2066;
		case 41: goto tr2067;
		case 46: goto st703;
		case 109: goto tr2070;
		case 2058: goto tr2071;
		case 2107: goto tr2072;
		case 2314: goto tr2073;
		case 2363: goto tr2073;
		case 2570: goto tr2074;
		case 2619: goto tr2075;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2069;
	goto tr1934;
tr2077:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st696;
tr2078:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st696;
tr2080:
	{
		s->line_counter++;
	}
	goto st696;
tr2065:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st696;
tr2066:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st696;
tr2067:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st696;
tr2071:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st696;
tr2111:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st696;
tr2112:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st696;
tr2113:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st696;
tr2116:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st696;
st696:
	if ( ++p == pe )
		goto _test_eof696;
case 696:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st696;
		case 32: goto st696;
		case 40: goto tr2077;
		case 41: goto tr2078;
		case 2058: goto tr2080;
		case 2107: goto st702;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2082;
		case 2619: goto tr2083;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2079;
	goto tr1934;
tr2088:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st697;
tr2079:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st697;
st697:
	if ( ++p == pe )
		goto _test_eof697;
case 697:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2084;
		case 32: goto tr2084;
		case 40: goto tr2085;
		case 41: goto tr2086;
		case 46: goto st700;
		case 109: goto tr2084;
		case 2058: goto tr2089;
		case 2107: goto tr2090;
		case 2314: goto tr2091;
		case 2363: goto tr2091;
		case 2570: goto tr2092;
		case 2619: goto tr2093;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2088;
	goto tr1934;
tr2095:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st698;
tr2096:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st698;
tr2097:
	{
		s->line_counter++;
	}
	goto st698;
tr2084:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st698;
tr2085:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st698;
tr2086:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st698;
tr2089:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st698;
tr2101:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st698;
tr2102:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st698;
tr2103:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st698;
tr2105:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st698;
st698:
	if ( ++p == pe )
		goto _test_eof698;
case 698:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st698;
		case 32: goto st698;
		case 40: goto tr2095;
		case 41: goto tr2096;
		case 2058: goto tr2097;
		case 2107: goto st699;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2099;
		case 2619: goto tr2100;
	}
	goto tr1934;
tr2090:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st699;
tr2106:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st699;
st699:
	if ( ++p == pe )
		goto _test_eof699;
case 699:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2097;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st699;
	goto tr1934;
tr2034:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2043:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2054:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2073:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2091:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2107:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2118:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2129:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
tr2140:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1155;
st1155:
	if ( ++p == pe )
		goto _test_eof1155;
case 1155:
	goto st0;
tr2099:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1156;
tr2092:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1156;
tr2108:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1156;
st1156:
	if ( ++p == pe )
		goto _test_eof1156;
case 1156:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st698;
		case 32: goto st698;
		case 40: goto tr2095;
		case 41: goto tr2096;
		case 2058: goto tr2097;
		case 2107: goto st699;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2099;
		case 2619: goto tr2100;
	}
	goto tr1934;
tr2100:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1157;
tr2093:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1157;
tr2109:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1157;
st1157:
	if ( ++p == pe )
		goto _test_eof1157;
case 1157:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2097;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st699;
	goto tr1934;
st700:
	if ( ++p == pe )
		goto _test_eof700;
case 700:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2101;
		case 32: goto tr2101;
		case 40: goto tr2102;
		case 41: goto tr2103;
		case 109: goto tr2101;
		case 2058: goto tr2105;
		case 2107: goto tr2106;
		case 2314: goto tr2107;
		case 2363: goto tr2107;
		case 2570: goto tr2108;
		case 2619: goto tr2109;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2104;
	goto tr1934;
tr2104:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st701;
tr2110:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st701;
st701:
	if ( ++p == pe )
		goto _test_eof701;
case 701:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2084;
		case 32: goto tr2084;
		case 40: goto tr2085;
		case 41: goto tr2086;
		case 109: goto tr2084;
		case 2058: goto tr2089;
		case 2107: goto tr2090;
		case 2314: goto tr2091;
		case 2363: goto tr2091;
		case 2570: goto tr2092;
		case 2619: goto tr2093;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2110;
	goto tr1934;
tr2072:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st702;
tr2117:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st702;
st702:
	if ( ++p == pe )
		goto _test_eof702;
case 702:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2080;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st702;
	goto tr1934;
tr2082:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1158;
tr2074:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1158;
tr2119:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1158;
st1158:
	if ( ++p == pe )
		goto _test_eof1158;
case 1158:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st696;
		case 32: goto st696;
		case 40: goto tr2077;
		case 41: goto tr2078;
		case 2058: goto tr2080;
		case 2107: goto st702;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2082;
		case 2619: goto tr2083;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2079;
	goto tr1934;
tr2083:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1159;
tr2075:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1159;
tr2120:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1159;
st1159:
	if ( ++p == pe )
		goto _test_eof1159;
case 1159:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2080;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st702;
	goto tr1934;
st703:
	if ( ++p == pe )
		goto _test_eof703;
case 703:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2111;
		case 32: goto tr2111;
		case 40: goto tr2112;
		case 41: goto tr2113;
		case 109: goto tr2115;
		case 2058: goto tr2116;
		case 2107: goto tr2117;
		case 2314: goto tr2118;
		case 2363: goto tr2118;
		case 2570: goto tr2119;
		case 2619: goto tr2120;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2114;
	goto tr1934;
tr2114:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st704;
tr2121:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st704;
st704:
	if ( ++p == pe )
		goto _test_eof704;
case 704:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2065;
		case 32: goto tr2065;
		case 40: goto tr2066;
		case 41: goto tr2067;
		case 109: goto tr2070;
		case 2058: goto tr2071;
		case 2107: goto tr2072;
		case 2314: goto tr2073;
		case 2363: goto tr2073;
		case 2570: goto tr2074;
		case 2619: goto tr2075;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2121;
	goto tr1934;
tr2070:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st705;
tr2115:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st705;
st705:
	if ( ++p == pe )
		goto _test_eof705;
case 705:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st696;
		case 32: goto st696;
		case 40: goto tr2077;
		case 41: goto tr2078;
		case 2058: goto tr2080;
		case 2107: goto st702;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2082;
		case 2619: goto tr2083;
	}
	goto tr1934;
tr2053:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st706;
tr2128:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st706;
st706:
	if ( ++p == pe )
		goto _test_eof706;
case 706:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2061;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st706;
	goto tr1934;
tr2063:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1160;
tr2055:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1160;
tr2130:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1160;
st1160:
	if ( ++p == pe )
		goto _test_eof1160;
case 1160:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st694;
		case 32: goto st694;
		case 40: goto tr2058;
		case 41: goto tr2059;
		case 2058: goto tr2061;
		case 2107: goto st706;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2063;
		case 2619: goto tr2064;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2060;
	goto tr1934;
tr2064:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1161;
tr2056:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1161;
tr2131:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1161;
st1161:
	if ( ++p == pe )
		goto _test_eof1161;
case 1161:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2061;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st706;
	goto tr1934;
st707:
	if ( ++p == pe )
		goto _test_eof707;
case 707:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2122;
		case 32: goto tr2122;
		case 40: goto tr2123;
		case 41: goto tr2124;
		case 109: goto tr2126;
		case 2058: goto tr2127;
		case 2107: goto tr2128;
		case 2314: goto tr2129;
		case 2363: goto tr2129;
		case 2570: goto tr2130;
		case 2619: goto tr2131;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2125;
	goto tr1934;
tr2125:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st708;
tr2132:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st708;
st708:
	if ( ++p == pe )
		goto _test_eof708;
case 708:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2046;
		case 32: goto tr2046;
		case 40: goto tr2047;
		case 41: goto tr2048;
		case 109: goto tr2051;
		case 2058: goto tr2052;
		case 2107: goto tr2053;
		case 2314: goto tr2054;
		case 2363: goto tr2054;
		case 2570: goto tr2055;
		case 2619: goto tr2056;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2132;
	goto tr1934;
tr2051:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st709;
tr2126:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st709;
st709:
	if ( ++p == pe )
		goto _test_eof709;
case 709:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st694;
		case 32: goto st694;
		case 40: goto tr2058;
		case 41: goto tr2059;
		case 2058: goto tr2061;
		case 2107: goto st706;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2063;
		case 2619: goto tr2064;
	}
	goto tr1934;
tr2033:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st710;
tr2139:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st710;
st710:
	if ( ++p == pe )
		goto _test_eof710;
case 710:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2041;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st710;
	goto tr1934;
tr2035:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1162;
tr2044:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1162;
tr2141:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1162;
st1162:
	if ( ++p == pe )
		goto _test_eof1162;
case 1162:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st692;
		case 32: goto st692;
		case 40: goto tr2038;
		case 41: goto tr2039;
		case 2058: goto tr2041;
		case 2107: goto st710;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2044;
		case 2619: goto tr2045;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2040;
	goto tr1934;
tr2036:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1163;
tr2045:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1163;
tr2142:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1163;
st1163:
	if ( ++p == pe )
		goto _test_eof1163;
case 1163:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2041;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st710;
	goto tr1934;
st711:
	if ( ++p == pe )
		goto _test_eof711;
case 711:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2133;
		case 32: goto tr2133;
		case 40: goto tr2134;
		case 41: goto tr2135;
		case 109: goto tr2137;
		case 2058: goto tr2138;
		case 2107: goto tr2139;
		case 2314: goto tr2140;
		case 2363: goto tr2140;
		case 2570: goto tr2141;
		case 2619: goto tr2142;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2136;
	goto tr1934;
tr2136:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st712;
tr2143:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st712;
st712:
	if ( ++p == pe )
		goto _test_eof712;
case 712:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2026;
		case 32: goto tr2026;
		case 40: goto tr2027;
		case 41: goto tr2028;
		case 109: goto tr2031;
		case 2058: goto tr2032;
		case 2107: goto tr2033;
		case 2314: goto tr2034;
		case 2363: goto tr2034;
		case 2570: goto tr2035;
		case 2619: goto tr2036;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2143;
	goto tr1934;
tr2031:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st713;
tr2137:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st713;
st713:
	if ( ++p == pe )
		goto _test_eof713;
case 713:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st692;
		case 32: goto st692;
		case 40: goto tr2038;
		case 41: goto tr2039;
		case 2058: goto tr2041;
		case 2107: goto st710;
		case 2314: goto tr2043;
		case 2363: goto tr2043;
		case 2570: goto tr2044;
		case 2619: goto tr2045;
	}
	goto tr1934;
tr2148:
	{
		s->loc.long_sign = -1;
	}
	goto st714;
st714:
	if ( ++p == pe )
		goto _test_eof714;
case 714:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2021;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st714;
	goto tr1934;
st715:
	if ( ++p == pe )
		goto _test_eof715;
case 715:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2144;
		case 32: goto tr2144;
		case 40: goto tr2145;
		case 41: goto tr2146;
		case 1034: goto tr2147;
		case 1083: goto tr2148;
	}
	goto tr1934;
tr2012:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st716;
tr2154:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st716;
st716:
	if ( ++p == pe )
		goto _test_eof716;
case 716:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2016;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st716;
	goto tr1934;
st717:
	if ( ++p == pe )
		goto _test_eof717;
case 717:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2149;
		case 32: goto tr2149;
		case 40: goto tr2150;
		case 41: goto tr2151;
		case 1034: goto tr2153;
		case 1083: goto tr2154;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2152;
	goto tr1934;
tr2152:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st718;
tr2155:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st718;
st718:
	if ( ++p == pe )
		goto _test_eof718;
case 718:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2006;
		case 32: goto tr2006;
		case 40: goto tr2007;
		case 41: goto tr2008;
		case 1034: goto tr2011;
		case 1083: goto tr2012;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2155;
	goto tr1934;
tr1999:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st719;
st719:
	if ( ++p == pe )
		goto _test_eof719;
case 719:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2004;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st719;
	goto tr1934;
tr1985:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st720;
st720:
	if ( ++p == pe )
		goto _test_eof720;
case 720:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1992;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st720;
	goto tr1934;
tr2160:
	{
		s->loc.lat_sign = -1;
	}
	goto st721;
st721:
	if ( ++p == pe )
		goto _test_eof721;
case 721:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1977;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st721;
	goto tr1934;
st722:
	if ( ++p == pe )
		goto _test_eof722;
case 722:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2156;
		case 32: goto tr2156;
		case 40: goto tr2157;
		case 41: goto tr2158;
		case 1034: goto tr2159;
		case 1083: goto tr2160;
	}
	goto tr1934;
tr1968:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st723;
tr2166:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st723;
st723:
	if ( ++p == pe )
		goto _test_eof723;
case 723:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1972;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st723;
	goto tr1934;
st724:
	if ( ++p == pe )
		goto _test_eof724;
case 724:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2161;
		case 32: goto tr2161;
		case 40: goto tr2162;
		case 41: goto tr2163;
		case 1034: goto tr2165;
		case 1083: goto tr2166;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2164;
	goto tr1934;
tr2164:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st725;
tr2167:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st725;
st725:
	if ( ++p == pe )
		goto _test_eof725;
case 725:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1962;
		case 32: goto tr1962;
		case 40: goto tr1963;
		case 41: goto tr1964;
		case 1034: goto tr1967;
		case 1083: goto tr1968;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2167;
	goto tr1934;
tr1955:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st726;
st726:
	if ( ++p == pe )
		goto _test_eof726;
case 726:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1960;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st726;
	goto tr1934;
tr1941:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st261;}
		}
	}
	goto st727;
st727:
	if ( ++p == pe )
		goto _test_eof727;
case 727:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr1948;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st727;
	goto tr1934;
st728:
	if ( ++p == pe )
		goto _test_eof728;
case 728:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2168;
	goto tr1746;
tr2168:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st729;
tr2172:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st729;
st729:
	if ( ++p == pe )
		goto _test_eof729;
case 729:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2169;
		case 32: goto tr2169;
		case 40: goto tr2170;
		case 41: goto tr2171;
		case 1034: goto tr2173;
		case 1083: goto tr2174;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2172;
	goto tr1746;
tr2176:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st730;
tr2177:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st730;
tr2179:
	{
		s->line_counter++;
	}
	goto st730;
tr2169:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st730;
tr2170:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st730;
tr2171:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st730;
tr2173:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st730;
st730:
	if ( ++p == pe )
		goto _test_eof730;
case 730:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st730;
		case 32: goto st730;
		case 40: goto tr2176;
		case 41: goto tr2177;
		case 1034: goto tr2179;
		case 1083: goto st738;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2178;
	goto tr1746;
tr2178:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st731;
tr2184:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st731;
st731:
	if ( ++p == pe )
		goto _test_eof731;
case 731:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2181;
		case 32: goto tr2181;
		case 40: goto tr2182;
		case 41: goto tr2183;
		case 1034: goto tr2185;
		case 1083: goto tr2186;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2184;
	goto tr1746;
tr2188:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st732;
tr2189:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st732;
tr2191:
	{
		s->line_counter++;
	}
	goto st732;
tr2181:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st732;
tr2182:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st732;
tr2183:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st732;
tr2185:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st732;
st732:
	if ( ++p == pe )
		goto _test_eof732;
case 732:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st732;
		case 32: goto st732;
		case 40: goto tr2188;
		case 41: goto tr2189;
		case 1034: goto tr2191;
		case 1083: goto st737;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2190;
	goto tr1746;
tr2190:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st733;
tr2196:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st733;
st733:
	if ( ++p == pe )
		goto _test_eof733;
case 733:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2193;
		case 32: goto tr2193;
		case 40: goto tr2194;
		case 41: goto tr2195;
		case 1034: goto tr2197;
		case 1083: goto tr2198;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2196;
	goto tr1746;
tr2200:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st734;
tr2201:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st734;
tr2203:
	{
		s->line_counter++;
	}
	goto st734;
tr2193:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st734;
tr2194:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st734;
tr2195:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st734;
tr2197:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st734;
st734:
	if ( ++p == pe )
		goto _test_eof734;
case 734:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st734;
		case 32: goto st734;
		case 40: goto tr2200;
		case 41: goto tr2201;
		case 42: goto tr2202;
		case 92: goto tr2202;
		case 95: goto tr2202;
		case 1034: goto tr2203;
		case 1083: goto st736;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2202;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2202;
	} else
		goto tr2202;
	goto tr71;
tr2202:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 735; goto st263;} }
	goto st735;
st735:
	if ( ++p == pe )
		goto _test_eof735;
case 735:
	switch( (*p) ) {
		case 32: goto tr2205;
		case 59: goto tr2205;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2205;
	} else if ( (*p) >= 9 )
		goto tr2205;
	goto tr71;
tr2205:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1164;
st1164:
	if ( ++p == pe )
		goto _test_eof1164;
case 1164:
	goto st0;
tr2198:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st736;
st736:
	if ( ++p == pe )
		goto _test_eof736;
case 736:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2203;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st736;
	goto tr71;
tr2186:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st737;
st737:
	if ( ++p == pe )
		goto _test_eof737;
case 737:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2191;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st737;
	goto tr71;
tr2174:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st738;
st738:
	if ( ++p == pe )
		goto _test_eof738;
case 738:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2179;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st738;
	goto tr71;
st739:
	if ( ++p == pe )
		goto _test_eof739;
case 739:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2206;
	goto tr1746;
tr2206:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st740;
tr2210:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st740;
st740:
	if ( ++p == pe )
		goto _test_eof740;
case 740:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2207;
		case 32: goto tr2207;
		case 40: goto tr2208;
		case 41: goto tr2209;
		case 1034: goto tr2211;
		case 1083: goto tr2212;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2210;
	goto tr1746;
tr2214:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st741;
tr2215:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st741;
tr2217:
	{
		s->line_counter++;
	}
	goto st741;
tr2207:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st741;
tr2208:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st741;
tr2209:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st741;
tr2211:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st741;
st741:
	if ( ++p == pe )
		goto _test_eof741;
case 741:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st741;
		case 32: goto st741;
		case 40: goto tr2214;
		case 41: goto tr2215;
		case 1034: goto tr2217;
		case 1083: goto st755;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2216;
	goto tr1746;
tr2216:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st742;
tr2222:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st742;
st742:
	if ( ++p == pe )
		goto _test_eof742;
case 742:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2219;
		case 32: goto tr2219;
		case 40: goto tr2220;
		case 41: goto tr2221;
		case 1034: goto tr2223;
		case 1083: goto tr2224;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2222;
	goto tr1746;
tr2227:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st743;
tr2228:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st743;
tr2229:
	{
		s->line_counter++;
	}
	goto st743;
tr2219:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st743;
tr2220:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st743;
tr2221:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st743;
tr2223:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st743;
st743:
	if ( ++p == pe )
		goto _test_eof743;
case 743:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st743;
		case 32: goto st743;
		case 40: goto tr2227;
		case 41: goto tr2228;
		case 1034: goto tr2229;
		case 1083: goto st754;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2225;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2225;
	} else
		goto tr2225;
	goto tr71;
tr2225:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 744; goto st272;} }
	goto st744;
st744:
	if ( ++p == pe )
		goto _test_eof744;
case 744:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2231;
		case 32: goto tr2231;
		case 40: goto tr2232;
		case 41: goto tr2233;
		case 1034: goto tr2234;
		case 1083: goto tr2235;
	}
	goto tr71;
tr2238:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st745;
tr2239:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st745;
tr2240:
	{
		s->line_counter++;
	}
	goto st745;
tr2231:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st745;
tr2232:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st745;
tr2233:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st745;
tr2234:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st745;
st745:
	if ( ++p == pe )
		goto _test_eof745;
case 745:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st745;
		case 32: goto st745;
		case 40: goto tr2238;
		case 41: goto tr2239;
		case 1034: goto tr2240;
		case 1083: goto st753;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2236;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2236;
	} else
		goto tr2236;
	goto tr71;
tr2236:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 746; goto st272;} }
	goto st746;
st746:
	if ( ++p == pe )
		goto _test_eof746;
case 746:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2242;
		case 32: goto tr2242;
		case 40: goto tr2243;
		case 41: goto tr2244;
		case 1034: goto tr2245;
		case 1083: goto tr2246;
	}
	goto tr71;
tr2249:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st747;
tr2250:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st747;
tr2251:
	{
		s->line_counter++;
	}
	goto st747;
tr2242:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st747;
tr2243:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st747;
tr2244:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st747;
tr2245:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st747;
st747:
	if ( ++p == pe )
		goto _test_eof747;
case 747:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st747;
		case 32: goto st747;
		case 40: goto tr2249;
		case 41: goto tr2250;
		case 1034: goto tr2251;
		case 1083: goto st752;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2247;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2247;
	} else
		goto tr2247;
	goto tr71;
tr2247:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 748; goto st272;} }
	goto st748;
st748:
	if ( ++p == pe )
		goto _test_eof748;
case 748:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2253;
		case 32: goto tr2253;
		case 40: goto tr2254;
		case 41: goto tr2255;
		case 1034: goto tr2256;
		case 1083: goto tr2257;
	}
	goto tr71;
tr2259:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st749;
tr2260:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st749;
tr2262:
	{
		s->line_counter++;
	}
	goto st749;
tr2253:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st749;
tr2254:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st749;
tr2255:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st749;
tr2256:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st749;
st749:
	if ( ++p == pe )
		goto _test_eof749;
case 749:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st749;
		case 32: goto st749;
		case 40: goto tr2259;
		case 41: goto tr2260;
		case 42: goto tr2261;
		case 92: goto tr2261;
		case 95: goto tr2261;
		case 1034: goto tr2262;
		case 1083: goto st751;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2261;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2261;
	} else
		goto tr2261;
	goto tr71;
tr2261:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 750; goto st263;} }
	goto st750;
st750:
	if ( ++p == pe )
		goto _test_eof750;
case 750:
	switch( (*p) ) {
		case 32: goto tr2264;
		case 59: goto tr2264;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2264;
	} else if ( (*p) >= 9 )
		goto tr2264;
	goto tr71;
tr2264:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1165;
st1165:
	if ( ++p == pe )
		goto _test_eof1165;
case 1165:
	goto st0;
tr2257:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st751;
st751:
	if ( ++p == pe )
		goto _test_eof751;
case 751:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2262;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st751;
	goto tr71;
tr2246:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st752;
st752:
	if ( ++p == pe )
		goto _test_eof752;
case 752:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2251;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st752;
	goto tr71;
tr2235:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st753;
st753:
	if ( ++p == pe )
		goto _test_eof753;
case 753:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2240;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st753;
	goto tr71;
tr2224:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st754;
st754:
	if ( ++p == pe )
		goto _test_eof754;
case 754:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2229;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st754;
	goto tr71;
tr2212:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st755;
st755:
	if ( ++p == pe )
		goto _test_eof755;
case 755:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2217;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st755;
	goto tr71;
st756:
	if ( ++p == pe )
		goto _test_eof756;
case 756:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2265;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2265;
	} else
		goto tr2265;
	goto tr71;
tr2265:
	{ p--; {stack[top++] = 757; goto st575;} }
	goto st757;
st757:
	if ( ++p == pe )
		goto _test_eof757;
case 757:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st758;
		case 32: goto st758;
		case 40: goto tr2267;
		case 41: goto tr2268;
		case 1034: goto tr2269;
		case 1083: goto st766;
	}
	goto tr71;
tr2267:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st758;
tr2268:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st758;
tr2269:
	{
		s->line_counter++;
	}
	goto st758;
st758:
	if ( ++p == pe )
		goto _test_eof758;
case 758:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st758;
		case 32: goto st758;
		case 40: goto tr2267;
		case 41: goto tr2268;
		case 1034: goto tr2269;
		case 1083: goto st766;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2271;
	goto tr1746;
tr2271:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st759;
tr2275:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st759;
st759:
	if ( ++p == pe )
		goto _test_eof759;
case 759:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2272;
		case 32: goto tr2272;
		case 40: goto tr2273;
		case 41: goto tr2274;
		case 1034: goto tr2276;
		case 1083: goto tr2277;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2275;
	goto tr1746;
tr2279:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st760;
tr2280:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st760;
tr2282:
	{
		s->line_counter++;
	}
	goto st760;
tr2272:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st760;
tr2273:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st760;
tr2274:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st760;
tr2276:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st760;
st760:
	if ( ++p == pe )
		goto _test_eof760;
case 760:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st760;
		case 32: goto st760;
		case 40: goto tr2279;
		case 41: goto tr2280;
		case 1034: goto tr2282;
		case 1083: goto st765;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2281;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2281;
	} else
		goto tr2281;
	goto tr71;
tr2281:
	{ p--; {stack[top++] = 761; goto st480;} }
	goto st761;
st761:
	if ( ++p == pe )
		goto _test_eof761;
case 761:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st762;
		case 32: goto st762;
		case 40: goto tr2285;
		case 41: goto tr2286;
		case 1034: goto tr2287;
		case 1083: goto st764;
	}
	goto tr71;
tr2285:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st762;
tr2286:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st762;
tr2287:
	{
		s->line_counter++;
	}
	goto st762;
st762:
	if ( ++p == pe )
		goto _test_eof762;
case 762:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st762;
		case 32: goto st762;
		case 40: goto tr2285;
		case 41: goto tr2286;
		case 43: goto tr2289;
		case 1034: goto tr2287;
		case 1083: goto st764;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr2289;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2289;
	} else
		goto tr2289;
	goto tr71;
tr2289:
	{ p--; {stack[top++] = 763; goto st322;} }
	goto st763;
st763:
	if ( ++p == pe )
		goto _test_eof763;
case 763:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1152 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1546: goto tr2290;
		case 1595: goto tr2290;
	}
	goto tr71;
tr2290:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1166;
st1166:
	if ( ++p == pe )
		goto _test_eof1166;
case 1166:
	goto st0;
st764:
	if ( ++p == pe )
		goto _test_eof764;
case 764:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2287;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st764;
	goto tr71;
tr2277:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st765;
st765:
	if ( ++p == pe )
		goto _test_eof765;
case 765:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2282;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st765;
	goto tr71;
st766:
	if ( ++p == pe )
		goto _test_eof766;
case 766:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2269;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st766;
	goto tr71;
tr2294:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st767;
tr2295:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st767;
tr2298:
	{
		s->line_counter++;
	}
	goto st767;
tr2311:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	goto st767;
tr2312:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st767;
tr2313:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st767;
tr2315:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->line_counter++;
	}
	goto st767;
st767:
	if ( ++p == pe )
		goto _test_eof767;
case 767:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st767;
		case 32: goto st767;
		case 33: goto tr2293;
		case 40: goto tr2294;
		case 41: goto tr2295;
		case 49: goto tr2296;
		case 50: goto tr2297;
		case 2058: goto tr2298;
		case 2107: goto st774;
		case 2314: goto tr2300;
		case 2363: goto tr2300;
		case 2570: goto tr2301;
		case 2619: goto tr2302;
	}
	goto tr2291;
tr2293:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.excl_flag = 128; // dec 128  = bin 10000000.
	}
	goto st768;
st768:
	if ( ++p == pe )
		goto _test_eof768;
case 768:
	switch( (*p) ) {
		case 49: goto tr2303;
		case 50: goto tr2304;
	}
	goto tr2291;
tr2296:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.addr_family = 1;
	}
	goto st769;
tr2303:
	{
		s->apl.addr_family = 1;
	}
	goto st769;
st769:
	if ( ++p == pe )
		goto _test_eof769;
case 769:
	if ( (*p) == 58 )
		goto st770;
	goto tr2291;
st770:
	if ( ++p == pe )
		goto _test_eof770;
case 770:
	if ( (*p) == 46 )
		goto tr2307;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2307;
	goto tr2306;
tr2307:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st771;
tr2308:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st771;
st771:
	if ( ++p == pe )
		goto _test_eof771;
case 771:
	if ( (*p) == 47 )
		goto tr2309;
	if ( 46 <= (*p) && (*p) <= 57 )
		goto tr2308;
	goto tr2306;
tr2309:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	goto st772;
tr2323:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	goto st772;
st772:
	if ( ++p == pe )
		goto _test_eof772;
case 772:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2310;
	goto tr2291;
tr2310:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st773;
tr2314:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st773;
st773:
	if ( ++p == pe )
		goto _test_eof773;
case 773:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2311;
		case 32: goto tr2311;
		case 40: goto tr2312;
		case 41: goto tr2313;
		case 2058: goto tr2315;
		case 2107: goto tr2316;
		case 2314: goto tr2317;
		case 2363: goto tr2317;
		case 2570: goto tr2318;
		case 2619: goto tr2319;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2314;
	goto tr2291;
tr2316:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	goto st774;
st774:
	if ( ++p == pe )
		goto _test_eof774;
case 774:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2298;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st774;
	goto tr71;
tr2300:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1167;
tr2317:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1167;
st1167:
	if ( ++p == pe )
		goto _test_eof1167;
case 1167:
	goto st0;
tr2301:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1168;
tr2318:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1168;
st1168:
	if ( ++p == pe )
		goto _test_eof1168;
case 1168:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st767;
		case 32: goto st767;
		case 33: goto tr2293;
		case 40: goto tr2294;
		case 41: goto tr2295;
		case 49: goto tr2296;
		case 50: goto tr2297;
		case 2058: goto tr2298;
		case 2107: goto st774;
		case 2314: goto tr2300;
		case 2363: goto tr2300;
		case 2570: goto tr2301;
		case 2619: goto tr2302;
	}
	goto tr2291;
tr2297:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.addr_family = 2;
	}
	goto st775;
tr2304:
	{
		s->apl.addr_family = 2;
	}
	goto st775;
st775:
	if ( ++p == pe )
		goto _test_eof775;
case 775:
	if ( (*p) == 58 )
		goto st776;
	goto tr2291;
st776:
	if ( ++p == pe )
		goto _test_eof776;
case 776:
	if ( (*p) == 46 )
		goto tr2321;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2321;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2321;
	} else
		goto tr2321;
	goto tr2306;
tr2321:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st777;
tr2322:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st777;
st777:
	if ( ++p == pe )
		goto _test_eof777;
case 777:
	if ( (*p) == 47 )
		goto tr2323;
	if ( (*p) < 65 ) {
		if ( 46 <= (*p) && (*p) <= 58 )
			goto tr2322;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2322;
	} else
		goto tr2322;
	goto tr2306;
tr2302:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1169;
tr2319:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
	}
	{
		// Write address family.
		*((uint16_t *)rdata_tail) = htons(s->apl.addr_family);
		rdata_tail += 2;
		// Write prefix length in bites.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = INET4_ADDR_LENGTH;
			memcpy(s->buffer, &(addr4.s_addr), len);
			break;
		case 2:
			len = INET6_ADDR_LENGTH;
			memcpy(s->buffer, &(addr6.s6_addr), len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st261;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1169;
st1169:
	if ( ++p == pe )
		goto _test_eof1169;
case 1169:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2298;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st774;
	goto tr71;
st778:
	if ( ++p == pe )
		goto _test_eof778;
case 778:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2324;
	goto tr1746;
tr2324:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st779;
tr2328:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st779;
st779:
	if ( ++p == pe )
		goto _test_eof779;
case 779:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2325;
		case 32: goto tr2325;
		case 40: goto tr2326;
		case 41: goto tr2327;
		case 1034: goto tr2329;
		case 1083: goto tr2330;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2328;
	goto tr1746;
tr2332:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st780;
tr2333:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st780;
tr2335:
	{
		s->line_counter++;
	}
	goto st780;
tr2325:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st780;
tr2326:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st780;
tr2327:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st780;
tr2329:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st780;
st780:
	if ( ++p == pe )
		goto _test_eof780;
case 780:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st780;
		case 32: goto st780;
		case 40: goto tr2332;
		case 41: goto tr2333;
		case 1034: goto tr2335;
		case 1083: goto st790;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2334;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2334;
	} else
		goto tr2334;
	goto tr71;
tr2334:
	{ p--; {stack[top++] = 781; goto st480;} }
	goto st781;
st781:
	if ( ++p == pe )
		goto _test_eof781;
case 781:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st782;
		case 32: goto st782;
		case 40: goto tr2338;
		case 41: goto tr2339;
		case 1034: goto tr2340;
		case 1083: goto st789;
	}
	goto tr71;
tr2338:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st782;
tr2339:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st782;
tr2340:
	{
		s->line_counter++;
	}
	goto st782;
st782:
	if ( ++p == pe )
		goto _test_eof782;
case 782:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st782;
		case 32: goto st782;
		case 40: goto tr2338;
		case 41: goto tr2339;
		case 1034: goto tr2340;
		case 1083: goto st789;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2342;
	goto tr1746;
tr2342:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st783;
tr2346:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st783;
st783:
	if ( ++p == pe )
		goto _test_eof783;
case 783:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2343;
		case 32: goto tr2343;
		case 40: goto tr2344;
		case 41: goto tr2345;
		case 1034: goto tr2347;
		case 1083: goto tr2348;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2346;
	goto tr1746;
tr2351:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st784;
tr2352:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st784;
tr2354:
	{
		s->line_counter++;
	}
	goto st784;
tr2343:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st784;
tr2344:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st784;
tr2345:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st784;
tr2347:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st784;
st784:
	if ( ++p == pe )
		goto _test_eof784;
case 784:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st784;
		case 32: goto st784;
		case 40: goto tr2351;
		case 41: goto tr2352;
		case 1034: goto tr2354;
		case 1083: goto st788;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2353;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2353;
	} else
		goto tr2353;
	goto tr2349;
tr2353:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st785;
st785:
	if ( ++p == pe )
		goto _test_eof785;
case 785:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2356;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2356;
	} else
		goto tr2356;
	goto tr2349;
tr2358:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st786;
tr2359:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st786;
tr2360:
	{
		s->line_counter++;
	}
	goto st786;
tr2356:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st786;
st786:
	if ( ++p == pe )
		goto _test_eof786;
case 786:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st786;
		case 32: goto st786;
		case 40: goto tr2358;
		case 41: goto tr2359;
		case 2058: goto tr2360;
		case 2107: goto st787;
		case 2314: goto tr2362;
		case 2363: goto tr2362;
		case 2570: goto tr2363;
		case 2619: goto tr2364;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2353;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2353;
	} else
		goto tr2353;
	goto tr2349;
st787:
	if ( ++p == pe )
		goto _test_eof787;
case 787:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2360;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st787;
	goto tr2349;
tr2362:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1170;
st1170:
	if ( ++p == pe )
		goto _test_eof1170;
case 1170:
	goto st0;
tr2363:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1171;
st1171:
	if ( ++p == pe )
		goto _test_eof1171;
case 1171:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st786;
		case 32: goto st786;
		case 40: goto tr2358;
		case 41: goto tr2359;
		case 2058: goto tr2360;
		case 2107: goto st787;
		case 2314: goto tr2362;
		case 2363: goto tr2362;
		case 2570: goto tr2363;
		case 2619: goto tr2364;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2353;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2353;
	} else
		goto tr2353;
	goto tr2349;
tr2364:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1172;
st1172:
	if ( ++p == pe )
		goto _test_eof1172;
case 1172:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2360;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st787;
	goto tr2349;
tr2348:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st788;
st788:
	if ( ++p == pe )
		goto _test_eof788;
case 788:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2354;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st788;
	goto tr71;
st789:
	if ( ++p == pe )
		goto _test_eof789;
case 789:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2340;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st789;
	goto tr71;
tr2330:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st790;
st790:
	if ( ++p == pe )
		goto _test_eof790;
case 790:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2335;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st790;
	goto tr71;
st791:
	if ( ++p == pe )
		goto _test_eof791;
case 791:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2365;
	goto tr1746;
tr2365:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st792;
tr2369:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st792;
st792:
	if ( ++p == pe )
		goto _test_eof792;
case 792:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2366;
		case 32: goto tr2366;
		case 40: goto tr2367;
		case 41: goto tr2368;
		case 1034: goto tr2370;
		case 1083: goto tr2371;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2369;
	goto tr1746;
tr2373:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st793;
tr2374:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st793;
tr2376:
	{
		s->line_counter++;
	}
	goto st793;
tr2366:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st793;
tr2367:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st793;
tr2368:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st793;
tr2370:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st793;
st793:
	if ( ++p == pe )
		goto _test_eof793;
case 793:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st793;
		case 32: goto st793;
		case 40: goto tr2373;
		case 41: goto tr2374;
		case 1034: goto tr2376;
		case 1083: goto st800;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2375;
	goto tr1746;
tr2375:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st794;
tr2381:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st794;
st794:
	if ( ++p == pe )
		goto _test_eof794;
case 794:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2378;
		case 32: goto tr2378;
		case 40: goto tr2379;
		case 41: goto tr2380;
		case 1034: goto tr2382;
		case 1083: goto tr2383;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2381;
	goto tr1746;
tr2385:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st795;
tr2386:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st795;
tr2388:
	{
		s->line_counter++;
	}
	goto st795;
tr2378:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st795;
tr2379:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st795;
tr2380:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st795;
tr2382:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st795;
st795:
	if ( ++p == pe )
		goto _test_eof795;
case 795:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st795;
		case 32: goto st795;
		case 40: goto tr2385;
		case 41: goto tr2386;
		case 1034: goto tr2388;
		case 1083: goto st799;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2387;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2387;
	} else
		goto tr2387;
	goto tr2349;
tr2387:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st796;
st796:
	if ( ++p == pe )
		goto _test_eof796;
case 796:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2390;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2390;
	} else
		goto tr2390;
	goto tr2349;
tr2392:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st797;
tr2393:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st797;
tr2394:
	{
		s->line_counter++;
	}
	goto st797;
tr2390:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st797;
st797:
	if ( ++p == pe )
		goto _test_eof797;
case 797:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st797;
		case 32: goto st797;
		case 40: goto tr2392;
		case 41: goto tr2393;
		case 2058: goto tr2394;
		case 2107: goto st798;
		case 2314: goto tr2396;
		case 2363: goto tr2396;
		case 2570: goto tr2397;
		case 2619: goto tr2398;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2387;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2387;
	} else
		goto tr2387;
	goto tr2349;
st798:
	if ( ++p == pe )
		goto _test_eof798;
case 798:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2394;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st798;
	goto tr2349;
tr2396:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1173;
st1173:
	if ( ++p == pe )
		goto _test_eof1173;
case 1173:
	goto st0;
tr2397:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1174;
st1174:
	if ( ++p == pe )
		goto _test_eof1174;
case 1174:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st797;
		case 32: goto st797;
		case 40: goto tr2392;
		case 41: goto tr2393;
		case 2058: goto tr2394;
		case 2107: goto st798;
		case 2314: goto tr2396;
		case 2363: goto tr2396;
		case 2570: goto tr2397;
		case 2619: goto tr2398;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2387;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2387;
	} else
		goto tr2387;
	goto tr2349;
tr2398:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1175;
st1175:
	if ( ++p == pe )
		goto _test_eof1175;
case 1175:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2394;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st798;
	goto tr2349;
tr2383:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st799;
st799:
	if ( ++p == pe )
		goto _test_eof799;
case 799:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2388;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st799;
	goto tr71;
tr2371:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st800;
st800:
	if ( ++p == pe )
		goto _test_eof800;
case 800:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2376;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st800;
	goto tr71;
st801:
	if ( ++p == pe )
		goto _test_eof801;
case 801:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2399;
	goto tr1746;
tr2399:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st802;
tr2403:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st802;
st802:
	if ( ++p == pe )
		goto _test_eof802;
case 802:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2400;
		case 32: goto tr2400;
		case 40: goto tr2401;
		case 41: goto tr2402;
		case 1034: goto tr2404;
		case 1083: goto tr2405;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2403;
	goto tr1746;
tr2408:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st803;
tr2409:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st803;
tr2414:
	{
		s->line_counter++;
	}
	goto st803;
tr2400:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st803;
tr2401:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st803;
tr2402:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st803;
tr2404:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st803;
st803:
	if ( ++p == pe )
		goto _test_eof803;
case 803:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st803;
		case 32: goto st803;
		case 40: goto tr2408;
		case 41: goto tr2409;
		case 48: goto tr2410;
		case 49: goto tr2411;
		case 50: goto tr2412;
		case 51: goto tr2413;
		case 1034: goto tr2414;
		case 1083: goto st839;
	}
	goto tr2406;
tr2410:
	{
		*(rdata_tail++) = 0;
	}
	goto st804;
st804:
	if ( ++p == pe )
		goto _test_eof804;
case 804:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st805;
		case 32: goto st805;
		case 40: goto tr2417;
		case 41: goto tr2418;
		case 1034: goto tr2419;
		case 1083: goto st817;
	}
	goto tr2406;
tr2417:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st805;
tr2418:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st805;
tr2419:
	{
		s->line_counter++;
	}
	goto st805;
st805:
	if ( ++p == pe )
		goto _test_eof805;
case 805:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st805;
		case 32: goto st805;
		case 40: goto tr2417;
		case 41: goto tr2418;
		case 1034: goto tr2419;
		case 1083: goto st817;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2422;
	goto tr2421;
tr2422:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st806;
tr2426:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st806;
st806:
	if ( ++p == pe )
		goto _test_eof806;
case 806:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2423;
		case 32: goto tr2423;
		case 40: goto tr2424;
		case 41: goto tr2425;
		case 1034: goto tr2427;
		case 1083: goto tr2428;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2426;
	goto tr2421;
tr2430:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st807;
tr2431:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st807;
tr2433:
	{
		s->line_counter++;
	}
	goto st807;
tr2423:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st807;
tr2424:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st807;
tr2425:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st807;
tr2427:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st807;
st807:
	if ( ++p == pe )
		goto _test_eof807;
case 807:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st807;
		case 32: goto st807;
		case 40: goto tr2430;
		case 41: goto tr2431;
		case 46: goto st808;
		case 1034: goto tr2433;
		case 1083: goto st816;
	}
	goto tr2406;
st808:
	if ( ++p == pe )
		goto _test_eof808;
case 808:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 6153: goto st809;
		case 6176: goto st809;
		case 6184: goto tr2437;
		case 6185: goto tr2438;
		case 6409: goto st812;
		case 6432: goto st812;
		case 6440: goto tr2440;
		case 6441: goto tr2441;
		case 6665: goto st814;
		case 6688: goto st814;
		case 6696: goto tr2443;
		case 6697: goto tr2444;
		case 9482: goto tr2445;
		case 9531: goto tr2445;
		case 9738: goto tr2445;
		case 9787: goto tr2445;
		case 10250: goto tr2446;
		case 10299: goto st811;
		case 10506: goto tr2445;
		case 10555: goto tr2445;
		case 10762: goto tr2448;
		case 10811: goto tr2449;
		case 11274: goto tr2450;
		case 11323: goto st813;
		case 11530: goto tr2445;
		case 11579: goto tr2445;
		case 11786: goto tr2452;
		case 11835: goto tr2453;
		case 12298: goto tr2454;
		case 12347: goto st815;
		case 12554: goto tr2445;
		case 12603: goto tr2445;
		case 12810: goto tr2456;
		case 12859: goto tr2457;
	}
	goto tr2435;
tr2437:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st809;
tr2438:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st809;
tr2446:
	{
		s->line_counter++;
	}
	goto st809;
tr2562:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st809;
tr2563:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st809;
tr2564:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st809;
tr2572:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st809;
tr2481:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st809;
tr2482:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st809;
tr2483:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st809;
tr2491:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st809;
tr2522:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st809;
tr2523:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st809;
tr2524:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st809;
tr2532:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st809;
st809:
	if ( ++p == pe )
		goto _test_eof809;
case 809:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(3200 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 s->number64 != 0  ) _widec += 512;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 3081: goto st809;
		case 3104: goto st809;
		case 3112: goto tr2437;
		case 3113: goto tr2438;
		case 3115: goto tr2459;
		case 4106: goto tr2446;
		case 4155: goto st811;
	}
	if ( _widec < 3137 ) {
		if ( 3119 <= _widec && _widec <= 3129 )
			goto tr2459;
	} else if ( _widec > 3162 ) {
		if ( 3169 <= _widec && _widec <= 3194 )
			goto tr2459;
	} else
		goto tr2459;
	goto tr2458;
tr2459:
	{ p--; {stack[top++] = 810; goto st322;} }
	goto st810;
st810:
	if ( ++p == pe )
		goto _test_eof810;
case 810:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1152 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1546: goto tr2445;
		case 1595: goto tr2445;
	}
	goto tr2458;
tr2445:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1176;
tr2490:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1176;
tr2571:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1176;
tr2531:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1176;
st1176:
	if ( ++p == pe )
		goto _test_eof1176;
case 1176:
	goto st0;
tr2573:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st811;
tr2492:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st811;
tr2533:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st811;
st811:
	if ( ++p == pe )
		goto _test_eof811;
case 811:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(3200 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
	}
	if ( _widec == 4106 )
		goto tr2446;
	if ( 3968 <= _widec && _widec <= 4223 )
		goto st811;
	goto tr2458;
tr2440:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st812;
tr2441:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st812;
tr2450:
	{
		s->line_counter++;
	}
	goto st812;
tr2565:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st812;
tr2566:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st812;
tr2567:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st812;
tr2576:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st812;
tr2484:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st812;
tr2485:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st812;
tr2486:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st812;
tr2495:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st812;
tr2525:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st812;
tr2526:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st812;
tr2527:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st812;
tr2536:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st812;
st812:
	if ( ++p == pe )
		goto _test_eof812;
case 812:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(12928 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(4224 + ((*p) - -128));
				if (
 s->number64 == 0  ) _widec += 256;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(12928 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else {
		_widec = (short)(4224 + ((*p) - -128));
		if (
 s->number64 == 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4617: goto st812;
		case 4640: goto st812;
		case 4648: goto tr2440;
		case 4649: goto tr2441;
		case 13578: goto tr2445;
		case 13627: goto tr2445;
		case 13834: goto tr2445;
		case 13883: goto tr2445;
		case 14346: goto tr2450;
		case 14395: goto st813;
		case 14602: goto tr2445;
		case 14651: goto tr2445;
		case 14858: goto tr2452;
		case 14907: goto tr2453;
	}
	goto tr2458;
tr2577:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st813;
tr2496:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st813;
tr2537:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st813;
st813:
	if ( ++p == pe )
		goto _test_eof813;
case 813:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(4736 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(4736 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(4736 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	if ( _widec == 5642 )
		goto tr2450;
	if ( 5504 <= _widec && _widec <= 5759 )
		goto st813;
	goto tr2458;
tr2452:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1177;
tr2497:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1177;
tr2538:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1177;
tr2578:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1177;
st1177:
	if ( ++p == pe )
		goto _test_eof1177;
case 1177:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(12928 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(4224 + ((*p) - -128));
				if (
 s->number64 == 0  ) _widec += 256;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(12928 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else {
		_widec = (short)(4224 + ((*p) - -128));
		if (
 s->number64 == 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4617: goto st812;
		case 4640: goto st812;
		case 4648: goto tr2440;
		case 4649: goto tr2441;
		case 13578: goto tr2445;
		case 13627: goto tr2445;
		case 13834: goto tr2445;
		case 13883: goto tr2445;
		case 14346: goto tr2450;
		case 14395: goto st813;
		case 14602: goto tr2445;
		case 14651: goto tr2445;
		case 14858: goto tr2452;
		case 14907: goto tr2453;
	}
	goto tr2458;
tr2453:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1178;
tr2498:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1178;
tr2579:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1178;
tr2539:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1178;
st1178:
	if ( ++p == pe )
		goto _test_eof1178;
case 1178:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(4736 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(4736 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(4736 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	if ( _widec == 5642 )
		goto tr2450;
	if ( 5504 <= _widec && _widec <= 5759 )
		goto st813;
	goto tr2458;
tr2443:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st814;
tr2444:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st814;
tr2454:
	{
		s->line_counter++;
	}
	goto st814;
tr2568:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st814;
tr2569:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st814;
tr2570:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st814;
tr2580:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st814;
tr2487:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st814;
tr2488:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st814;
tr2489:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st814;
tr2499:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st814;
tr2528:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st814;
tr2529:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st814;
tr2530:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st814;
tr2540:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st814;
st814:
	if ( ++p == pe )
		goto _test_eof814;
case 814:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(8832 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 !s->multiline  ) _widec += 512;
					if (
 s->number64 != 0  ) _widec += 1024;
					if (
 s->number64 == 0  ) _widec += 2048;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(5760 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
					if (
 s->number64 == 0  ) _widec += 512;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(8832 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
			if (
 s->number64 != 0  ) _widec += 1024;
			if (
 s->number64 == 0  ) _widec += 2048;
		}
	} else {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 3115: goto tr2459;
		case 6153: goto st809;
		case 6176: goto st809;
		case 6184: goto tr2437;
		case 6185: goto tr2438;
		case 6409: goto st812;
		case 6432: goto st812;
		case 6440: goto tr2440;
		case 6441: goto tr2441;
		case 6665: goto st814;
		case 6688: goto st814;
		case 6696: goto tr2443;
		case 6697: goto tr2444;
		case 9482: goto tr2445;
		case 9531: goto tr2445;
		case 9738: goto tr2445;
		case 9787: goto tr2445;
		case 10250: goto tr2446;
		case 10299: goto st811;
		case 10506: goto tr2445;
		case 10555: goto tr2445;
		case 10762: goto tr2448;
		case 10811: goto tr2449;
		case 11274: goto tr2450;
		case 11323: goto st813;
		case 11530: goto tr2445;
		case 11579: goto tr2445;
		case 11786: goto tr2452;
		case 11835: goto tr2453;
		case 12298: goto tr2454;
		case 12347: goto st815;
		case 12554: goto tr2445;
		case 12603: goto tr2445;
		case 12810: goto tr2456;
		case 12859: goto tr2457;
	}
	if ( _widec < 3137 ) {
		if ( 3119 <= _widec && _widec <= 3129 )
			goto tr2459;
	} else if ( _widec > 3162 ) {
		if ( 3169 <= _widec && _widec <= 3194 )
			goto tr2459;
	} else
		goto tr2459;
	goto tr2458;
tr2448:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1179;
tr2493:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1179;
tr2534:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1179;
tr2574:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1179;
st1179:
	if ( ++p == pe )
		goto _test_eof1179;
case 1179:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(3200 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 s->number64 != 0  ) _widec += 512;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 3081: goto st809;
		case 3104: goto st809;
		case 3112: goto tr2437;
		case 3113: goto tr2438;
		case 3115: goto tr2459;
		case 4106: goto tr2446;
		case 4155: goto st811;
	}
	if ( _widec < 3137 ) {
		if ( 3119 <= _widec && _widec <= 3129 )
			goto tr2459;
	} else if ( _widec > 3162 ) {
		if ( 3169 <= _widec && _widec <= 3194 )
			goto tr2459;
	} else
		goto tr2459;
	goto tr2458;
tr2449:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1180;
tr2494:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1180;
tr2575:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1180;
tr2535:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1180;
st1180:
	if ( ++p == pe )
		goto _test_eof1180;
case 1180:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(3200 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(3200 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
	}
	if ( _widec == 4106 )
		goto tr2446;
	if ( 3968 <= _widec && _widec <= 4223 )
		goto st811;
	goto tr2458;
tr2581:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st815;
tr2500:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	goto st815;
tr2541:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	goto st815;
st815:
	if ( ++p == pe )
		goto _test_eof815;
case 815:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
		if (
 s->number64 == 0  ) _widec += 1024;
	}
	switch( _widec ) {
		case 7690: goto tr2446;
		case 8202: goto tr2450;
		case 8714: goto tr2454;
	}
	if ( _widec < 8064 ) {
		if ( 7552 <= _widec && _widec <= 7807 )
			goto st811;
	} else if ( _widec > 8319 ) {
		if ( 8576 <= _widec && _widec <= 8831 )
			goto st815;
	} else
		goto st813;
	goto tr2458;
tr2456:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1181;
tr2501:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1181;
tr2542:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1181;
tr2582:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1181;
st1181:
	if ( ++p == pe )
		goto _test_eof1181;
case 1181:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(8832 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 !s->multiline  ) _widec += 512;
					if (
 s->number64 != 0  ) _widec += 1024;
					if (
 s->number64 == 0  ) _widec += 2048;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(5760 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
					if (
 s->number64 == 0  ) _widec += 512;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(2688 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(2688 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(8832 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
			if (
 s->number64 != 0  ) _widec += 1024;
			if (
 s->number64 == 0  ) _widec += 2048;
		}
	} else {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 3115: goto tr2459;
		case 6153: goto st809;
		case 6176: goto st809;
		case 6184: goto tr2437;
		case 6185: goto tr2438;
		case 6409: goto st812;
		case 6432: goto st812;
		case 6440: goto tr2440;
		case 6441: goto tr2441;
		case 6665: goto st814;
		case 6688: goto st814;
		case 6696: goto tr2443;
		case 6697: goto tr2444;
		case 9482: goto tr2445;
		case 9531: goto tr2445;
		case 9738: goto tr2445;
		case 9787: goto tr2445;
		case 10250: goto tr2446;
		case 10299: goto st811;
		case 10506: goto tr2445;
		case 10555: goto tr2445;
		case 10762: goto tr2448;
		case 10811: goto tr2449;
		case 11274: goto tr2450;
		case 11323: goto st813;
		case 11530: goto tr2445;
		case 11579: goto tr2445;
		case 11786: goto tr2452;
		case 11835: goto tr2453;
		case 12298: goto tr2454;
		case 12347: goto st815;
		case 12554: goto tr2445;
		case 12603: goto tr2445;
		case 12810: goto tr2456;
		case 12859: goto tr2457;
	}
	if ( _widec < 3137 ) {
		if ( 3119 <= _widec && _widec <= 3129 )
			goto tr2459;
	} else if ( _widec > 3162 ) {
		if ( 3169 <= _widec && _widec <= 3194 )
			goto tr2459;
	} else
		goto tr2459;
	goto tr2458;
tr2457:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1182;
tr2502:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1182;
tr2583:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1182;
tr2543:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, &addr6) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr6.s6_addr), INET6_ADDR_LENGTH);
		rdata_tail += INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1182;
st1182:
	if ( ++p == pe )
		goto _test_eof1182;
case 1182:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
		if (
 s->number64 == 0  ) _widec += 1024;
	}
	switch( _widec ) {
		case 7690: goto tr2446;
		case 8202: goto tr2450;
		case 8714: goto tr2454;
	}
	if ( _widec < 8064 ) {
		if ( 7552 <= _widec && _widec <= 7807 )
			goto st811;
	} else if ( _widec > 8319 ) {
		if ( 8576 <= _widec && _widec <= 8831 )
			goto st815;
	} else
		goto st813;
	goto tr2458;
tr2428:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st816;
st816:
	if ( ++p == pe )
		goto _test_eof816;
case 816:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2433;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st816;
	goto tr2406;
st817:
	if ( ++p == pe )
		goto _test_eof817;
case 817:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2419;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st817;
	goto tr2406;
tr2411:
	{
		*(rdata_tail++) = 1;
	}
	goto st818;
st818:
	if ( ++p == pe )
		goto _test_eof818;
case 818:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st819;
		case 32: goto st819;
		case 40: goto tr2461;
		case 41: goto tr2462;
		case 1034: goto tr2463;
		case 1083: goto st824;
	}
	goto tr2406;
tr2461:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st819;
tr2462:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st819;
tr2463:
	{
		s->line_counter++;
	}
	goto st819;
st819:
	if ( ++p == pe )
		goto _test_eof819;
case 819:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st819;
		case 32: goto st819;
		case 40: goto tr2461;
		case 41: goto tr2462;
		case 1034: goto tr2463;
		case 1083: goto st824;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2465;
	goto tr2421;
tr2465:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st820;
tr2469:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st820;
st820:
	if ( ++p == pe )
		goto _test_eof820;
case 820:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2466;
		case 32: goto tr2466;
		case 40: goto tr2467;
		case 41: goto tr2468;
		case 1034: goto tr2470;
		case 1083: goto tr2471;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2469;
	goto tr2421;
tr2474:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st821;
tr2475:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st821;
tr2477:
	{
		s->line_counter++;
	}
	goto st821;
tr2466:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st821;
tr2467:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st821;
tr2468:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st821;
tr2470:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st821;
st821:
	if ( ++p == pe )
		goto _test_eof821;
case 821:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st821;
		case 32: goto st821;
		case 40: goto tr2474;
		case 41: goto tr2475;
		case 46: goto tr2476;
		case 1034: goto tr2477;
		case 1083: goto st823;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2476;
	goto tr2472;
tr2476:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st822;
tr2480:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st822;
st822:
	if ( ++p == pe )
		goto _test_eof822;
case 822:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 46: goto tr2480;
		case 6153: goto tr2481;
		case 6176: goto tr2481;
		case 6184: goto tr2482;
		case 6185: goto tr2483;
		case 6409: goto tr2484;
		case 6432: goto tr2484;
		case 6440: goto tr2485;
		case 6441: goto tr2486;
		case 6665: goto tr2487;
		case 6688: goto tr2487;
		case 6696: goto tr2488;
		case 6697: goto tr2489;
		case 9482: goto tr2490;
		case 9531: goto tr2490;
		case 9738: goto tr2490;
		case 9787: goto tr2490;
		case 10250: goto tr2491;
		case 10299: goto tr2492;
		case 10506: goto tr2490;
		case 10555: goto tr2490;
		case 10762: goto tr2493;
		case 10811: goto tr2494;
		case 11274: goto tr2495;
		case 11323: goto tr2496;
		case 11530: goto tr2490;
		case 11579: goto tr2490;
		case 11786: goto tr2497;
		case 11835: goto tr2498;
		case 12298: goto tr2499;
		case 12347: goto tr2500;
		case 12554: goto tr2490;
		case 12603: goto tr2490;
		case 12810: goto tr2501;
		case 12859: goto tr2502;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2480;
	goto tr2479;
tr2471:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st823;
st823:
	if ( ++p == pe )
		goto _test_eof823;
case 823:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2477;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st823;
	goto tr2406;
st824:
	if ( ++p == pe )
		goto _test_eof824;
case 824:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2463;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st824;
	goto tr2406;
tr2412:
	{
		*(rdata_tail++) = 2;
	}
	goto st825;
st825:
	if ( ++p == pe )
		goto _test_eof825;
case 825:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st826;
		case 32: goto st826;
		case 40: goto tr2504;
		case 41: goto tr2505;
		case 1034: goto tr2506;
		case 1083: goto st831;
	}
	goto tr2406;
tr2504:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st826;
tr2505:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st826;
tr2506:
	{
		s->line_counter++;
	}
	goto st826;
st826:
	if ( ++p == pe )
		goto _test_eof826;
case 826:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st826;
		case 32: goto st826;
		case 40: goto tr2504;
		case 41: goto tr2505;
		case 1034: goto tr2506;
		case 1083: goto st831;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2508;
	goto tr2421;
tr2508:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st827;
tr2512:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st827;
st827:
	if ( ++p == pe )
		goto _test_eof827;
case 827:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2509;
		case 32: goto tr2509;
		case 40: goto tr2510;
		case 41: goto tr2511;
		case 1034: goto tr2513;
		case 1083: goto tr2514;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2512;
	goto tr2421;
tr2516:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st828;
tr2517:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st828;
tr2519:
	{
		s->line_counter++;
	}
	goto st828;
tr2509:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st828;
tr2510:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st828;
tr2511:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st828;
tr2513:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st828;
st828:
	if ( ++p == pe )
		goto _test_eof828;
case 828:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st828;
		case 32: goto st828;
		case 40: goto tr2516;
		case 41: goto tr2517;
		case 46: goto tr2518;
		case 1034: goto tr2519;
		case 1083: goto st830;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 58 )
			goto tr2518;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2518;
	} else
		goto tr2518;
	goto tr2472;
tr2518:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st829;
tr2521:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st829;
st829:
	if ( ++p == pe )
		goto _test_eof829;
case 829:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 46: goto tr2521;
		case 6153: goto tr2522;
		case 6176: goto tr2522;
		case 6184: goto tr2523;
		case 6185: goto tr2524;
		case 6409: goto tr2525;
		case 6432: goto tr2525;
		case 6440: goto tr2526;
		case 6441: goto tr2527;
		case 6665: goto tr2528;
		case 6688: goto tr2528;
		case 6696: goto tr2529;
		case 6697: goto tr2530;
		case 9482: goto tr2531;
		case 9531: goto tr2531;
		case 9738: goto tr2531;
		case 9787: goto tr2531;
		case 10250: goto tr2532;
		case 10299: goto tr2533;
		case 10506: goto tr2531;
		case 10555: goto tr2531;
		case 10762: goto tr2534;
		case 10811: goto tr2535;
		case 11274: goto tr2536;
		case 11323: goto tr2537;
		case 11530: goto tr2531;
		case 11579: goto tr2531;
		case 11786: goto tr2538;
		case 11835: goto tr2539;
		case 12298: goto tr2540;
		case 12347: goto tr2541;
		case 12554: goto tr2531;
		case 12603: goto tr2531;
		case 12810: goto tr2542;
		case 12859: goto tr2543;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 58 )
			goto tr2521;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2521;
	} else
		goto tr2521;
	goto tr2479;
tr2514:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st830;
st830:
	if ( ++p == pe )
		goto _test_eof830;
case 830:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2519;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st830;
	goto tr2406;
st831:
	if ( ++p == pe )
		goto _test_eof831;
case 831:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2506;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st831;
	goto tr2406;
tr2413:
	{
		*(rdata_tail++) = 3;
	}
	goto st832;
st832:
	if ( ++p == pe )
		goto _test_eof832;
case 832:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st833;
		case 32: goto st833;
		case 40: goto tr2545;
		case 41: goto tr2546;
		case 1034: goto tr2547;
		case 1083: goto st838;
	}
	goto tr2406;
tr2545:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st833;
tr2546:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st833;
tr2547:
	{
		s->line_counter++;
	}
	goto st833;
st833:
	if ( ++p == pe )
		goto _test_eof833;
case 833:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st833;
		case 32: goto st833;
		case 40: goto tr2545;
		case 41: goto tr2546;
		case 1034: goto tr2547;
		case 1083: goto st838;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2549;
	goto tr2421;
tr2549:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st834;
tr2553:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st834;
st834:
	if ( ++p == pe )
		goto _test_eof834;
case 834:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2550;
		case 32: goto tr2550;
		case 40: goto tr2551;
		case 41: goto tr2552;
		case 1034: goto tr2554;
		case 1083: goto tr2555;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2553;
	goto tr2421;
tr2557:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st835;
tr2558:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st835;
tr2560:
	{
		s->line_counter++;
	}
	goto st835;
tr2550:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st835;
tr2551:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st835;
tr2552:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st835;
tr2554:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st835;
st835:
	if ( ++p == pe )
		goto _test_eof835;
case 835:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st835;
		case 32: goto st835;
		case 40: goto tr2557;
		case 41: goto tr2558;
		case 42: goto tr2559;
		case 92: goto tr2559;
		case 95: goto tr2559;
		case 1034: goto tr2560;
		case 1083: goto st837;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2559;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2559;
	} else
		goto tr2559;
	goto tr2406;
tr2559:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 836; goto st263;} }
	goto st836;
st836:
	if ( ++p == pe )
		goto _test_eof836;
case 836:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5760 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(8832 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 6153: goto tr2562;
		case 6176: goto tr2562;
		case 6184: goto tr2563;
		case 6185: goto tr2564;
		case 6409: goto tr2565;
		case 6432: goto tr2565;
		case 6440: goto tr2566;
		case 6441: goto tr2567;
		case 6665: goto tr2568;
		case 6688: goto tr2568;
		case 6696: goto tr2569;
		case 6697: goto tr2570;
		case 9482: goto tr2571;
		case 9531: goto tr2571;
		case 9738: goto tr2571;
		case 9787: goto tr2571;
		case 10250: goto tr2572;
		case 10299: goto tr2573;
		case 10506: goto tr2571;
		case 10555: goto tr2571;
		case 10762: goto tr2574;
		case 10811: goto tr2575;
		case 11274: goto tr2576;
		case 11323: goto tr2577;
		case 11530: goto tr2571;
		case 11579: goto tr2571;
		case 11786: goto tr2578;
		case 11835: goto tr2579;
		case 12298: goto tr2580;
		case 12347: goto tr2581;
		case 12554: goto tr2571;
		case 12603: goto tr2571;
		case 12810: goto tr2582;
		case 12859: goto tr2583;
	}
	goto tr2435;
tr2555:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st837;
st837:
	if ( ++p == pe )
		goto _test_eof837;
case 837:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2560;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st837;
	goto tr2406;
st838:
	if ( ++p == pe )
		goto _test_eof838;
case 838:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2547;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st838;
	goto tr2406;
tr2405:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st839;
st839:
	if ( ++p == pe )
		goto _test_eof839;
case 839:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2414;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st839;
	goto tr71;
st840:
	if ( ++p == pe )
		goto _test_eof840;
case 840:
	switch( (*p) ) {
		case 65: goto st841;
		case 67: goto st875;
		case 68: goto st892;
		case 69: goto st906;
		case 72: goto st913;
		case 73: goto st918;
		case 75: goto st926;
		case 76: goto st930;
		case 77: goto st938;
		case 78: goto st944;
		case 80: goto st960;
		case 82: goto st963;
		case 83: goto st970;
		case 84: goto st981;
		case 85: goto st991;
		case 97: goto st841;
		case 99: goto st875;
		case 100: goto st892;
		case 101: goto st906;
		case 104: goto st913;
		case 105: goto st918;
		case 107: goto st926;
		case 108: goto st930;
		case 109: goto st938;
		case 110: goto st944;
		case 112: goto st960;
		case 114: goto st963;
		case 115: goto st970;
		case 116: goto st981;
		case 117: goto st991;
	}
	goto tr2584;
st841:
	if ( ++p == pe )
		goto _test_eof841;
case 841:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2600;
		case 32: goto tr2600;
		case 40: goto tr2601;
		case 41: goto tr2602;
		case 65: goto st866;
		case 70: goto st869;
		case 80: goto st873;
		case 97: goto st866;
		case 102: goto st869;
		case 112: goto st873;
		case 1034: goto tr2606;
		case 1083: goto tr2607;
	}
	goto tr2584;
tr2609:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2610:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2612:
	{
		s->line_counter++;
	}
	goto st842;
tr3003:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st842;
tr3004:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr3005:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr3007:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st842;
tr2600:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	goto st842;
tr2601:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2602:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2606:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2695:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	goto st842;
tr2696:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2697:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2698:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2703:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	goto st842;
tr2704:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2705:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2706:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2709:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	goto st842;
tr2710:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2711:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2712:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2719:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	goto st842;
tr2720:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2721:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2722:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2730:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	goto st842;
tr2731:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2732:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2733:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2735:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	goto st842;
tr2736:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2737:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2738:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2742:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	goto st842;
tr2743:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2744:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2745:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2750:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	goto st842;
tr2751:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2752:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2753:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2761:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	goto st842;
tr2762:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2763:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2764:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2770:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	goto st842;
tr2771:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2772:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2773:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2778:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	goto st842;
tr2779:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2780:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2781:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2783:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	goto st842;
tr2784:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2785:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2786:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2793:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	goto st842;
tr2794:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2795:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2796:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2799:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	goto st842;
tr2800:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2801:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2802:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2808:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	goto st842;
tr2809:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2810:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2811:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2820:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	goto st842;
tr2821:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2822:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2823:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2828:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	goto st842;
tr2829:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2830:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2831:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2833:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	goto st842;
tr2834:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2835:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2836:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2843:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	goto st842;
tr2844:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2845:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2846:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2849:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	goto st842;
tr2850:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2851:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2852:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2855:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	goto st842;
tr2856:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2857:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2858:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2860:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	goto st842;
tr2861:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2862:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2863:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2870:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	goto st842;
tr2871:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2872:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2873:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2875:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	goto st842;
tr2876:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2877:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2878:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2886:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	goto st842;
tr2887:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2888:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2889:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2892:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	goto st842;
tr2893:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2894:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2895:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2897:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	goto st842;
tr2898:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2899:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2901:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2904:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	goto st842;
tr2905:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2906:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2908:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2910:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	goto st842;
tr2911:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2912:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2914:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2920:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	goto st842;
tr2921:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2922:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2923:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2927:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	goto st842;
tr2928:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2929:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2930:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2935:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	goto st842;
tr2936:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2937:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2938:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2943:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	goto st842;
tr2944:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2945:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2946:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2948:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	goto st842;
tr2949:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2950:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2951:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2958:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	goto st842;
tr2959:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2960:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2961:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2964:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	goto st842;
tr2965:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2966:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2967:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2970:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	goto st842;
tr2971:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2972:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2973:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2978:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	goto st842;
tr2979:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2980:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2981:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2988:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	goto st842;
tr2989:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2990:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2991:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr2994:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	goto st842;
tr2995:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr2996:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr2997:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
tr3011:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	goto st842;
tr3012:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st842;
tr3013:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st842;
tr3014:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st842;
st842:
	if ( ++p == pe )
		goto _test_eof842;
case 842:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st842;
		case 32: goto st842;
		case 40: goto tr2609;
		case 41: goto tr2610;
		case 1034: goto tr2612;
		case 1083: goto st865;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr2611;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2611;
	} else
		goto tr2611;
	goto tr71;
tr2611:
	{ p--; {stack[top++] = 843; goto st480;} }
	goto st843;
st843:
	if ( ++p == pe )
		goto _test_eof843;
case 843:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st844;
		case 32: goto st844;
		case 40: goto tr2615;
		case 41: goto tr2616;
		case 1034: goto tr2617;
		case 1083: goto st864;
	}
	goto tr71;
tr2615:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st844;
tr2616:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st844;
tr2617:
	{
		s->line_counter++;
	}
	goto st844;
st844:
	if ( ++p == pe )
		goto _test_eof844;
case 844:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st844;
		case 32: goto st844;
		case 40: goto tr2615;
		case 41: goto tr2616;
		case 1034: goto tr2617;
		case 1083: goto st864;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2619;
	goto tr1746;
tr2619:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st845;
tr2623:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st845;
st845:
	if ( ++p == pe )
		goto _test_eof845;
case 845:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2620;
		case 32: goto tr2620;
		case 40: goto tr2621;
		case 41: goto tr2622;
		case 1034: goto tr2624;
		case 1083: goto tr2625;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2623;
	goto tr1746;
tr2627:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st846;
tr2628:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st846;
tr2630:
	{
		s->line_counter++;
	}
	goto st846;
tr2620:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st846;
tr2621:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st846;
tr2622:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st846;
tr2624:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st846;
st846:
	if ( ++p == pe )
		goto _test_eof846;
case 846:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st846;
		case 32: goto st846;
		case 40: goto tr2627;
		case 41: goto tr2628;
		case 1034: goto tr2630;
		case 1083: goto st863;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2629;
	goto tr1746;
tr2629:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st847;
tr2635:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st847;
st847:
	if ( ++p == pe )
		goto _test_eof847;
case 847:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2632;
		case 32: goto tr2632;
		case 40: goto tr2633;
		case 41: goto tr2634;
		case 1034: goto tr2636;
		case 1083: goto tr2637;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2635;
	goto tr1746;
tr2640:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st848;
tr2641:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st848;
tr2643:
	{
		s->line_counter++;
	}
	goto st848;
tr2632:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st848;
tr2633:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st848;
tr2634:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st848;
tr2636:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st848;
st848:
	if ( ++p == pe )
		goto _test_eof848;
case 848:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st848;
		case 32: goto st848;
		case 40: goto tr2640;
		case 41: goto tr2641;
		case 1034: goto tr2643;
		case 1083: goto st862;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2642;
	goto tr2638;
tr2642:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st849;
tr2648:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st849;
st849:
	if ( ++p == pe )
		goto _test_eof849;
case 849:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2645;
		case 32: goto tr2645;
		case 40: goto tr2646;
		case 41: goto tr2647;
		case 1034: goto tr2649;
		case 1083: goto tr2650;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2648;
	goto tr2638;
tr2652:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st850;
tr2653:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st850;
tr2655:
	{
		s->line_counter++;
	}
	goto st850;
tr2645:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	goto st850;
tr2646:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st850;
tr2647:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st850;
tr2649:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st850;
st850:
	if ( ++p == pe )
		goto _test_eof850;
case 850:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st850;
		case 32: goto st850;
		case 40: goto tr2652;
		case 41: goto tr2653;
		case 1034: goto tr2655;
		case 1083: goto st861;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2654;
	goto tr2638;
tr2654:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st851;
tr2660:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st851;
st851:
	if ( ++p == pe )
		goto _test_eof851;
case 851:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2657;
		case 32: goto tr2657;
		case 40: goto tr2658;
		case 41: goto tr2659;
		case 1034: goto tr2661;
		case 1083: goto tr2662;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2660;
	goto tr2638;
tr2664:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st852;
tr2665:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st852;
tr2667:
	{
		s->line_counter++;
	}
	goto st852;
tr2657:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	goto st852;
tr2658:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st852;
tr2659:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st852;
tr2661:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st852;
st852:
	if ( ++p == pe )
		goto _test_eof852;
case 852:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st852;
		case 32: goto st852;
		case 40: goto tr2664;
		case 41: goto tr2665;
		case 1034: goto tr2667;
		case 1083: goto st860;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2666;
	goto tr1746;
tr2666:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st853;
tr2672:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st853;
st853:
	if ( ++p == pe )
		goto _test_eof853;
case 853:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2669;
		case 32: goto tr2669;
		case 40: goto tr2670;
		case 41: goto tr2671;
		case 1034: goto tr2673;
		case 1083: goto tr2674;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2672;
	goto tr1746;
tr2676:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st854;
tr2677:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st854;
tr2679:
	{
		s->line_counter++;
	}
	goto st854;
tr2669:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st854;
tr2670:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st854;
tr2671:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st854;
tr2673:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st854;
st854:
	if ( ++p == pe )
		goto _test_eof854;
case 854:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st854;
		case 32: goto st854;
		case 40: goto tr2676;
		case 41: goto tr2677;
		case 42: goto tr2678;
		case 92: goto tr2678;
		case 95: goto tr2678;
		case 1034: goto tr2679;
		case 1083: goto st859;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2678;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2678;
	} else
		goto tr2678;
	goto tr71;
tr2678:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 855; goto st263;} }
	goto st855;
st855:
	if ( ++p == pe )
		goto _test_eof855;
case 855:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2681;
		case 32: goto tr2681;
		case 40: goto tr2682;
		case 41: goto tr2683;
		case 1034: goto tr2684;
		case 1083: goto tr2685;
	}
	goto tr71;
tr2687:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st856;
tr2688:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st856;
tr2690:
	{
		s->line_counter++;
	}
	goto st856;
tr2681:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st856;
tr2682:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st856;
tr2683:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st856;
tr2684:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st856;
st856:
	if ( ++p == pe )
		goto _test_eof856;
case 856:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st856;
		case 32: goto st856;
		case 40: goto tr2687;
		case 41: goto tr2688;
		case 43: goto tr2689;
		case 1034: goto tr2690;
		case 1083: goto st858;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr2689;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2689;
	} else
		goto tr2689;
	goto tr71;
tr2689:
	{ p--; {stack[top++] = 857; goto st322;} }
	goto st857;
st857:
	if ( ++p == pe )
		goto _test_eof857;
case 857:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1152 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1546: goto tr2692;
		case 1595: goto tr2692;
	}
	goto tr71;
tr2692:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1183;
st1183:
	if ( ++p == pe )
		goto _test_eof1183;
case 1183:
	goto st0;
tr2685:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st858;
st858:
	if ( ++p == pe )
		goto _test_eof858;
case 858:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2690;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st858;
	goto tr71;
tr2674:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st859;
st859:
	if ( ++p == pe )
		goto _test_eof859;
case 859:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2679;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st859;
	goto tr71;
tr2662:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	goto st860;
st860:
	if ( ++p == pe )
		goto _test_eof860;
case 860:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2667;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st860;
	goto tr71;
tr2650:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st261;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st261;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st261;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st261;}
		}
	}
	goto st861;
st861:
	if ( ++p == pe )
		goto _test_eof861;
case 861:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2655;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st861;
	goto tr71;
tr2637:
	{
		if (s->number64 <= UINT32_MAX) {
			*((uint32_t *)rdata_tail) = htonl((uint32_t)(s->number64));
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st862;
st862:
	if ( ++p == pe )
		goto _test_eof862;
case 862:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2643;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st862;
	goto tr71;
tr2625:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st863;
st863:
	if ( ++p == pe )
		goto _test_eof863;
case 863:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2630;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st863;
	goto tr71;
st864:
	if ( ++p == pe )
		goto _test_eof864;
case 864:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2617;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st864;
	goto tr71;
tr3008:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st865;
tr2607:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	goto st865;
tr2699:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	goto st865;
tr2707:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	goto st865;
tr2713:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	goto st865;
tr2723:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	goto st865;
tr2734:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	goto st865;
tr2739:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	goto st865;
tr2746:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	goto st865;
tr2754:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	goto st865;
tr2765:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	goto st865;
tr2774:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	goto st865;
tr2782:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	goto st865;
tr2787:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	goto st865;
tr2797:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	goto st865;
tr2803:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	goto st865;
tr2812:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	goto st865;
tr2824:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	goto st865;
tr2832:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	goto st865;
tr2837:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	goto st865;
tr2847:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	goto st865;
tr2853:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	goto st865;
tr2859:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	goto st865;
tr2864:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	goto st865;
tr2874:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	goto st865;
tr2879:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	goto st865;
tr2890:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	goto st865;
tr2896:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	goto st865;
tr2902:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	goto st865;
tr2909:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	goto st865;
tr2915:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	goto st865;
tr2924:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	goto st865;
tr2931:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	goto st865;
tr2939:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	goto st865;
tr2947:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	goto st865;
tr2952:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	goto st865;
tr2962:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	goto st865;
tr2968:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	goto st865;
tr2974:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	goto st865;
tr2982:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	goto st865;
tr2992:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	goto st865;
tr2998:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	goto st865;
tr3015:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	goto st865;
st865:
	if ( ++p == pe )
		goto _test_eof865;
case 865:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr2612;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st865;
	goto tr71;
st866:
	if ( ++p == pe )
		goto _test_eof866;
case 866:
	switch( (*p) ) {
		case 65: goto st867;
		case 97: goto st867;
	}
	goto tr2584;
st867:
	if ( ++p == pe )
		goto _test_eof867;
case 867:
	switch( (*p) ) {
		case 65: goto st868;
		case 97: goto st868;
	}
	goto tr2584;
st868:
	if ( ++p == pe )
		goto _test_eof868;
case 868:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2695;
		case 32: goto tr2695;
		case 40: goto tr2696;
		case 41: goto tr2697;
		case 1034: goto tr2698;
		case 1083: goto tr2699;
	}
	goto tr2584;
st869:
	if ( ++p == pe )
		goto _test_eof869;
case 869:
	switch( (*p) ) {
		case 83: goto st870;
		case 115: goto st870;
	}
	goto tr2584;
st870:
	if ( ++p == pe )
		goto _test_eof870;
case 870:
	switch( (*p) ) {
		case 68: goto st871;
		case 100: goto st871;
	}
	goto tr2584;
st871:
	if ( ++p == pe )
		goto _test_eof871;
case 871:
	switch( (*p) ) {
		case 66: goto st872;
		case 98: goto st872;
	}
	goto tr2584;
st872:
	if ( ++p == pe )
		goto _test_eof872;
case 872:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2703;
		case 32: goto tr2703;
		case 40: goto tr2704;
		case 41: goto tr2705;
		case 1034: goto tr2706;
		case 1083: goto tr2707;
	}
	goto tr2584;
st873:
	if ( ++p == pe )
		goto _test_eof873;
case 873:
	switch( (*p) ) {
		case 76: goto st874;
		case 108: goto st874;
	}
	goto tr2584;
st874:
	if ( ++p == pe )
		goto _test_eof874;
case 874:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2709;
		case 32: goto tr2709;
		case 40: goto tr2710;
		case 41: goto tr2711;
		case 1034: goto tr2712;
		case 1083: goto tr2713;
	}
	goto tr2584;
st875:
	if ( ++p == pe )
		goto _test_eof875;
case 875:
	switch( (*p) ) {
		case 65: goto st876;
		case 68: goto st878;
		case 69: goto st885;
		case 78: goto st888;
		case 97: goto st876;
		case 100: goto st878;
		case 101: goto st885;
		case 110: goto st888;
	}
	goto tr2584;
st876:
	if ( ++p == pe )
		goto _test_eof876;
case 876:
	switch( (*p) ) {
		case 65: goto st877;
		case 97: goto st877;
	}
	goto tr2584;
st877:
	if ( ++p == pe )
		goto _test_eof877;
case 877:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2719;
		case 32: goto tr2719;
		case 40: goto tr2720;
		case 41: goto tr2721;
		case 1034: goto tr2722;
		case 1083: goto tr2723;
	}
	goto tr2584;
st878:
	if ( ++p == pe )
		goto _test_eof878;
case 878:
	switch( (*p) ) {
		case 78: goto st879;
		case 83: goto st884;
		case 110: goto st879;
		case 115: goto st884;
	}
	goto tr2584;
st879:
	if ( ++p == pe )
		goto _test_eof879;
case 879:
	switch( (*p) ) {
		case 83: goto st880;
		case 115: goto st880;
	}
	goto tr2584;
st880:
	if ( ++p == pe )
		goto _test_eof880;
case 880:
	switch( (*p) ) {
		case 75: goto st881;
		case 107: goto st881;
	}
	goto tr2584;
st881:
	if ( ++p == pe )
		goto _test_eof881;
case 881:
	switch( (*p) ) {
		case 69: goto st882;
		case 101: goto st882;
	}
	goto tr2584;
st882:
	if ( ++p == pe )
		goto _test_eof882;
case 882:
	switch( (*p) ) {
		case 89: goto st883;
		case 121: goto st883;
	}
	goto tr2584;
st883:
	if ( ++p == pe )
		goto _test_eof883;
case 883:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2730;
		case 32: goto tr2730;
		case 40: goto tr2731;
		case 41: goto tr2732;
		case 1034: goto tr2733;
		case 1083: goto tr2734;
	}
	goto tr2584;
st884:
	if ( ++p == pe )
		goto _test_eof884;
case 884:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2735;
		case 32: goto tr2735;
		case 40: goto tr2736;
		case 41: goto tr2737;
		case 1034: goto tr2738;
		case 1083: goto tr2739;
	}
	goto tr2584;
st885:
	if ( ++p == pe )
		goto _test_eof885;
case 885:
	switch( (*p) ) {
		case 82: goto st886;
		case 114: goto st886;
	}
	goto tr2584;
st886:
	if ( ++p == pe )
		goto _test_eof886;
case 886:
	switch( (*p) ) {
		case 84: goto st887;
		case 116: goto st887;
	}
	goto tr2584;
st887:
	if ( ++p == pe )
		goto _test_eof887;
case 887:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2742;
		case 32: goto tr2742;
		case 40: goto tr2743;
		case 41: goto tr2744;
		case 1034: goto tr2745;
		case 1083: goto tr2746;
	}
	goto tr2584;
st888:
	if ( ++p == pe )
		goto _test_eof888;
case 888:
	switch( (*p) ) {
		case 65: goto st889;
		case 97: goto st889;
	}
	goto tr2584;
st889:
	if ( ++p == pe )
		goto _test_eof889;
case 889:
	switch( (*p) ) {
		case 77: goto st890;
		case 109: goto st890;
	}
	goto tr2584;
st890:
	if ( ++p == pe )
		goto _test_eof890;
case 890:
	switch( (*p) ) {
		case 69: goto st891;
		case 101: goto st891;
	}
	goto tr2584;
st891:
	if ( ++p == pe )
		goto _test_eof891;
case 891:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2750;
		case 32: goto tr2750;
		case 40: goto tr2751;
		case 41: goto tr2752;
		case 1034: goto tr2753;
		case 1083: goto tr2754;
	}
	goto tr2584;
st892:
	if ( ++p == pe )
		goto _test_eof892;
case 892:
	switch( (*p) ) {
		case 72: goto st893;
		case 78: goto st897;
		case 83: goto st905;
		case 104: goto st893;
		case 110: goto st897;
		case 115: goto st905;
	}
	goto tr2584;
st893:
	if ( ++p == pe )
		goto _test_eof893;
case 893:
	switch( (*p) ) {
		case 67: goto st894;
		case 99: goto st894;
	}
	goto tr2584;
st894:
	if ( ++p == pe )
		goto _test_eof894;
case 894:
	switch( (*p) ) {
		case 73: goto st895;
		case 105: goto st895;
	}
	goto tr2584;
st895:
	if ( ++p == pe )
		goto _test_eof895;
case 895:
	switch( (*p) ) {
		case 68: goto st896;
		case 100: goto st896;
	}
	goto tr2584;
st896:
	if ( ++p == pe )
		goto _test_eof896;
case 896:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2761;
		case 32: goto tr2761;
		case 40: goto tr2762;
		case 41: goto tr2763;
		case 1034: goto tr2764;
		case 1083: goto tr2765;
	}
	goto tr2584;
st897:
	if ( ++p == pe )
		goto _test_eof897;
case 897:
	switch( (*p) ) {
		case 65: goto st898;
		case 83: goto st901;
		case 97: goto st898;
		case 115: goto st901;
	}
	goto tr2584;
st898:
	if ( ++p == pe )
		goto _test_eof898;
case 898:
	switch( (*p) ) {
		case 77: goto st899;
		case 109: goto st899;
	}
	goto tr2584;
st899:
	if ( ++p == pe )
		goto _test_eof899;
case 899:
	switch( (*p) ) {
		case 69: goto st900;
		case 101: goto st900;
	}
	goto tr2584;
st900:
	if ( ++p == pe )
		goto _test_eof900;
case 900:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2770;
		case 32: goto tr2770;
		case 40: goto tr2771;
		case 41: goto tr2772;
		case 1034: goto tr2773;
		case 1083: goto tr2774;
	}
	goto tr2584;
st901:
	if ( ++p == pe )
		goto _test_eof901;
case 901:
	switch( (*p) ) {
		case 75: goto st902;
		case 107: goto st902;
	}
	goto tr2584;
st902:
	if ( ++p == pe )
		goto _test_eof902;
case 902:
	switch( (*p) ) {
		case 69: goto st903;
		case 101: goto st903;
	}
	goto tr2584;
st903:
	if ( ++p == pe )
		goto _test_eof903;
case 903:
	switch( (*p) ) {
		case 89: goto st904;
		case 121: goto st904;
	}
	goto tr2584;
st904:
	if ( ++p == pe )
		goto _test_eof904;
case 904:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2778;
		case 32: goto tr2778;
		case 40: goto tr2779;
		case 41: goto tr2780;
		case 1034: goto tr2781;
		case 1083: goto tr2782;
	}
	goto tr2584;
st905:
	if ( ++p == pe )
		goto _test_eof905;
case 905:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2783;
		case 32: goto tr2783;
		case 40: goto tr2784;
		case 41: goto tr2785;
		case 1034: goto tr2786;
		case 1083: goto tr2787;
	}
	goto tr2584;
st906:
	if ( ++p == pe )
		goto _test_eof906;
case 906:
	switch( (*p) ) {
		case 85: goto st907;
		case 117: goto st907;
	}
	goto tr2584;
st907:
	if ( ++p == pe )
		goto _test_eof907;
case 907:
	switch( (*p) ) {
		case 73: goto st908;
		case 105: goto st908;
	}
	goto tr2584;
st908:
	if ( ++p == pe )
		goto _test_eof908;
case 908:
	switch( (*p) ) {
		case 52: goto st909;
		case 54: goto st911;
	}
	goto tr2584;
st909:
	if ( ++p == pe )
		goto _test_eof909;
case 909:
	if ( (*p) == 56 )
		goto st910;
	goto tr2584;
st910:
	if ( ++p == pe )
		goto _test_eof910;
case 910:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2793;
		case 32: goto tr2793;
		case 40: goto tr2794;
		case 41: goto tr2795;
		case 1034: goto tr2796;
		case 1083: goto tr2797;
	}
	goto tr2584;
st911:
	if ( ++p == pe )
		goto _test_eof911;
case 911:
	if ( (*p) == 52 )
		goto st912;
	goto tr2584;
st912:
	if ( ++p == pe )
		goto _test_eof912;
case 912:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2799;
		case 32: goto tr2799;
		case 40: goto tr2800;
		case 41: goto tr2801;
		case 1034: goto tr2802;
		case 1083: goto tr2803;
	}
	goto tr2584;
st913:
	if ( ++p == pe )
		goto _test_eof913;
case 913:
	switch( (*p) ) {
		case 73: goto st914;
		case 105: goto st914;
	}
	goto tr2584;
st914:
	if ( ++p == pe )
		goto _test_eof914;
case 914:
	switch( (*p) ) {
		case 78: goto st915;
		case 110: goto st915;
	}
	goto tr2584;
st915:
	if ( ++p == pe )
		goto _test_eof915;
case 915:
	switch( (*p) ) {
		case 70: goto st916;
		case 102: goto st916;
	}
	goto tr2584;
st916:
	if ( ++p == pe )
		goto _test_eof916;
case 916:
	switch( (*p) ) {
		case 79: goto st917;
		case 111: goto st917;
	}
	goto tr2584;
st917:
	if ( ++p == pe )
		goto _test_eof917;
case 917:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2808;
		case 32: goto tr2808;
		case 40: goto tr2809;
		case 41: goto tr2810;
		case 1034: goto tr2811;
		case 1083: goto tr2812;
	}
	goto tr2584;
st918:
	if ( ++p == pe )
		goto _test_eof918;
case 918:
	switch( (*p) ) {
		case 80: goto st919;
		case 112: goto st919;
	}
	goto tr2584;
st919:
	if ( ++p == pe )
		goto _test_eof919;
case 919:
	switch( (*p) ) {
		case 83: goto st920;
		case 115: goto st920;
	}
	goto tr2584;
st920:
	if ( ++p == pe )
		goto _test_eof920;
case 920:
	switch( (*p) ) {
		case 69: goto st921;
		case 101: goto st921;
	}
	goto tr2584;
st921:
	if ( ++p == pe )
		goto _test_eof921;
case 921:
	switch( (*p) ) {
		case 67: goto st922;
		case 99: goto st922;
	}
	goto tr2584;
st922:
	if ( ++p == pe )
		goto _test_eof922;
case 922:
	switch( (*p) ) {
		case 75: goto st923;
		case 107: goto st923;
	}
	goto tr2584;
st923:
	if ( ++p == pe )
		goto _test_eof923;
case 923:
	switch( (*p) ) {
		case 69: goto st924;
		case 101: goto st924;
	}
	goto tr2584;
st924:
	if ( ++p == pe )
		goto _test_eof924;
case 924:
	switch( (*p) ) {
		case 89: goto st925;
		case 121: goto st925;
	}
	goto tr2584;
st925:
	if ( ++p == pe )
		goto _test_eof925;
case 925:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2820;
		case 32: goto tr2820;
		case 40: goto tr2821;
		case 41: goto tr2822;
		case 1034: goto tr2823;
		case 1083: goto tr2824;
	}
	goto tr2584;
st926:
	if ( ++p == pe )
		goto _test_eof926;
case 926:
	switch( (*p) ) {
		case 69: goto st927;
		case 88: goto st929;
		case 101: goto st927;
		case 120: goto st929;
	}
	goto tr2584;
st927:
	if ( ++p == pe )
		goto _test_eof927;
case 927:
	switch( (*p) ) {
		case 89: goto st928;
		case 121: goto st928;
	}
	goto tr2584;
st928:
	if ( ++p == pe )
		goto _test_eof928;
case 928:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2828;
		case 32: goto tr2828;
		case 40: goto tr2829;
		case 41: goto tr2830;
		case 1034: goto tr2831;
		case 1083: goto tr2832;
	}
	goto tr2584;
st929:
	if ( ++p == pe )
		goto _test_eof929;
case 929:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2833;
		case 32: goto tr2833;
		case 40: goto tr2834;
		case 41: goto tr2835;
		case 1034: goto tr2836;
		case 1083: goto tr2837;
	}
	goto tr2584;
st930:
	if ( ++p == pe )
		goto _test_eof930;
case 930:
	switch( (*p) ) {
		case 51: goto st931;
		case 54: goto st933;
		case 79: goto st935;
		case 80: goto st937;
		case 111: goto st935;
		case 112: goto st937;
	}
	goto tr2584;
st931:
	if ( ++p == pe )
		goto _test_eof931;
case 931:
	if ( (*p) == 50 )
		goto st932;
	goto tr2584;
st932:
	if ( ++p == pe )
		goto _test_eof932;
case 932:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2843;
		case 32: goto tr2843;
		case 40: goto tr2844;
		case 41: goto tr2845;
		case 1034: goto tr2846;
		case 1083: goto tr2847;
	}
	goto tr2584;
st933:
	if ( ++p == pe )
		goto _test_eof933;
case 933:
	if ( (*p) == 52 )
		goto st934;
	goto tr2584;
st934:
	if ( ++p == pe )
		goto _test_eof934;
case 934:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2849;
		case 32: goto tr2849;
		case 40: goto tr2850;
		case 41: goto tr2851;
		case 1034: goto tr2852;
		case 1083: goto tr2853;
	}
	goto tr2584;
st935:
	if ( ++p == pe )
		goto _test_eof935;
case 935:
	switch( (*p) ) {
		case 67: goto st936;
		case 99: goto st936;
	}
	goto tr2584;
st936:
	if ( ++p == pe )
		goto _test_eof936;
case 936:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2855;
		case 32: goto tr2855;
		case 40: goto tr2856;
		case 41: goto tr2857;
		case 1034: goto tr2858;
		case 1083: goto tr2859;
	}
	goto tr2584;
st937:
	if ( ++p == pe )
		goto _test_eof937;
case 937:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2860;
		case 32: goto tr2860;
		case 40: goto tr2861;
		case 41: goto tr2862;
		case 1034: goto tr2863;
		case 1083: goto tr2864;
	}
	goto tr2584;
st938:
	if ( ++p == pe )
		goto _test_eof938;
case 938:
	switch( (*p) ) {
		case 73: goto st939;
		case 88: goto st943;
		case 105: goto st939;
		case 120: goto st943;
	}
	goto tr2584;
st939:
	if ( ++p == pe )
		goto _test_eof939;
case 939:
	switch( (*p) ) {
		case 78: goto st940;
		case 110: goto st940;
	}
	goto tr2584;
st940:
	if ( ++p == pe )
		goto _test_eof940;
case 940:
	switch( (*p) ) {
		case 70: goto st941;
		case 102: goto st941;
	}
	goto tr2584;
st941:
	if ( ++p == pe )
		goto _test_eof941;
case 941:
	switch( (*p) ) {
		case 79: goto st942;
		case 111: goto st942;
	}
	goto tr2584;
st942:
	if ( ++p == pe )
		goto _test_eof942;
case 942:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2870;
		case 32: goto tr2870;
		case 40: goto tr2871;
		case 41: goto tr2872;
		case 1034: goto tr2873;
		case 1083: goto tr2874;
	}
	goto tr2584;
st943:
	if ( ++p == pe )
		goto _test_eof943;
case 943:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2875;
		case 32: goto tr2875;
		case 40: goto tr2876;
		case 41: goto tr2877;
		case 1034: goto tr2878;
		case 1083: goto tr2879;
	}
	goto tr2584;
st944:
	if ( ++p == pe )
		goto _test_eof944;
case 944:
	switch( (*p) ) {
		case 65: goto st945;
		case 73: goto st949;
		case 83: goto st951;
		case 97: goto st945;
		case 105: goto st949;
		case 115: goto st951;
	}
	goto tr2584;
st945:
	if ( ++p == pe )
		goto _test_eof945;
case 945:
	switch( (*p) ) {
		case 80: goto st946;
		case 112: goto st946;
	}
	goto tr2584;
st946:
	if ( ++p == pe )
		goto _test_eof946;
case 946:
	switch( (*p) ) {
		case 84: goto st947;
		case 116: goto st947;
	}
	goto tr2584;
st947:
	if ( ++p == pe )
		goto _test_eof947;
case 947:
	switch( (*p) ) {
		case 82: goto st948;
		case 114: goto st948;
	}
	goto tr2584;
st948:
	if ( ++p == pe )
		goto _test_eof948;
case 948:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2886;
		case 32: goto tr2886;
		case 40: goto tr2887;
		case 41: goto tr2888;
		case 1034: goto tr2889;
		case 1083: goto tr2890;
	}
	goto tr2584;
st949:
	if ( ++p == pe )
		goto _test_eof949;
case 949:
	switch( (*p) ) {
		case 68: goto st950;
		case 100: goto st950;
	}
	goto tr2584;
st950:
	if ( ++p == pe )
		goto _test_eof950;
case 950:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2892;
		case 32: goto tr2892;
		case 40: goto tr2893;
		case 41: goto tr2894;
		case 1034: goto tr2895;
		case 1083: goto tr2896;
	}
	goto tr2584;
st951:
	if ( ++p == pe )
		goto _test_eof951;
case 951:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2897;
		case 32: goto tr2897;
		case 40: goto tr2898;
		case 41: goto tr2899;
		case 69: goto st952;
		case 101: goto st952;
		case 1034: goto tr2901;
		case 1083: goto tr2902;
	}
	goto tr2584;
st952:
	if ( ++p == pe )
		goto _test_eof952;
case 952:
	switch( (*p) ) {
		case 67: goto st953;
		case 99: goto st953;
	}
	goto tr2584;
st953:
	if ( ++p == pe )
		goto _test_eof953;
case 953:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2904;
		case 32: goto tr2904;
		case 40: goto tr2905;
		case 41: goto tr2906;
		case 51: goto st954;
		case 1034: goto tr2908;
		case 1083: goto tr2909;
	}
	goto tr2584;
st954:
	if ( ++p == pe )
		goto _test_eof954;
case 954:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2910;
		case 32: goto tr2910;
		case 40: goto tr2911;
		case 41: goto tr2912;
		case 80: goto st955;
		case 112: goto st955;
		case 1034: goto tr2914;
		case 1083: goto tr2915;
	}
	goto tr2584;
st955:
	if ( ++p == pe )
		goto _test_eof955;
case 955:
	switch( (*p) ) {
		case 65: goto st956;
		case 97: goto st956;
	}
	goto tr2584;
st956:
	if ( ++p == pe )
		goto _test_eof956;
case 956:
	switch( (*p) ) {
		case 82: goto st957;
		case 114: goto st957;
	}
	goto tr2584;
st957:
	if ( ++p == pe )
		goto _test_eof957;
case 957:
	switch( (*p) ) {
		case 65: goto st958;
		case 97: goto st958;
	}
	goto tr2584;
st958:
	if ( ++p == pe )
		goto _test_eof958;
case 958:
	switch( (*p) ) {
		case 77: goto st959;
		case 109: goto st959;
	}
	goto tr2584;
st959:
	if ( ++p == pe )
		goto _test_eof959;
case 959:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2920;
		case 32: goto tr2920;
		case 40: goto tr2921;
		case 41: goto tr2922;
		case 1034: goto tr2923;
		case 1083: goto tr2924;
	}
	goto tr2584;
st960:
	if ( ++p == pe )
		goto _test_eof960;
case 960:
	switch( (*p) ) {
		case 84: goto st961;
		case 116: goto st961;
	}
	goto tr2584;
st961:
	if ( ++p == pe )
		goto _test_eof961;
case 961:
	switch( (*p) ) {
		case 82: goto st962;
		case 114: goto st962;
	}
	goto tr2584;
st962:
	if ( ++p == pe )
		goto _test_eof962;
case 962:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2927;
		case 32: goto tr2927;
		case 40: goto tr2928;
		case 41: goto tr2929;
		case 1034: goto tr2930;
		case 1083: goto tr2931;
	}
	goto tr2584;
st963:
	if ( ++p == pe )
		goto _test_eof963;
case 963:
	switch( (*p) ) {
		case 80: goto st964;
		case 82: goto st965;
		case 84: goto st969;
		case 112: goto st964;
		case 114: goto st965;
		case 116: goto st969;
	}
	goto tr2584;
st964:
	if ( ++p == pe )
		goto _test_eof964;
case 964:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2935;
		case 32: goto tr2935;
		case 40: goto tr2936;
		case 41: goto tr2937;
		case 1034: goto tr2938;
		case 1083: goto tr2939;
	}
	goto tr2584;
st965:
	if ( ++p == pe )
		goto _test_eof965;
case 965:
	switch( (*p) ) {
		case 83: goto st966;
		case 115: goto st966;
	}
	goto tr2584;
st966:
	if ( ++p == pe )
		goto _test_eof966;
case 966:
	switch( (*p) ) {
		case 73: goto st967;
		case 105: goto st967;
	}
	goto tr2584;
st967:
	if ( ++p == pe )
		goto _test_eof967;
case 967:
	switch( (*p) ) {
		case 71: goto st968;
		case 103: goto st968;
	}
	goto tr2584;
st968:
	if ( ++p == pe )
		goto _test_eof968;
case 968:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2943;
		case 32: goto tr2943;
		case 40: goto tr2944;
		case 41: goto tr2945;
		case 1034: goto tr2946;
		case 1083: goto tr2947;
	}
	goto tr2584;
st969:
	if ( ++p == pe )
		goto _test_eof969;
case 969:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2948;
		case 32: goto tr2948;
		case 40: goto tr2949;
		case 41: goto tr2950;
		case 1034: goto tr2951;
		case 1083: goto tr2952;
	}
	goto tr2584;
st970:
	if ( ++p == pe )
		goto _test_eof970;
case 970:
	switch( (*p) ) {
		case 79: goto st971;
		case 80: goto st973;
		case 82: goto st975;
		case 83: goto st977;
		case 111: goto st971;
		case 112: goto st973;
		case 114: goto st975;
		case 115: goto st977;
	}
	goto tr2584;
st971:
	if ( ++p == pe )
		goto _test_eof971;
case 971:
	switch( (*p) ) {
		case 65: goto st972;
		case 97: goto st972;
	}
	goto tr2584;
st972:
	if ( ++p == pe )
		goto _test_eof972;
case 972:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2958;
		case 32: goto tr2958;
		case 40: goto tr2959;
		case 41: goto tr2960;
		case 1034: goto tr2961;
		case 1083: goto tr2962;
	}
	goto tr2584;
st973:
	if ( ++p == pe )
		goto _test_eof973;
case 973:
	switch( (*p) ) {
		case 70: goto st974;
		case 102: goto st974;
	}
	goto tr2584;
st974:
	if ( ++p == pe )
		goto _test_eof974;
case 974:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2964;
		case 32: goto tr2964;
		case 40: goto tr2965;
		case 41: goto tr2966;
		case 1034: goto tr2967;
		case 1083: goto tr2968;
	}
	goto tr2584;
st975:
	if ( ++p == pe )
		goto _test_eof975;
case 975:
	switch( (*p) ) {
		case 86: goto st976;
		case 118: goto st976;
	}
	goto tr2584;
st976:
	if ( ++p == pe )
		goto _test_eof976;
case 976:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2970;
		case 32: goto tr2970;
		case 40: goto tr2971;
		case 41: goto tr2972;
		case 1034: goto tr2973;
		case 1083: goto tr2974;
	}
	goto tr2584;
st977:
	if ( ++p == pe )
		goto _test_eof977;
case 977:
	switch( (*p) ) {
		case 72: goto st978;
		case 104: goto st978;
	}
	goto tr2584;
st978:
	if ( ++p == pe )
		goto _test_eof978;
case 978:
	switch( (*p) ) {
		case 70: goto st979;
		case 102: goto st979;
	}
	goto tr2584;
st979:
	if ( ++p == pe )
		goto _test_eof979;
case 979:
	switch( (*p) ) {
		case 80: goto st980;
		case 112: goto st980;
	}
	goto tr2584;
st980:
	if ( ++p == pe )
		goto _test_eof980;
case 980:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2978;
		case 32: goto tr2978;
		case 40: goto tr2979;
		case 41: goto tr2980;
		case 1034: goto tr2981;
		case 1083: goto tr2982;
	}
	goto tr2584;
st981:
	if ( ++p == pe )
		goto _test_eof981;
case 981:
	switch( (*p) ) {
		case 76: goto st982;
		case 88: goto st985;
		case 89: goto st987;
		case 108: goto st982;
		case 120: goto st985;
		case 121: goto st987;
	}
	goto tr2584;
st982:
	if ( ++p == pe )
		goto _test_eof982;
case 982:
	switch( (*p) ) {
		case 83: goto st983;
		case 115: goto st983;
	}
	goto tr2584;
st983:
	if ( ++p == pe )
		goto _test_eof983;
case 983:
	switch( (*p) ) {
		case 65: goto st984;
		case 97: goto st984;
	}
	goto tr2584;
st984:
	if ( ++p == pe )
		goto _test_eof984;
case 984:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2988;
		case 32: goto tr2988;
		case 40: goto tr2989;
		case 41: goto tr2990;
		case 1034: goto tr2991;
		case 1083: goto tr2992;
	}
	goto tr2584;
st985:
	if ( ++p == pe )
		goto _test_eof985;
case 985:
	switch( (*p) ) {
		case 84: goto st986;
		case 116: goto st986;
	}
	goto tr2584;
st986:
	if ( ++p == pe )
		goto _test_eof986;
case 986:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2994;
		case 32: goto tr2994;
		case 40: goto tr2995;
		case 41: goto tr2996;
		case 1034: goto tr2997;
		case 1083: goto tr2998;
	}
	goto tr2584;
st987:
	if ( ++p == pe )
		goto _test_eof987;
case 987:
	switch( (*p) ) {
		case 80: goto st988;
		case 112: goto st988;
	}
	goto tr2584;
st988:
	if ( ++p == pe )
		goto _test_eof988;
case 988:
	switch( (*p) ) {
		case 69: goto st989;
		case 101: goto st989;
	}
	goto tr2584;
st989:
	if ( ++p == pe )
		goto _test_eof989;
case 989:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3002;
	goto tr3001;
tr3002:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st990;
tr3006:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st990;
st990:
	if ( ++p == pe )
		goto _test_eof990;
case 990:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3003;
		case 32: goto tr3003;
		case 40: goto tr3004;
		case 41: goto tr3005;
		case 1034: goto tr3007;
		case 1083: goto tr3008;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3006;
	goto tr3001;
st991:
	if ( ++p == pe )
		goto _test_eof991;
case 991:
	switch( (*p) ) {
		case 82: goto st992;
		case 114: goto st992;
	}
	goto tr2584;
st992:
	if ( ++p == pe )
		goto _test_eof992;
case 992:
	switch( (*p) ) {
		case 73: goto st993;
		case 105: goto st993;
	}
	goto tr2584;
st993:
	if ( ++p == pe )
		goto _test_eof993;
case 993:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3011;
		case 32: goto tr3011;
		case 40: goto tr3012;
		case 41: goto tr3013;
		case 1034: goto tr3014;
		case 1083: goto tr3015;
	}
	goto tr2584;
st994:
	if ( ++p == pe )
		goto _test_eof994;
case 994:
	switch( (*p) ) {
		case 42: goto tr3016;
		case 92: goto tr3016;
		case 95: goto tr3016;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr3016;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr3016;
	} else
		goto tr3016;
	goto tr71;
tr3016:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 995; goto st263;} }
	goto st995;
st995:
	if ( ++p == pe )
		goto _test_eof995;
case 995:
	switch( (*p) ) {
		case 32: goto tr3017;
		case 59: goto tr3017;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3017;
	} else if ( (*p) >= 9 )
		goto tr3017;
	goto tr71;
tr3017:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{ p--; {stack[top++] = 996; goto st329;} }
	goto st996;
st996:
	if ( ++p == pe )
		goto _test_eof996;
case 996:
	switch( (*p) ) {
		case 32: goto tr3018;
		case 59: goto tr3018;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3018;
	} else if ( (*p) >= 9 )
		goto tr3018;
	goto tr71;
tr3018:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1184;
st1184:
	if ( ++p == pe )
		goto _test_eof1184;
case 1184:
	goto st0;
st997:
	if ( ++p == pe )
		goto _test_eof997;
case 997:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3019;
	goto tr1746;
tr3019:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st998;
tr3023:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st998;
st998:
	if ( ++p == pe )
		goto _test_eof998;
case 998:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3020;
		case 32: goto tr3020;
		case 40: goto tr3021;
		case 41: goto tr3022;
		case 1034: goto tr3024;
		case 1083: goto tr3025;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3023;
	goto tr1746;
tr3027:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st999;
tr3028:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st999;
tr3030:
	{
		s->line_counter++;
	}
	goto st999;
tr3020:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st999;
tr3021:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st999;
tr3022:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st999;
tr3024:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st999;
st999:
	if ( ++p == pe )
		goto _test_eof999;
case 999:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st999;
		case 32: goto st999;
		case 40: goto tr3027;
		case 41: goto tr3028;
		case 1034: goto tr3030;
		case 1083: goto st1007;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3029;
	goto tr1746;
tr3029:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1000;
tr3035:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1000;
st1000:
	if ( ++p == pe )
		goto _test_eof1000;
case 1000:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3032;
		case 32: goto tr3032;
		case 40: goto tr3033;
		case 41: goto tr3034;
		case 1034: goto tr3036;
		case 1083: goto tr3037;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3035;
	goto tr1746;
tr3039:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1001;
tr3040:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1001;
tr3042:
	{
		s->line_counter++;
	}
	goto st1001;
tr3032:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1001;
tr3033:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1001;
tr3034:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1001;
tr3036:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1001;
st1001:
	if ( ++p == pe )
		goto _test_eof1001;
case 1001:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1001;
		case 32: goto st1001;
		case 40: goto tr3039;
		case 41: goto tr3040;
		case 1034: goto tr3042;
		case 1083: goto st1006;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3041;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3041;
	} else
		goto tr3041;
	goto tr71;
tr3041:
	{ p--; {stack[top++] = 1002; goto st480;} }
	goto st1002;
st1002:
	if ( ++p == pe )
		goto _test_eof1002;
case 1002:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1003;
		case 32: goto st1003;
		case 40: goto tr3045;
		case 41: goto tr3046;
		case 1034: goto tr3047;
		case 1083: goto st1005;
	}
	goto tr71;
tr3045:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1003;
tr3046:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1003;
tr3047:
	{
		s->line_counter++;
	}
	goto st1003;
st1003:
	if ( ++p == pe )
		goto _test_eof1003;
case 1003:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1003;
		case 32: goto st1003;
		case 40: goto tr3045;
		case 41: goto tr3046;
		case 43: goto tr3049;
		case 1034: goto tr3047;
		case 1083: goto st1005;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr3049;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3049;
	} else
		goto tr3049;
	goto tr71;
tr3049:
	{ p--; {stack[top++] = 1004; goto st322;} }
	goto st1004;
st1004:
	if ( ++p == pe )
		goto _test_eof1004;
case 1004:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1152 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1546: goto tr3050;
		case 1595: goto tr3050;
	}
	goto tr71;
tr3050:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1185;
st1185:
	if ( ++p == pe )
		goto _test_eof1185;
case 1185:
	goto st0;
st1005:
	if ( ++p == pe )
		goto _test_eof1005;
case 1005:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3047;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1005;
	goto tr71;
tr3037:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1006;
st1006:
	if ( ++p == pe )
		goto _test_eof1006;
case 1006:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3042;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1006;
	goto tr71;
tr3025:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1007;
st1007:
	if ( ++p == pe )
		goto _test_eof1007;
case 1007:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3030;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1007;
	goto tr71;
st1008:
	if ( ++p == pe )
		goto _test_eof1008;
case 1008:
	if ( (*p) == 43 )
		goto tr3051;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr3051;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr3051;
	} else
		goto tr3051;
	goto tr71;
tr3051:
	{ p--; {stack[top++] = 1009; goto st322;} }
	goto st1009;
st1009:
	if ( ++p == pe )
		goto _test_eof1009;
case 1009:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1152 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1546: goto tr3052;
		case 1595: goto tr3052;
	}
	goto tr71;
tr3052:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1186;
st1186:
	if ( ++p == pe )
		goto _test_eof1186;
case 1186:
	goto st0;
st1010:
	if ( ++p == pe )
		goto _test_eof1010;
case 1010:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3053;
	goto tr1746;
tr3053:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1011;
tr3057:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1011;
st1011:
	if ( ++p == pe )
		goto _test_eof1011;
case 1011:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3054;
		case 32: goto tr3054;
		case 40: goto tr3055;
		case 41: goto tr3056;
		case 1034: goto tr3058;
		case 1083: goto tr3059;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3057;
	goto tr1746;
tr3061:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1012;
tr3062:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1012;
tr3064:
	{
		s->line_counter++;
	}
	goto st1012;
tr3054:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1012;
tr3055:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1012;
tr3056:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1012;
tr3058:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1012;
st1012:
	if ( ++p == pe )
		goto _test_eof1012;
case 1012:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1012;
		case 32: goto st1012;
		case 40: goto tr3061;
		case 41: goto tr3062;
		case 1034: goto tr3064;
		case 1083: goto st1038;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3063;
	goto tr1746;
tr3063:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1013;
tr3069:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1013;
st1013:
	if ( ++p == pe )
		goto _test_eof1013;
case 1013:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3066;
		case 32: goto tr3066;
		case 40: goto tr3067;
		case 41: goto tr3068;
		case 1034: goto tr3070;
		case 1083: goto tr3071;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3069;
	goto tr1746;
tr3073:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1014;
tr3074:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1014;
tr3076:
	{
		s->line_counter++;
	}
	goto st1014;
tr3066:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1014;
tr3067:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1014;
tr3068:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1014;
tr3070:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1014;
st1014:
	if ( ++p == pe )
		goto _test_eof1014;
case 1014:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1014;
		case 32: goto st1014;
		case 40: goto tr3073;
		case 41: goto tr3074;
		case 1034: goto tr3076;
		case 1083: goto st1037;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3075;
	goto tr1746;
tr3075:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1015;
tr3081:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1015;
st1015:
	if ( ++p == pe )
		goto _test_eof1015;
case 1015:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3078;
		case 32: goto tr3078;
		case 40: goto tr3079;
		case 41: goto tr3080;
		case 1034: goto tr3082;
		case 1083: goto tr3083;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3081;
	goto tr1746;
tr3085:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1016;
tr3086:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1016;
tr3089:
	{
		s->line_counter++;
	}
	goto st1016;
tr3078:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1016;
tr3079:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1016;
tr3080:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1016;
tr3082:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1016;
st1016:
	if ( ++p == pe )
		goto _test_eof1016;
case 1016:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1016;
		case 32: goto st1016;
		case 40: goto tr3085;
		case 41: goto tr3086;
		case 45: goto tr3087;
		case 1034: goto tr3089;
		case 1083: goto st1036;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3088;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3088;
	} else
		goto tr3088;
	goto tr2349;
tr3087:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1017;
st1017:
	if ( ++p == pe )
		goto _test_eof1017;
case 1017:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3091;
		case 32: goto tr3091;
		case 40: goto tr3092;
		case 41: goto tr3093;
		case 1034: goto tr3094;
		case 1083: goto tr3095;
	}
	goto tr2349;
tr3098:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1018;
tr3099:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1018;
tr3101:
	{
		s->line_counter++;
	}
	goto st1018;
tr3091:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1018;
tr3092:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1018;
tr3093:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1018;
tr3094:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1018;
st1018:
	if ( ++p == pe )
		goto _test_eof1018;
case 1018:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1018;
		case 32: goto st1018;
		case 40: goto tr3098;
		case 41: goto tr3099;
		case 1034: goto tr3101;
		case 1083: goto st1033;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3100;
	} else if ( _widec > 86 ) {
		if ( 97 <= _widec && _widec <= 118 )
			goto tr3100;
	} else
		goto tr3100;
	goto tr3096;
tr3100:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1019;
tr3115:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1019;
st1019:
	if ( ++p == pe )
		goto _test_eof1019;
case 1019:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3103;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3103;
	} else
		goto tr3103;
	goto tr3096;
tr3103:
	{
		*(rdata_tail++) += second_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1020;
st1020:
	if ( ++p == pe )
		goto _test_eof1020;
case 1020:
	if ( (*p) == 61 )
		goto st1031;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3104;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3104;
	} else
		goto tr3104;
	goto tr3096;
tr3104:
	{
		*rdata_tail += third_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1021;
st1021:
	if ( ++p == pe )
		goto _test_eof1021;
case 1021:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3106;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3106;
	} else
		goto tr3106;
	goto tr3096;
tr3106:
	{
		*(rdata_tail++) += fourth_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = fourth_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1022;
st1022:
	if ( ++p == pe )
		goto _test_eof1022;
case 1022:
	if ( (*p) == 61 )
		goto st1030;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3107;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3107;
	} else
		goto tr3107;
	goto tr3096;
tr3107:
	{
		*(rdata_tail++) += fifth_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = fifth_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1023;
st1023:
	if ( ++p == pe )
		goto _test_eof1023;
case 1023:
	if ( (*p) == 61 )
		goto st1028;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3109;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3109;
	} else
		goto tr3109;
	goto tr3096;
tr3109:
	{
		*rdata_tail += sixth_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1024;
st1024:
	if ( ++p == pe )
		goto _test_eof1024;
case 1024:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3111;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3111;
	} else
		goto tr3111;
	goto tr3096;
tr3111:
	{
		*(rdata_tail++) += seventh_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = seventh_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1025;
st1025:
	if ( ++p == pe )
		goto _test_eof1025;
case 1025:
	if ( (*p) == 61 )
		goto st1026;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3112;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3112;
	} else
		goto tr3112;
	goto tr3096;
tr3112:
	{
		*(rdata_tail++) += eighth_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1026;
st1026:
	if ( ++p == pe )
		goto _test_eof1026;
case 1026:
	switch( (*p) ) {
		case 32: goto tr3114;
		case 59: goto tr3114;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr3114;
		} else if ( (*p) >= 9 )
			goto tr3114;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 86 ) {
			if ( 97 <= (*p) && (*p) <= 118 )
				goto tr3115;
		} else if ( (*p) >= 65 )
			goto tr3115;
	} else
		goto tr3115;
	goto tr3096;
tr3114:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 1027; goto st329;} }
	goto st1027;
st1027:
	if ( ++p == pe )
		goto _test_eof1027;
case 1027:
	switch( (*p) ) {
		case 32: goto tr3116;
		case 59: goto tr3116;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3116;
	} else if ( (*p) >= 9 )
		goto tr3116;
	goto tr71;
tr3116:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1187;
st1187:
	if ( ++p == pe )
		goto _test_eof1187;
case 1187:
	goto st0;
st1028:
	if ( ++p == pe )
		goto _test_eof1028;
case 1028:
	if ( (*p) == 61 )
		goto st1029;
	goto tr3096;
st1029:
	if ( ++p == pe )
		goto _test_eof1029;
case 1029:
	if ( (*p) == 61 )
		goto st1026;
	goto tr3096;
st1030:
	if ( ++p == pe )
		goto _test_eof1030;
case 1030:
	if ( (*p) == 61 )
		goto st1028;
	goto tr3096;
st1031:
	if ( ++p == pe )
		goto _test_eof1031;
case 1031:
	if ( (*p) == 61 )
		goto st1032;
	goto tr3096;
st1032:
	if ( ++p == pe )
		goto _test_eof1032;
case 1032:
	if ( (*p) == 61 )
		goto st1030;
	goto tr3096;
tr3095:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1033;
st1033:
	if ( ++p == pe )
		goto _test_eof1033;
case 1033:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3101;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1033;
	goto tr71;
tr3120:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1034;
tr3088:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1034;
st1034:
	if ( ++p == pe )
		goto _test_eof1034;
case 1034:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3119;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3119;
	} else
		goto tr3119;
	goto tr2349;
tr3119:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1035;
st1035:
	if ( ++p == pe )
		goto _test_eof1035;
case 1035:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3091;
		case 32: goto tr3091;
		case 40: goto tr3092;
		case 41: goto tr3093;
		case 1034: goto tr3094;
		case 1083: goto tr3095;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3120;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3120;
	} else
		goto tr3120;
	goto tr2349;
tr3083:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1036;
st1036:
	if ( ++p == pe )
		goto _test_eof1036;
case 1036:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3089;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1036;
	goto tr71;
tr3071:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1037;
st1037:
	if ( ++p == pe )
		goto _test_eof1037;
case 1037:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3076;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1037;
	goto tr71;
tr3059:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1038;
st1038:
	if ( ++p == pe )
		goto _test_eof1038;
case 1038:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3064;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1038;
	goto tr71;
st1039:
	if ( ++p == pe )
		goto _test_eof1039;
case 1039:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3121;
	goto tr1746;
tr3121:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1040;
tr3125:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1040;
st1040:
	if ( ++p == pe )
		goto _test_eof1040;
case 1040:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3122;
		case 32: goto tr3122;
		case 40: goto tr3123;
		case 41: goto tr3124;
		case 1034: goto tr3126;
		case 1083: goto tr3127;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3125;
	goto tr1746;
tr3129:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1041;
tr3130:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1041;
tr3132:
	{
		s->line_counter++;
	}
	goto st1041;
tr3122:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1041;
tr3123:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1041;
tr3124:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1041;
tr3126:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1041;
st1041:
	if ( ++p == pe )
		goto _test_eof1041;
case 1041:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1041;
		case 32: goto st1041;
		case 40: goto tr3129;
		case 41: goto tr3130;
		case 1034: goto tr3132;
		case 1083: goto st1051;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3131;
	goto tr1746;
tr3131:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1042;
tr3137:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1042;
st1042:
	if ( ++p == pe )
		goto _test_eof1042;
case 1042:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3134;
		case 32: goto tr3134;
		case 40: goto tr3135;
		case 41: goto tr3136;
		case 1034: goto tr3138;
		case 1083: goto tr3139;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3137;
	goto tr1746;
tr3141:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1043;
tr3142:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1043;
tr3144:
	{
		s->line_counter++;
	}
	goto st1043;
tr3134:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1043;
tr3135:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1043;
tr3136:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1043;
tr3138:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1043;
st1043:
	if ( ++p == pe )
		goto _test_eof1043;
case 1043:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1043;
		case 32: goto st1043;
		case 40: goto tr3141;
		case 41: goto tr3142;
		case 1034: goto tr3144;
		case 1083: goto st1050;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3143;
	goto tr1746;
tr3143:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1044;
tr3149:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1044;
st1044:
	if ( ++p == pe )
		goto _test_eof1044;
case 1044:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3146;
		case 32: goto tr3146;
		case 40: goto tr3147;
		case 41: goto tr3148;
		case 1034: goto tr3150;
		case 1083: goto tr3151;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3149;
	goto tr1746;
tr3153:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1045;
tr3154:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1045;
tr3157:
	{
		s->line_counter++;
	}
	goto st1045;
tr3146:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1045;
tr3147:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1045;
tr3148:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1045;
tr3150:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1045;
st1045:
	if ( ++p == pe )
		goto _test_eof1045;
case 1045:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1045;
		case 32: goto st1045;
		case 40: goto tr3153;
		case 41: goto tr3154;
		case 45: goto tr3155;
		case 1034: goto tr3157;
		case 1083: goto st1049;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3156;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3156;
	} else
		goto tr3156;
	goto tr2349;
tr3155:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1046;
st1046:
	if ( ++p == pe )
		goto _test_eof1046;
case 1046:
	switch( (*p) ) {
		case 32: goto tr3159;
		case 59: goto tr3159;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3159;
	} else if ( (*p) >= 9 )
		goto tr3159;
	goto tr2349;
tr3159:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1188;
st1188:
	if ( ++p == pe )
		goto _test_eof1188;
case 1188:
	goto st0;
tr3161:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1047;
tr3156:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1047;
st1047:
	if ( ++p == pe )
		goto _test_eof1047;
case 1047:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3160;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3160;
	} else
		goto tr3160;
	goto tr2349;
tr3160:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1048;
st1048:
	if ( ++p == pe )
		goto _test_eof1048;
case 1048:
	switch( (*p) ) {
		case 32: goto tr3159;
		case 59: goto tr3159;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr3159;
		} else if ( (*p) >= 9 )
			goto tr3159;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 70 ) {
			if ( 97 <= (*p) && (*p) <= 102 )
				goto tr3161;
		} else if ( (*p) >= 65 )
			goto tr3161;
	} else
		goto tr3161;
	goto tr2349;
tr3151:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1049;
st1049:
	if ( ++p == pe )
		goto _test_eof1049;
case 1049:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3157;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1049;
	goto tr71;
tr3139:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1050;
st1050:
	if ( ++p == pe )
		goto _test_eof1050;
case 1050:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3144;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1050;
	goto tr71;
tr3127:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1051;
st1051:
	if ( ++p == pe )
		goto _test_eof1051;
case 1051:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3132;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1051;
	goto tr71;
st1052:
	if ( ++p == pe )
		goto _test_eof1052;
case 1052:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3162;
	goto tr1746;
tr3162:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1053;
tr3166:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1053;
st1053:
	if ( ++p == pe )
		goto _test_eof1053;
case 1053:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3163;
		case 32: goto tr3163;
		case 40: goto tr3164;
		case 41: goto tr3165;
		case 1034: goto tr3167;
		case 1083: goto tr3168;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3166;
	goto tr1746;
tr3170:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1054;
tr3171:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1054;
tr3173:
	{
		s->line_counter++;
	}
	goto st1054;
tr3163:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1054;
tr3164:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1054;
tr3165:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1054;
tr3167:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1054;
st1054:
	if ( ++p == pe )
		goto _test_eof1054;
case 1054:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1054;
		case 32: goto st1054;
		case 40: goto tr3170;
		case 41: goto tr3171;
		case 1034: goto tr3173;
		case 1083: goto st1064;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3172;
	goto tr1746;
tr3172:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1055;
tr3178:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1055;
st1055:
	if ( ++p == pe )
		goto _test_eof1055;
case 1055:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3175;
		case 32: goto tr3175;
		case 40: goto tr3176;
		case 41: goto tr3177;
		case 1034: goto tr3179;
		case 1083: goto tr3180;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3178;
	goto tr1746;
tr3182:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1056;
tr3183:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1056;
tr3185:
	{
		s->line_counter++;
	}
	goto st1056;
tr3175:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1056;
tr3176:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1056;
tr3177:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1056;
tr3179:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1056;
st1056:
	if ( ++p == pe )
		goto _test_eof1056;
case 1056:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1056;
		case 32: goto st1056;
		case 40: goto tr3182;
		case 41: goto tr3183;
		case 1034: goto tr3185;
		case 1083: goto st1063;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3184;
	goto tr1746;
tr3184:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1057;
tr3190:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1057;
st1057:
	if ( ++p == pe )
		goto _test_eof1057;
case 1057:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3187;
		case 32: goto tr3187;
		case 40: goto tr3188;
		case 41: goto tr3189;
		case 1034: goto tr3191;
		case 1083: goto tr3192;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3190;
	goto tr1746;
tr3194:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1058;
tr3195:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1058;
tr3197:
	{
		s->line_counter++;
	}
	goto st1058;
tr3187:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1058;
tr3188:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1058;
tr3189:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1058;
tr3191:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1058;
st1058:
	if ( ++p == pe )
		goto _test_eof1058;
case 1058:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1058;
		case 32: goto st1058;
		case 40: goto tr3194;
		case 41: goto tr3195;
		case 1034: goto tr3197;
		case 1083: goto st1062;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3196;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3196;
	} else
		goto tr3196;
	goto tr2349;
tr3196:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1059;
st1059:
	if ( ++p == pe )
		goto _test_eof1059;
case 1059:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3199;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3199;
	} else
		goto tr3199;
	goto tr2349;
tr3201:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1060;
tr3202:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1060;
tr3203:
	{
		s->line_counter++;
	}
	goto st1060;
tr3199:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1060;
st1060:
	if ( ++p == pe )
		goto _test_eof1060;
case 1060:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1060;
		case 32: goto st1060;
		case 40: goto tr3201;
		case 41: goto tr3202;
		case 2058: goto tr3203;
		case 2107: goto st1061;
		case 2314: goto tr3205;
		case 2363: goto tr3205;
		case 2570: goto tr3206;
		case 2619: goto tr3207;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3196;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3196;
	} else
		goto tr3196;
	goto tr2349;
st1061:
	if ( ++p == pe )
		goto _test_eof1061;
case 1061:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3203;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1061;
	goto tr2349;
tr3205:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1189;
st1189:
	if ( ++p == pe )
		goto _test_eof1189;
case 1189:
	goto st0;
tr3206:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1190;
st1190:
	if ( ++p == pe )
		goto _test_eof1190;
case 1190:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1060;
		case 32: goto st1060;
		case 40: goto tr3201;
		case 41: goto tr3202;
		case 2058: goto tr3203;
		case 2107: goto st1061;
		case 2314: goto tr3205;
		case 2363: goto tr3205;
		case 2570: goto tr3206;
		case 2619: goto tr3207;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3196;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3196;
	} else
		goto tr3196;
	goto tr2349;
tr3207:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1191;
st1191:
	if ( ++p == pe )
		goto _test_eof1191;
case 1191:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3203;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1061;
	goto tr2349;
tr3192:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1062;
st1062:
	if ( ++p == pe )
		goto _test_eof1062;
case 1062:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3197;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1062;
	goto tr71;
tr3180:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1063;
st1063:
	if ( ++p == pe )
		goto _test_eof1063;
case 1063:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3185;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1063;
	goto tr71;
tr3168:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1064;
st1064:
	if ( ++p == pe )
		goto _test_eof1064;
case 1064:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3173;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1064;
	goto tr71;
st1065:
	if ( ++p == pe )
		goto _test_eof1065;
case 1065:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3208;
	goto tr1746;
tr3208:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1066;
tr3212:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1066;
st1066:
	if ( ++p == pe )
		goto _test_eof1066;
case 1066:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3209;
		case 32: goto tr3209;
		case 40: goto tr3210;
		case 41: goto tr3211;
		case 1034: goto tr3213;
		case 1083: goto tr3214;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3212;
	goto tr1746;
tr3216:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1067;
tr3217:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1067;
tr3219:
	{
		s->line_counter++;
	}
	goto st1067;
tr3209:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1067;
tr3210:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1067;
tr3211:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1067;
tr3213:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1067;
st1067:
	if ( ++p == pe )
		goto _test_eof1067;
case 1067:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1067;
		case 32: goto st1067;
		case 40: goto tr3216;
		case 41: goto tr3217;
		case 46: goto tr3218;
		case 1034: goto tr3219;
		case 1083: goto st1069;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3218;
	goto tr1723;
tr3218:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1068;
tr3222:
	{
		if (s->buffer_length < MAX_RDATA_LENGTH) {
			s->buffer[s->buffer_length++] = (*p);
		}
		else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1068;
st1068:
	if ( ++p == pe )
		goto _test_eof1068;
case 1068:
	switch( (*p) ) {
		case 32: goto tr3221;
		case 46: goto tr3222;
		case 59: goto tr3221;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr3221;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3222;
	} else
		goto tr3221;
	goto tr1723;
tr3221:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, &addr4) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st261;}
		}
	}
	{
		memcpy(rdata_tail, &(addr4.s_addr), INET4_ADDR_LENGTH);
		rdata_tail += INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1192;
st1192:
	if ( ++p == pe )
		goto _test_eof1192;
case 1192:
	goto st0;
tr3214:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1069;
st1069:
	if ( ++p == pe )
		goto _test_eof1069;
case 1069:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3219;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1069;
	goto tr71;
st1070:
	if ( ++p == pe )
		goto _test_eof1070;
case 1070:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3223;
	goto tr1746;
tr3223:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1071;
tr3227:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1071;
st1071:
	if ( ++p == pe )
		goto _test_eof1071;
case 1071:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3224;
		case 32: goto tr3224;
		case 40: goto tr3225;
		case 41: goto tr3226;
		case 1034: goto tr3228;
		case 1083: goto tr3229;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3227;
	goto tr1746;
tr3231:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1072;
tr3232:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1072;
tr3234:
	{
		s->line_counter++;
	}
	goto st1072;
tr3224:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1072;
tr3225:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1072;
tr3226:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1072;
tr3228:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1072;
st1072:
	if ( ++p == pe )
		goto _test_eof1072;
case 1072:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1072;
		case 32: goto st1072;
		case 40: goto tr3231;
		case 41: goto tr3232;
		case 1034: goto tr3234;
		case 1083: goto st1082;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3233;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3233;
	} else
		goto tr3233;
	goto tr2349;
tr3233:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1073;
st1073:
	if ( ++p == pe )
		goto _test_eof1073;
case 1073:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3236;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3236;
	} else
		goto tr3236;
	goto tr2349;
tr3236:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1074;
st1074:
	if ( ++p == pe )
		goto _test_eof1074;
case 1074:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3237;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3237;
	} else
		goto tr3237;
	goto tr2349;
tr3237:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1075;
st1075:
	if ( ++p == pe )
		goto _test_eof1075;
case 1075:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3238;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3238;
	} else
		goto tr3238;
	goto tr2349;
tr3238:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1076;
st1076:
	if ( ++p == pe )
		goto _test_eof1076;
case 1076:
	if ( (*p) == 58 )
		goto tr3240;
	goto tr3239;
tr3240:
	{
		s->item_length++;
	}
	goto st1077;
st1077:
	if ( ++p == pe )
		goto _test_eof1077;
case 1077:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3241;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3241;
	} else
		goto tr3241;
	goto tr2349;
tr3241:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1078;
st1078:
	if ( ++p == pe )
		goto _test_eof1078;
case 1078:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3242;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3242;
	} else
		goto tr3242;
	goto tr2349;
tr3242:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1079;
st1079:
	if ( ++p == pe )
		goto _test_eof1079;
case 1079:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3243;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3243;
	} else
		goto tr3243;
	goto tr2349;
tr3243:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1080;
st1080:
	if ( ++p == pe )
		goto _test_eof1080;
case 1080:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3244;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3244;
	} else
		goto tr3244;
	goto tr2349;
tr3244:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1081;
st1081:
	if ( ++p == pe )
		goto _test_eof1081;
case 1081:
	switch( (*p) ) {
		case 32: goto tr3246;
		case 58: goto tr3240;
		case 59: goto tr3246;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3246;
	} else if ( (*p) >= 9 )
		goto tr3246;
	goto tr3245;
tr3246:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 4) {
			WARN(ZS_BAD_L64_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1193;
st1193:
	if ( ++p == pe )
		goto _test_eof1193;
case 1193:
	goto st0;
tr3229:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1082;
st1082:
	if ( ++p == pe )
		goto _test_eof1082;
case 1082:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3234;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1082;
	goto tr71;
st1083:
	if ( ++p == pe )
		goto _test_eof1083;
case 1083:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3247;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3247;
	} else
		goto tr3247;
	goto tr2349;
tr3247:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1084;
st1084:
	if ( ++p == pe )
		goto _test_eof1084;
case 1084:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3248;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3248;
	} else
		goto tr3248;
	goto tr2349;
tr3248:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1085;
st1085:
	if ( ++p == pe )
		goto _test_eof1085;
case 1085:
	if ( (*p) == 45 )
		goto tr3250;
	goto tr3249;
tr3250:
	{
		s->item_length++;
	}
	goto st1086;
st1086:
	if ( ++p == pe )
		goto _test_eof1086;
case 1086:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3251;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3251;
	} else
		goto tr3251;
	goto tr2349;
tr3251:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1087;
st1087:
	if ( ++p == pe )
		goto _test_eof1087;
case 1087:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3252;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3252;
	} else
		goto tr3252;
	goto tr2349;
tr3252:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1088;
st1088:
	if ( ++p == pe )
		goto _test_eof1088;
case 1088:
	switch( (*p) ) {
		case 32: goto tr3253;
		case 45: goto tr3250;
		case 59: goto tr3253;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3253;
	} else if ( (*p) >= 9 )
		goto tr3253;
	goto tr3249;
tr3253:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 6) {
			WARN(ZS_BAD_EUI_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1194;
st1194:
	if ( ++p == pe )
		goto _test_eof1194;
case 1194:
	goto st0;
st1089:
	if ( ++p == pe )
		goto _test_eof1089;
case 1089:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3254;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3254;
	} else
		goto tr3254;
	goto tr2349;
tr3254:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1090;
st1090:
	if ( ++p == pe )
		goto _test_eof1090;
case 1090:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3255;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3255;
	} else
		goto tr3255;
	goto tr2349;
tr3255:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1091;
st1091:
	if ( ++p == pe )
		goto _test_eof1091;
case 1091:
	if ( (*p) == 45 )
		goto tr3256;
	goto tr3249;
tr3256:
	{
		s->item_length++;
	}
	goto st1092;
st1092:
	if ( ++p == pe )
		goto _test_eof1092;
case 1092:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3257;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3257;
	} else
		goto tr3257;
	goto tr2349;
tr3257:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1093;
st1093:
	if ( ++p == pe )
		goto _test_eof1093;
case 1093:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3258;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3258;
	} else
		goto tr3258;
	goto tr2349;
tr3258:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1094;
st1094:
	if ( ++p == pe )
		goto _test_eof1094;
case 1094:
	switch( (*p) ) {
		case 32: goto tr3259;
		case 45: goto tr3256;
		case 59: goto tr3259;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3259;
	} else if ( (*p) >= 9 )
		goto tr3259;
	goto tr3249;
tr3259:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 8) {
			WARN(ZS_BAD_EUI_LENGTH);
			p--; {goto st261;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1195;
st1195:
	if ( ++p == pe )
		goto _test_eof1195;
case 1195:
	goto st0;
st1095:
	if ( ++p == pe )
		goto _test_eof1095;
case 1095:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3260;
	goto tr1746;
tr3260:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1096;
tr3264:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1096;
st1096:
	if ( ++p == pe )
		goto _test_eof1096;
case 1096:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3261;
		case 32: goto tr3261;
		case 40: goto tr3262;
		case 41: goto tr3263;
		case 1034: goto tr3265;
		case 1083: goto tr3266;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3264;
	goto tr1746;
tr3268:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1097;
tr3269:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1097;
tr3271:
	{
		s->line_counter++;
	}
	goto st1097;
tr3261:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1097;
tr3262:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1097;
tr3263:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1097;
tr3265:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1097;
st1097:
	if ( ++p == pe )
		goto _test_eof1097;
case 1097:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1097;
		case 32: goto st1097;
		case 40: goto tr3268;
		case 41: goto tr3269;
		case 1034: goto tr3271;
		case 1083: goto st1102;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3270;
	goto tr1746;
tr3270:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1098;
tr3276:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1098;
st1098:
	if ( ++p == pe )
		goto _test_eof1098;
case 1098:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3273;
		case 32: goto tr3273;
		case 40: goto tr3274;
		case 41: goto tr3275;
		case 1034: goto tr3277;
		case 1083: goto tr3278;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3276;
	goto tr1746;
tr3281:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1099;
tr3282:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1099;
tr3283:
	{
		s->line_counter++;
	}
	goto st1099;
tr3273:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1099;
tr3274:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1099;
tr3275:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1099;
tr3277:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1099;
st1099:
	if ( ++p == pe )
		goto _test_eof1099;
case 1099:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1099;
		case 32: goto st1099;
		case 40: goto tr3281;
		case 41: goto tr3282;
		case 1034: goto tr3283;
		case 1083: goto st1101;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr3279;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr3279;
	} else
		goto tr3279;
	goto tr71;
tr3279:
	{ p--; {stack[top++] = 1100; goto st272;} }
	goto st1100;
st1100:
	if ( ++p == pe )
		goto _test_eof1100;
case 1100:
	switch( (*p) ) {
		case 32: goto tr3285;
		case 59: goto tr3285;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3285;
	} else if ( (*p) >= 9 )
		goto tr3285;
	goto tr71;
tr3285:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1196;
st1196:
	if ( ++p == pe )
		goto _test_eof1196;
case 1196:
	goto st0;
tr3278:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1101;
st1101:
	if ( ++p == pe )
		goto _test_eof1101;
case 1101:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3283;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1101;
	goto tr71;
tr3266:
	{
		if (s->number64 <= UINT16_MAX) {
			*((uint16_t *)rdata_tail) = htons((uint16_t)(s->number64));
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1102;
st1102:
	if ( ++p == pe )
		goto _test_eof1102;
case 1102:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3271;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1102;
	goto tr71;
st1103:
	if ( ++p == pe )
		goto _test_eof1103;
case 1103:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3286;
	goto tr1746;
tr3286:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1104;
tr3290:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1104;
st1104:
	if ( ++p == pe )
		goto _test_eof1104;
case 1104:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3287;
		case 32: goto tr3287;
		case 40: goto tr3288;
		case 41: goto tr3289;
		case 1034: goto tr3291;
		case 1083: goto tr3292;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3290;
	goto tr1746;
tr3295:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1105;
tr3296:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1105;
tr3297:
	{
		s->line_counter++;
	}
	goto st1105;
tr3287:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1105;
tr3288:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1105;
tr3289:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1105;
tr3291:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1105;
st1105:
	if ( ++p == pe )
		goto _test_eof1105;
case 1105:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1105;
		case 32: goto st1105;
		case 40: goto tr3295;
		case 41: goto tr3296;
		case 1034: goto tr3297;
		case 1083: goto st1110;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr3293;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr3293;
	} else
		goto tr3293;
	goto tr71;
tr3293:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{ p--; {stack[top++] = 1106; goto st272;} }
	goto st1106;
st1106:
	if ( ++p == pe )
		goto _test_eof1106;
case 1106:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3299;
		case 32: goto tr3299;
		case 40: goto tr3300;
		case 41: goto tr3301;
		case 1034: goto tr3302;
		case 1083: goto tr3303;
	}
	goto tr71;
tr3306:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1107;
tr3307:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1107;
tr3308:
	{
		s->line_counter++;
	}
	goto st1107;
tr3299:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1107;
tr3300:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = true;
	}
	goto st1107;
tr3301:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st261;}
		}
		s->multiline = false;
	}
	goto st1107;
tr3302:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1107;
st1107:
	if ( ++p == pe )
		goto _test_eof1107;
case 1107:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1107;
		case 32: goto st1107;
		case 40: goto tr3306;
		case 41: goto tr3307;
		case 1034: goto tr3308;
		case 1083: goto st1109;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr3304;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr3304;
	} else
		goto tr3304;
	goto tr71;
tr3304:
	{ p--; {stack[top++] = 1108; goto st272;} }
	goto st1108;
st1108:
	if ( ++p == pe )
		goto _test_eof1108;
case 1108:
	switch( (*p) ) {
		case 32: goto tr3310;
		case 59: goto tr3310;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3310;
	} else if ( (*p) >= 9 )
		goto tr3310;
	goto tr71;
tr3310:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1197;
st1197:
	if ( ++p == pe )
		goto _test_eof1197;
case 1197:
	goto st0;
tr3303:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;

		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1109;
st1109:
	if ( ++p == pe )
		goto _test_eof1109;
case 1109:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3308;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1109;
	goto tr71;
tr3292:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st261;}
		}
	}
	goto st1110;
st1110:
	if ( ++p == pe )
		goto _test_eof1110;
case 1110:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(640 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 1034 )
		goto tr3297;
	if ( 896 <= _widec && _widec <= 1151 )
		goto st1110;
	goto tr71;
	}
	_test_eof1111: cs = 1111; goto _test_eof;
	_test_eof1: cs = 1; goto _test_eof;
	_test_eof2: cs = 2; goto _test_eof;
	_test_eof3: cs = 3; goto _test_eof;
	_test_eof4: cs = 4; goto _test_eof;
	_test_eof5: cs = 5; goto _test_eof;
	_test_eof6: cs = 6; goto _test_eof;
	_test_eof7: cs = 7; goto _test_eof;
	_test_eof8: cs = 8; goto _test_eof;
	_test_eof9: cs = 9; goto _test_eof;
	_test_eof10: cs = 10; goto _test_eof;
	_test_eof11: cs = 11; goto _test_eof;
	_test_eof12: cs = 12; goto _test_eof;
	_test_eof1112: cs = 1112; goto _test_eof;
	_test_eof13: cs = 13; goto _test_eof;
	_test_eof14: cs = 14; goto _test_eof;
	_test_eof15: cs = 15; goto _test_eof;
	_test_eof16: cs = 16; goto _test_eof;
	_test_eof17: cs = 17; goto _test_eof;
	_test_eof18: cs = 18; goto _test_eof;
	_test_eof19: cs = 19; goto _test_eof;
	_test_eof20: cs = 20; goto _test_eof;
	_test_eof21: cs = 21; goto _test_eof;
	_test_eof22: cs = 22; goto _test_eof;
	_test_eof23: cs = 23; goto _test_eof;
	_test_eof24: cs = 24; goto _test_eof;
	_test_eof25: cs = 25; goto _test_eof;
	_test_eof26: cs = 26; goto _test_eof;
	_test_eof27: cs = 27; goto _test_eof;
	_test_eof28: cs = 28; goto _test_eof;
	_test_eof29: cs = 29; goto _test_eof;
	_test_eof30: cs = 30; goto _test_eof;
	_test_eof31: cs = 31; goto _test_eof;
	_test_eof32: cs = 32; goto _test_eof;
	_test_eof33: cs = 33; goto _test_eof;
	_test_eof34: cs = 34; goto _test_eof;
	_test_eof35: cs = 35; goto _test_eof;
	_test_eof36: cs = 36; goto _test_eof;
	_test_eof37: cs = 37; goto _test_eof;
	_test_eof38: cs = 38; goto _test_eof;
	_test_eof39: cs = 39; goto _test_eof;
	_test_eof40: cs = 40; goto _test_eof;
	_test_eof41: cs = 41; goto _test_eof;
	_test_eof42: cs = 42; goto _test_eof;
	_test_eof43: cs = 43; goto _test_eof;
	_test_eof44: cs = 44; goto _test_eof;
	_test_eof45: cs = 45; goto _test_eof;
	_test_eof46: cs = 46; goto _test_eof;
	_test_eof47: cs = 47; goto _test_eof;
	_test_eof48: cs = 48; goto _test_eof;
	_test_eof49: cs = 49; goto _test_eof;
	_test_eof50: cs = 50; goto _test_eof;
	_test_eof51: cs = 51; goto _test_eof;
	_test_eof52: cs = 52; goto _test_eof;
	_test_eof53: cs = 53; goto _test_eof;
	_test_eof54: cs = 54; goto _test_eof;
	_test_eof55: cs = 55; goto _test_eof;
	_test_eof56: cs = 56; goto _test_eof;
	_test_eof57: cs = 57; goto _test_eof;
	_test_eof58: cs = 58; goto _test_eof;
	_test_eof59: cs = 59; goto _test_eof;
	_test_eof60: cs = 60; goto _test_eof;
	_test_eof61: cs = 61; goto _test_eof;
	_test_eof62: cs = 62; goto _test_eof;
	_test_eof63: cs = 63; goto _test_eof;
	_test_eof64: cs = 64; goto _test_eof;
	_test_eof65: cs = 65; goto _test_eof;
	_test_eof66: cs = 66; goto _test_eof;
	_test_eof67: cs = 67; goto _test_eof;
	_test_eof68: cs = 68; goto _test_eof;
	_test_eof69: cs = 69; goto _test_eof;
	_test_eof70: cs = 70; goto _test_eof;
	_test_eof71: cs = 71; goto _test_eof;
	_test_eof72: cs = 72; goto _test_eof;
	_test_eof73: cs = 73; goto _test_eof;
	_test_eof74: cs = 74; goto _test_eof;
	_test_eof75: cs = 75; goto _test_eof;
	_test_eof76: cs = 76; goto _test_eof;
	_test_eof77: cs = 77; goto _test_eof;
	_test_eof78: cs = 78; goto _test_eof;
	_test_eof79: cs = 79; goto _test_eof;
	_test_eof80: cs = 80; goto _test_eof;
	_test_eof81: cs = 81; goto _test_eof;
	_test_eof82: cs = 82; goto _test_eof;
	_test_eof83: cs = 83; goto _test_eof;
	_test_eof84: cs = 84; goto _test_eof;
	_test_eof85: cs = 85; goto _test_eof;
	_test_eof86: cs = 86; goto _test_eof;
	_test_eof87: cs = 87; goto _test_eof;
	_test_eof88: cs = 88; goto _test_eof;
	_test_eof89: cs = 89; goto _test_eof;
	_test_eof90: cs = 90; goto _test_eof;
	_test_eof91: cs = 91; goto _test_eof;
	_test_eof92: cs = 92; goto _test_eof;
	_test_eof93: cs = 93; goto _test_eof;
	_test_eof94: cs = 94; goto _test_eof;
	_test_eof95: cs = 95; goto _test_eof;
	_test_eof96: cs = 96; goto _test_eof;
	_test_eof97: cs = 97; goto _test_eof;
	_test_eof98: cs = 98; goto _test_eof;
	_test_eof99: cs = 99; goto _test_eof;
	_test_eof100: cs = 100; goto _test_eof;
	_test_eof101: cs = 101; goto _test_eof;
	_test_eof102: cs = 102; goto _test_eof;
	_test_eof103: cs = 103; goto _test_eof;
	_test_eof104: cs = 104; goto _test_eof;
	_test_eof105: cs = 105; goto _test_eof;
	_test_eof106: cs = 106; goto _test_eof;
	_test_eof107: cs = 107; goto _test_eof;
	_test_eof108: cs = 108; goto _test_eof;
	_test_eof109: cs = 109; goto _test_eof;
	_test_eof110: cs = 110; goto _test_eof;
	_test_eof111: cs = 111; goto _test_eof;
	_test_eof112: cs = 112; goto _test_eof;
	_test_eof113: cs = 113; goto _test_eof;
	_test_eof114: cs = 114; goto _test_eof;
	_test_eof115: cs = 115; goto _test_eof;
	_test_eof116: cs = 116; goto _test_eof;
	_test_eof117: cs = 117; goto _test_eof;
	_test_eof118: cs = 118; goto _test_eof;
	_test_eof119: cs = 119; goto _test_eof;
	_test_eof120: cs = 120; goto _test_eof;
	_test_eof121: cs = 121; goto _test_eof;
	_test_eof122: cs = 122; goto _test_eof;
	_test_eof123: cs = 123; goto _test_eof;
	_test_eof124: cs = 124; goto _test_eof;
	_test_eof125: cs = 125; goto _test_eof;
	_test_eof126: cs = 126; goto _test_eof;
	_test_eof127: cs = 127; goto _test_eof;
	_test_eof128: cs = 128; goto _test_eof;
	_test_eof129: cs = 129; goto _test_eof;
	_test_eof130: cs = 130; goto _test_eof;
	_test_eof131: cs = 131; goto _test_eof;
	_test_eof132: cs = 132; goto _test_eof;
	_test_eof133: cs = 133; goto _test_eof;
	_test_eof134: cs = 134; goto _test_eof;
	_test_eof135: cs = 135; goto _test_eof;
	_test_eof136: cs = 136; goto _test_eof;
	_test_eof137: cs = 137; goto _test_eof;
	_test_eof138: cs = 138; goto _test_eof;
	_test_eof139: cs = 139; goto _test_eof;
	_test_eof1113: cs = 1113; goto _test_eof;
	_test_eof140: cs = 140; goto _test_eof;
	_test_eof141: cs = 141; goto _test_eof;
	_test_eof142: cs = 142; goto _test_eof;
	_test_eof143: cs = 143; goto _test_eof;
	_test_eof144: cs = 144; goto _test_eof;
	_test_eof145: cs = 145; goto _test_eof;
	_test_eof146: cs = 146; goto _test_eof;
	_test_eof147: cs = 147; goto _test_eof;
	_test_eof148: cs = 148; goto _test_eof;
	_test_eof149: cs = 149; goto _test_eof;
	_test_eof1114: cs = 1114; goto _test_eof;
	_test_eof150: cs = 150; goto _test_eof;
	_test_eof151: cs = 151; goto _test_eof;
	_test_eof152: cs = 152; goto _test_eof;
	_test_eof153: cs = 153; goto _test_eof;
	_test_eof154: cs = 154; goto _test_eof;
	_test_eof155: cs = 155; goto _test_eof;
	_test_eof156: cs = 156; goto _test_eof;
	_test_eof157: cs = 157; goto _test_eof;
	_test_eof1115: cs = 1115; goto _test_eof;
	_test_eof158: cs = 158; goto _test_eof;
	_test_eof159: cs = 159; goto _test_eof;
	_test_eof160: cs = 160; goto _test_eof;
	_test_eof1116: cs = 1116; goto _test_eof;
	_test_eof161: cs = 161; goto _test_eof;
	_test_eof162: cs = 162; goto _test_eof;
	_test_eof163: cs = 163; goto _test_eof;
	_test_eof164: cs = 164; goto _test_eof;
	_test_eof165: cs = 165; goto _test_eof;
	_test_eof166: cs = 166; goto _test_eof;
	_test_eof167: cs = 167; goto _test_eof;
	_test_eof168: cs = 168; goto _test_eof;
	_test_eof169: cs = 169; goto _test_eof;
	_test_eof170: cs = 170; goto _test_eof;
	_test_eof171: cs = 171; goto _test_eof;
	_test_eof1117: cs = 1117; goto _test_eof;
	_test_eof172: cs = 172; goto _test_eof;
	_test_eof173: cs = 173; goto _test_eof;
	_test_eof174: cs = 174; goto _test_eof;
	_test_eof175: cs = 175; goto _test_eof;
	_test_eof1118: cs = 1118; goto _test_eof;
	_test_eof176: cs = 176; goto _test_eof;
	_test_eof177: cs = 177; goto _test_eof;
	_test_eof178: cs = 178; goto _test_eof;
	_test_eof179: cs = 179; goto _test_eof;
	_test_eof180: cs = 180; goto _test_eof;
	_test_eof181: cs = 181; goto _test_eof;
	_test_eof182: cs = 182; goto _test_eof;
	_test_eof183: cs = 183; goto _test_eof;
	_test_eof184: cs = 184; goto _test_eof;
	_test_eof185: cs = 185; goto _test_eof;
	_test_eof186: cs = 186; goto _test_eof;
	_test_eof187: cs = 187; goto _test_eof;
	_test_eof188: cs = 188; goto _test_eof;
	_test_eof189: cs = 189; goto _test_eof;
	_test_eof190: cs = 190; goto _test_eof;
	_test_eof191: cs = 191; goto _test_eof;
	_test_eof1119: cs = 1119; goto _test_eof;
	_test_eof192: cs = 192; goto _test_eof;
	_test_eof193: cs = 193; goto _test_eof;
	_test_eof194: cs = 194; goto _test_eof;
	_test_eof195: cs = 195; goto _test_eof;
	_test_eof196: cs = 196; goto _test_eof;
	_test_eof197: cs = 197; goto _test_eof;
	_test_eof198: cs = 198; goto _test_eof;
	_test_eof199: cs = 199; goto _test_eof;
	_test_eof200: cs = 200; goto _test_eof;
	_test_eof201: cs = 201; goto _test_eof;
	_test_eof202: cs = 202; goto _test_eof;
	_test_eof203: cs = 203; goto _test_eof;
	_test_eof204: cs = 204; goto _test_eof;
	_test_eof205: cs = 205; goto _test_eof;
	_test_eof206: cs = 206; goto _test_eof;
	_test_eof207: cs = 207; goto _test_eof;
	_test_eof1120: cs = 1120; goto _test_eof;
	_test_eof208: cs = 208; goto _test_eof;
	_test_eof209: cs = 209; goto _test_eof;
	_test_eof210: cs = 210; goto _test_eof;
	_test_eof211: cs = 211; goto _test_eof;
	_test_eof212: cs = 212; goto _test_eof;
	_test_eof213: cs = 213; goto _test_eof;
	_test_eof214: cs = 214; goto _test_eof;
	_test_eof215: cs = 215; goto _test_eof;
	_test_eof216: cs = 216; goto _test_eof;
	_test_eof217: cs = 217; goto _test_eof;
	_test_eof218: cs = 218; goto _test_eof;
	_test_eof219: cs = 219; goto _test_eof;
	_test_eof220: cs = 220; goto _test_eof;
	_test_eof221: cs = 221; goto _test_eof;
	_test_eof222: cs = 222; goto _test_eof;
	_test_eof223: cs = 223; goto _test_eof;
	_test_eof224: cs = 224; goto _test_eof;
	_test_eof225: cs = 225; goto _test_eof;
	_test_eof226: cs = 226; goto _test_eof;
	_test_eof227: cs = 227; goto _test_eof;
	_test_eof228: cs = 228; goto _test_eof;
	_test_eof229: cs = 229; goto _test_eof;
	_test_eof230: cs = 230; goto _test_eof;
	_test_eof231: cs = 231; goto _test_eof;
	_test_eof232: cs = 232; goto _test_eof;
	_test_eof233: cs = 233; goto _test_eof;
	_test_eof234: cs = 234; goto _test_eof;
	_test_eof235: cs = 235; goto _test_eof;
	_test_eof236: cs = 236; goto _test_eof;
	_test_eof237: cs = 237; goto _test_eof;
	_test_eof238: cs = 238; goto _test_eof;
	_test_eof239: cs = 239; goto _test_eof;
	_test_eof240: cs = 240; goto _test_eof;
	_test_eof241: cs = 241; goto _test_eof;
	_test_eof242: cs = 242; goto _test_eof;
	_test_eof243: cs = 243; goto _test_eof;
	_test_eof244: cs = 244; goto _test_eof;
	_test_eof245: cs = 245; goto _test_eof;
	_test_eof246: cs = 246; goto _test_eof;
	_test_eof247: cs = 247; goto _test_eof;
	_test_eof248: cs = 248; goto _test_eof;
	_test_eof249: cs = 249; goto _test_eof;
	_test_eof250: cs = 250; goto _test_eof;
	_test_eof251: cs = 251; goto _test_eof;
	_test_eof252: cs = 252; goto _test_eof;
	_test_eof253: cs = 253; goto _test_eof;
	_test_eof254: cs = 254; goto _test_eof;
	_test_eof255: cs = 255; goto _test_eof;
	_test_eof256: cs = 256; goto _test_eof;
	_test_eof257: cs = 257; goto _test_eof;
	_test_eof258: cs = 258; goto _test_eof;
	_test_eof259: cs = 259; goto _test_eof;
	_test_eof260: cs = 260; goto _test_eof;
	_test_eof261: cs = 261; goto _test_eof;
	_test_eof262: cs = 262; goto _test_eof;
	_test_eof1121: cs = 1121; goto _test_eof;
	_test_eof263: cs = 263; goto _test_eof;
	_test_eof264: cs = 264; goto _test_eof;
	_test_eof1122: cs = 1122; goto _test_eof;
	_test_eof265: cs = 265; goto _test_eof;
	_test_eof266: cs = 266; goto _test_eof;
	_test_eof267: cs = 267; goto _test_eof;
	_test_eof268: cs = 268; goto _test_eof;
	_test_eof269: cs = 269; goto _test_eof;
	_test_eof270: cs = 270; goto _test_eof;
	_test_eof271: cs = 271; goto _test_eof;
	_test_eof272: cs = 272; goto _test_eof;
	_test_eof273: cs = 273; goto _test_eof;
	_test_eof1123: cs = 1123; goto _test_eof;
	_test_eof1124: cs = 1124; goto _test_eof;
	_test_eof274: cs = 274; goto _test_eof;
	_test_eof275: cs = 275; goto _test_eof;
	_test_eof276: cs = 276; goto _test_eof;
	_test_eof277: cs = 277; goto _test_eof;
	_test_eof278: cs = 278; goto _test_eof;
	_test_eof279: cs = 279; goto _test_eof;
	_test_eof280: cs = 280; goto _test_eof;
	_test_eof281: cs = 281; goto _test_eof;
	_test_eof282: cs = 282; goto _test_eof;
	_test_eof283: cs = 283; goto _test_eof;
	_test_eof284: cs = 284; goto _test_eof;
	_test_eof285: cs = 285; goto _test_eof;
	_test_eof286: cs = 286; goto _test_eof;
	_test_eof287: cs = 287; goto _test_eof;
	_test_eof1125: cs = 1125; goto _test_eof;
	_test_eof288: cs = 288; goto _test_eof;
	_test_eof289: cs = 289; goto _test_eof;
	_test_eof290: cs = 290; goto _test_eof;
	_test_eof291: cs = 291; goto _test_eof;
	_test_eof292: cs = 292; goto _test_eof;
	_test_eof293: cs = 293; goto _test_eof;
	_test_eof294: cs = 294; goto _test_eof;
	_test_eof295: cs = 295; goto _test_eof;
	_test_eof296: cs = 296; goto _test_eof;
	_test_eof297: cs = 297; goto _test_eof;
	_test_eof1126: cs = 1126; goto _test_eof;
	_test_eof298: cs = 298; goto _test_eof;
	_test_eof299: cs = 299; goto _test_eof;
	_test_eof300: cs = 300; goto _test_eof;
	_test_eof301: cs = 301; goto _test_eof;
	_test_eof302: cs = 302; goto _test_eof;
	_test_eof303: cs = 303; goto _test_eof;
	_test_eof304: cs = 304; goto _test_eof;
	_test_eof305: cs = 305; goto _test_eof;
	_test_eof306: cs = 306; goto _test_eof;
	_test_eof307: cs = 307; goto _test_eof;
	_test_eof308: cs = 308; goto _test_eof;
	_test_eof309: cs = 309; goto _test_eof;
	_test_eof310: cs = 310; goto _test_eof;
	_test_eof311: cs = 311; goto _test_eof;
	_test_eof1127: cs = 1127; goto _test_eof;
	_test_eof312: cs = 312; goto _test_eof;
	_test_eof313: cs = 313; goto _test_eof;
	_test_eof314: cs = 314; goto _test_eof;
	_test_eof315: cs = 315; goto _test_eof;
	_test_eof316: cs = 316; goto _test_eof;
	_test_eof317: cs = 317; goto _test_eof;
	_test_eof318: cs = 318; goto _test_eof;
	_test_eof1128: cs = 1128; goto _test_eof;
	_test_eof319: cs = 319; goto _test_eof;
	_test_eof320: cs = 320; goto _test_eof;
	_test_eof321: cs = 321; goto _test_eof;
	_test_eof322: cs = 322; goto _test_eof;
	_test_eof323: cs = 323; goto _test_eof;
	_test_eof324: cs = 324; goto _test_eof;
	_test_eof325: cs = 325; goto _test_eof;
	_test_eof326: cs = 326; goto _test_eof;
	_test_eof327: cs = 327; goto _test_eof;
	_test_eof1129: cs = 1129; goto _test_eof;
	_test_eof1130: cs = 1130; goto _test_eof;
	_test_eof1131: cs = 1131; goto _test_eof;
	_test_eof328: cs = 328; goto _test_eof;
	_test_eof329: cs = 329; goto _test_eof;
	_test_eof330: cs = 330; goto _test_eof;
	_test_eof331: cs = 331; goto _test_eof;
	_test_eof332: cs = 332; goto _test_eof;
	_test_eof333: cs = 333; goto _test_eof;
	_test_eof334: cs = 334; goto _test_eof;
	_test_eof335: cs = 335; goto _test_eof;
	_test_eof1132: cs = 1132; goto _test_eof;
	_test_eof1133: cs = 1133; goto _test_eof;
	_test_eof336: cs = 336; goto _test_eof;
	_test_eof337: cs = 337; goto _test_eof;
	_test_eof338: cs = 338; goto _test_eof;
	_test_eof1134: cs = 1134; goto _test_eof;
	_test_eof339: cs = 339; goto _test_eof;
	_test_eof340: cs = 340; goto _test_eof;
	_test_eof341: cs = 341; goto _test_eof;
	_test_eof342: cs = 342; goto _test_eof;
	_test_eof343: cs = 343; goto _test_eof;
	_test_eof344: cs = 344; goto _test_eof;
	_test_eof345: cs = 345; goto _test_eof;
	_test_eof346: cs = 346; goto _test_eof;
	_test_eof347: cs = 347; goto _test_eof;
	_test_eof348: cs = 348; goto _test_eof;
	_test_eof349: cs = 349; goto _test_eof;
	_test_eof350: cs = 350; goto _test_eof;
	_test_eof351: cs = 351; goto _test_eof;
	_test_eof352: cs = 352; goto _test_eof;
	_test_eof353: cs = 353; goto _test_eof;
	_test_eof354: cs = 354; goto _test_eof;
	_test_eof355: cs = 355; goto _test_eof;
	_test_eof356: cs = 356; goto _test_eof;
	_test_eof357: cs = 357; goto _test_eof;
	_test_eof358: cs = 358; goto _test_eof;
	_test_eof359: cs = 359; goto _test_eof;
	_test_eof360: cs = 360; goto _test_eof;
	_test_eof361: cs = 361; goto _test_eof;
	_test_eof362: cs = 362; goto _test_eof;
	_test_eof363: cs = 363; goto _test_eof;
	_test_eof364: cs = 364; goto _test_eof;
	_test_eof365: cs = 365; goto _test_eof;
	_test_eof366: cs = 366; goto _test_eof;
	_test_eof367: cs = 367; goto _test_eof;
	_test_eof368: cs = 368; goto _test_eof;
	_test_eof369: cs = 369; goto _test_eof;
	_test_eof370: cs = 370; goto _test_eof;
	_test_eof371: cs = 371; goto _test_eof;
	_test_eof372: cs = 372; goto _test_eof;
	_test_eof373: cs = 373; goto _test_eof;
	_test_eof374: cs = 374; goto _test_eof;
	_test_eof375: cs = 375; goto _test_eof;
	_test_eof376: cs = 376; goto _test_eof;
	_test_eof377: cs = 377; goto _test_eof;
	_test_eof378: cs = 378; goto _test_eof;
	_test_eof379: cs = 379; goto _test_eof;
	_test_eof380: cs = 380; goto _test_eof;
	_test_eof381: cs = 381; goto _test_eof;
	_test_eof382: cs = 382; goto _test_eof;
	_test_eof383: cs = 383; goto _test_eof;
	_test_eof384: cs = 384; goto _test_eof;
	_test_eof385: cs = 385; goto _test_eof;
	_test_eof386: cs = 386; goto _test_eof;
	_test_eof387: cs = 387; goto _test_eof;
	_test_eof388: cs = 388; goto _test_eof;
	_test_eof389: cs = 389; goto _test_eof;
	_test_eof390: cs = 390; goto _test_eof;
	_test_eof391: cs = 391; goto _test_eof;
	_test_eof392: cs = 392; goto _test_eof;
	_test_eof393: cs = 393; goto _test_eof;
	_test_eof394: cs = 394; goto _test_eof;
	_test_eof395: cs = 395; goto _test_eof;
	_test_eof396: cs = 396; goto _test_eof;
	_test_eof397: cs = 397; goto _test_eof;
	_test_eof398: cs = 398; goto _test_eof;
	_test_eof399: cs = 399; goto _test_eof;
	_test_eof400: cs = 400; goto _test_eof;
	_test_eof401: cs = 401; goto _test_eof;
	_test_eof402: cs = 402; goto _test_eof;
	_test_eof403: cs = 403; goto _test_eof;
	_test_eof404: cs = 404; goto _test_eof;
	_test_eof405: cs = 405; goto _test_eof;
	_test_eof406: cs = 406; goto _test_eof;
	_test_eof407: cs = 407; goto _test_eof;
	_test_eof408: cs = 408; goto _test_eof;
	_test_eof409: cs = 409; goto _test_eof;
	_test_eof410: cs = 410; goto _test_eof;
	_test_eof411: cs = 411; goto _test_eof;
	_test_eof412: cs = 412; goto _test_eof;
	_test_eof413: cs = 413; goto _test_eof;
	_test_eof414: cs = 414; goto _test_eof;
	_test_eof415: cs = 415; goto _test_eof;
	_test_eof416: cs = 416; goto _test_eof;
	_test_eof417: cs = 417; goto _test_eof;
	_test_eof418: cs = 418; goto _test_eof;
	_test_eof419: cs = 419; goto _test_eof;
	_test_eof420: cs = 420; goto _test_eof;
	_test_eof421: cs = 421; goto _test_eof;
	_test_eof422: cs = 422; goto _test_eof;
	_test_eof423: cs = 423; goto _test_eof;
	_test_eof424: cs = 424; goto _test_eof;
	_test_eof425: cs = 425; goto _test_eof;
	_test_eof426: cs = 426; goto _test_eof;
	_test_eof427: cs = 427; goto _test_eof;
	_test_eof428: cs = 428; goto _test_eof;
	_test_eof429: cs = 429; goto _test_eof;
	_test_eof430: cs = 430; goto _test_eof;
	_test_eof431: cs = 431; goto _test_eof;
	_test_eof432: cs = 432; goto _test_eof;
	_test_eof433: cs = 433; goto _test_eof;
	_test_eof434: cs = 434; goto _test_eof;
	_test_eof435: cs = 435; goto _test_eof;
	_test_eof436: cs = 436; goto _test_eof;
	_test_eof437: cs = 437; goto _test_eof;
	_test_eof438: cs = 438; goto _test_eof;
	_test_eof439: cs = 439; goto _test_eof;
	_test_eof440: cs = 440; goto _test_eof;
	_test_eof441: cs = 441; goto _test_eof;
	_test_eof442: cs = 442; goto _test_eof;
	_test_eof443: cs = 443; goto _test_eof;
	_test_eof444: cs = 444; goto _test_eof;
	_test_eof445: cs = 445; goto _test_eof;
	_test_eof446: cs = 446; goto _test_eof;
	_test_eof447: cs = 447; goto _test_eof;
	_test_eof448: cs = 448; goto _test_eof;
	_test_eof449: cs = 449; goto _test_eof;
	_test_eof450: cs = 450; goto _test_eof;
	_test_eof451: cs = 451; goto _test_eof;
	_test_eof452: cs = 452; goto _test_eof;
	_test_eof453: cs = 453; goto _test_eof;
	_test_eof454: cs = 454; goto _test_eof;
	_test_eof455: cs = 455; goto _test_eof;
	_test_eof456: cs = 456; goto _test_eof;
	_test_eof457: cs = 457; goto _test_eof;
	_test_eof458: cs = 458; goto _test_eof;
	_test_eof459: cs = 459; goto _test_eof;
	_test_eof460: cs = 460; goto _test_eof;
	_test_eof461: cs = 461; goto _test_eof;
	_test_eof462: cs = 462; goto _test_eof;
	_test_eof463: cs = 463; goto _test_eof;
	_test_eof464: cs = 464; goto _test_eof;
	_test_eof465: cs = 465; goto _test_eof;
	_test_eof466: cs = 466; goto _test_eof;
	_test_eof467: cs = 467; goto _test_eof;
	_test_eof1135: cs = 1135; goto _test_eof;
	_test_eof1136: cs = 1136; goto _test_eof;
	_test_eof1137: cs = 1137; goto _test_eof;
	_test_eof468: cs = 468; goto _test_eof;
	_test_eof469: cs = 469; goto _test_eof;
	_test_eof470: cs = 470; goto _test_eof;
	_test_eof471: cs = 471; goto _test_eof;
	_test_eof472: cs = 472; goto _test_eof;
	_test_eof1138: cs = 1138; goto _test_eof;
	_test_eof473: cs = 473; goto _test_eof;
	_test_eof474: cs = 474; goto _test_eof;
	_test_eof475: cs = 475; goto _test_eof;
	_test_eof476: cs = 476; goto _test_eof;
	_test_eof1139: cs = 1139; goto _test_eof;
	_test_eof1140: cs = 1140; goto _test_eof;
	_test_eof1141: cs = 1141; goto _test_eof;
	_test_eof477: cs = 477; goto _test_eof;
	_test_eof478: cs = 478; goto _test_eof;
	_test_eof1142: cs = 1142; goto _test_eof;
	_test_eof479: cs = 479; goto _test_eof;
	_test_eof480: cs = 480; goto _test_eof;
	_test_eof481: cs = 481; goto _test_eof;
	_test_eof1143: cs = 1143; goto _test_eof;
	_test_eof482: cs = 482; goto _test_eof;
	_test_eof483: cs = 483; goto _test_eof;
	_test_eof484: cs = 484; goto _test_eof;
	_test_eof485: cs = 485; goto _test_eof;
	_test_eof486: cs = 486; goto _test_eof;
	_test_eof487: cs = 487; goto _test_eof;
	_test_eof488: cs = 488; goto _test_eof;
	_test_eof489: cs = 489; goto _test_eof;
	_test_eof490: cs = 490; goto _test_eof;
	_test_eof491: cs = 491; goto _test_eof;
	_test_eof492: cs = 492; goto _test_eof;
	_test_eof493: cs = 493; goto _test_eof;
	_test_eof494: cs = 494; goto _test_eof;
	_test_eof495: cs = 495; goto _test_eof;
	_test_eof496: cs = 496; goto _test_eof;
	_test_eof497: cs = 497; goto _test_eof;
	_test_eof498: cs = 498; goto _test_eof;
	_test_eof499: cs = 499; goto _test_eof;
	_test_eof500: cs = 500; goto _test_eof;
	_test_eof501: cs = 501; goto _test_eof;
	_test_eof502: cs = 502; goto _test_eof;
	_test_eof503: cs = 503; goto _test_eof;
	_test_eof504: cs = 504; goto _test_eof;
	_test_eof505: cs = 505; goto _test_eof;
	_test_eof506: cs = 506; goto _test_eof;
	_test_eof507: cs = 507; goto _test_eof;
	_test_eof508: cs = 508; goto _test_eof;
	_test_eof509: cs = 509; goto _test_eof;
	_test_eof510: cs = 510; goto _test_eof;
	_test_eof511: cs = 511; goto _test_eof;
	_test_eof512: cs = 512; goto _test_eof;
	_test_eof513: cs = 513; goto _test_eof;
	_test_eof514: cs = 514; goto _test_eof;
	_test_eof515: cs = 515; goto _test_eof;
	_test_eof516: cs = 516; goto _test_eof;
	_test_eof517: cs = 517; goto _test_eof;
	_test_eof518: cs = 518; goto _test_eof;
	_test_eof519: cs = 519; goto _test_eof;
	_test_eof520: cs = 520; goto _test_eof;
	_test_eof521: cs = 521; goto _test_eof;
	_test_eof522: cs = 522; goto _test_eof;
	_test_eof523: cs = 523; goto _test_eof;
	_test_eof524: cs = 524; goto _test_eof;
	_test_eof525: cs = 525; goto _test_eof;
	_test_eof526: cs = 526; goto _test_eof;
	_test_eof527: cs = 527; goto _test_eof;
	_test_eof528: cs = 528; goto _test_eof;
	_test_eof529: cs = 529; goto _test_eof;
	_test_eof530: cs = 530; goto _test_eof;
	_test_eof531: cs = 531; goto _test_eof;
	_test_eof532: cs = 532; goto _test_eof;
	_test_eof533: cs = 533; goto _test_eof;
	_test_eof534: cs = 534; goto _test_eof;
	_test_eof535: cs = 535; goto _test_eof;
	_test_eof536: cs = 536; goto _test_eof;
	_test_eof537: cs = 537; goto _test_eof;
	_test_eof538: cs = 538; goto _test_eof;
	_test_eof539: cs = 539; goto _test_eof;
	_test_eof540: cs = 540; goto _test_eof;
	_test_eof541: cs = 541; goto _test_eof;
	_test_eof542: cs = 542; goto _test_eof;
	_test_eof543: cs = 543; goto _test_eof;
	_test_eof544: cs = 544; goto _test_eof;
	_test_eof545: cs = 545; goto _test_eof;
	_test_eof546: cs = 546; goto _test_eof;
	_test_eof547: cs = 547; goto _test_eof;
	_test_eof548: cs = 548; goto _test_eof;
	_test_eof549: cs = 549; goto _test_eof;
	_test_eof550: cs = 550; goto _test_eof;
	_test_eof551: cs = 551; goto _test_eof;
	_test_eof552: cs = 552; goto _test_eof;
	_test_eof553: cs = 553; goto _test_eof;
	_test_eof554: cs = 554; goto _test_eof;
	_test_eof555: cs = 555; goto _test_eof;
	_test_eof556: cs = 556; goto _test_eof;
	_test_eof557: cs = 557; goto _test_eof;
	_test_eof558: cs = 558; goto _test_eof;
	_test_eof559: cs = 559; goto _test_eof;
	_test_eof560: cs = 560; goto _test_eof;
	_test_eof561: cs = 561; goto _test_eof;
	_test_eof562: cs = 562; goto _test_eof;
	_test_eof563: cs = 563; goto _test_eof;
	_test_eof564: cs = 564; goto _test_eof;
	_test_eof565: cs = 565; goto _test_eof;
	_test_eof566: cs = 566; goto _test_eof;
	_test_eof567: cs = 567; goto _test_eof;
	_test_eof568: cs = 568; goto _test_eof;
	_test_eof569: cs = 569; goto _test_eof;
	_test_eof570: cs = 570; goto _test_eof;
	_test_eof571: cs = 571; goto _test_eof;
	_test_eof572: cs = 572; goto _test_eof;
	_test_eof573: cs = 573; goto _test_eof;
	_test_eof574: cs = 574; goto _test_eof;
	_test_eof575: cs = 575; goto _test_eof;
	_test_eof576: cs = 576; goto _test_eof;
	_test_eof1144: cs = 1144; goto _test_eof;
	_test_eof577: cs = 577; goto _test_eof;
	_test_eof578: cs = 578; goto _test_eof;
	_test_eof579: cs = 579; goto _test_eof;
	_test_eof580: cs = 580; goto _test_eof;
	_test_eof581: cs = 581; goto _test_eof;
	_test_eof582: cs = 582; goto _test_eof;
	_test_eof583: cs = 583; goto _test_eof;
	_test_eof584: cs = 584; goto _test_eof;
	_test_eof585: cs = 585; goto _test_eof;
	_test_eof586: cs = 586; goto _test_eof;
	_test_eof587: cs = 587; goto _test_eof;
	_test_eof588: cs = 588; goto _test_eof;
	_test_eof589: cs = 589; goto _test_eof;
	_test_eof590: cs = 590; goto _test_eof;
	_test_eof591: cs = 591; goto _test_eof;
	_test_eof592: cs = 592; goto _test_eof;
	_test_eof593: cs = 593; goto _test_eof;
	_test_eof594: cs = 594; goto _test_eof;
	_test_eof595: cs = 595; goto _test_eof;
	_test_eof596: cs = 596; goto _test_eof;
	_test_eof597: cs = 597; goto _test_eof;
	_test_eof598: cs = 598; goto _test_eof;
	_test_eof599: cs = 599; goto _test_eof;
	_test_eof600: cs = 600; goto _test_eof;
	_test_eof601: cs = 601; goto _test_eof;
	_test_eof602: cs = 602; goto _test_eof;
	_test_eof603: cs = 603; goto _test_eof;
	_test_eof604: cs = 604; goto _test_eof;
	_test_eof605: cs = 605; goto _test_eof;
	_test_eof606: cs = 606; goto _test_eof;
	_test_eof607: cs = 607; goto _test_eof;
	_test_eof608: cs = 608; goto _test_eof;
	_test_eof609: cs = 609; goto _test_eof;
	_test_eof610: cs = 610; goto _test_eof;
	_test_eof611: cs = 611; goto _test_eof;
	_test_eof612: cs = 612; goto _test_eof;
	_test_eof613: cs = 613; goto _test_eof;
	_test_eof614: cs = 614; goto _test_eof;
	_test_eof615: cs = 615; goto _test_eof;
	_test_eof616: cs = 616; goto _test_eof;
	_test_eof617: cs = 617; goto _test_eof;
	_test_eof1145: cs = 1145; goto _test_eof;
	_test_eof618: cs = 618; goto _test_eof;
	_test_eof619: cs = 619; goto _test_eof;
	_test_eof1146: cs = 1146; goto _test_eof;
	_test_eof620: cs = 620; goto _test_eof;
	_test_eof621: cs = 621; goto _test_eof;
	_test_eof622: cs = 622; goto _test_eof;
	_test_eof623: cs = 623; goto _test_eof;
	_test_eof624: cs = 624; goto _test_eof;
	_test_eof625: cs = 625; goto _test_eof;
	_test_eof626: cs = 626; goto _test_eof;
	_test_eof627: cs = 627; goto _test_eof;
	_test_eof628: cs = 628; goto _test_eof;
	_test_eof629: cs = 629; goto _test_eof;
	_test_eof630: cs = 630; goto _test_eof;
	_test_eof631: cs = 631; goto _test_eof;
	_test_eof632: cs = 632; goto _test_eof;
	_test_eof633: cs = 633; goto _test_eof;
	_test_eof1147: cs = 1147; goto _test_eof;
	_test_eof634: cs = 634; goto _test_eof;
	_test_eof635: cs = 635; goto _test_eof;
	_test_eof636: cs = 636; goto _test_eof;
	_test_eof637: cs = 637; goto _test_eof;
	_test_eof638: cs = 638; goto _test_eof;
	_test_eof639: cs = 639; goto _test_eof;
	_test_eof640: cs = 640; goto _test_eof;
	_test_eof641: cs = 641; goto _test_eof;
	_test_eof642: cs = 642; goto _test_eof;
	_test_eof643: cs = 643; goto _test_eof;
	_test_eof644: cs = 644; goto _test_eof;
	_test_eof645: cs = 645; goto _test_eof;
	_test_eof646: cs = 646; goto _test_eof;
	_test_eof647: cs = 647; goto _test_eof;
	_test_eof648: cs = 648; goto _test_eof;
	_test_eof649: cs = 649; goto _test_eof;
	_test_eof650: cs = 650; goto _test_eof;
	_test_eof651: cs = 651; goto _test_eof;
	_test_eof652: cs = 652; goto _test_eof;
	_test_eof653: cs = 653; goto _test_eof;
	_test_eof654: cs = 654; goto _test_eof;
	_test_eof655: cs = 655; goto _test_eof;
	_test_eof1148: cs = 1148; goto _test_eof;
	_test_eof656: cs = 656; goto _test_eof;
	_test_eof657: cs = 657; goto _test_eof;
	_test_eof658: cs = 658; goto _test_eof;
	_test_eof659: cs = 659; goto _test_eof;
	_test_eof660: cs = 660; goto _test_eof;
	_test_eof1149: cs = 1149; goto _test_eof;
	_test_eof661: cs = 661; goto _test_eof;
	_test_eof662: cs = 662; goto _test_eof;
	_test_eof663: cs = 663; goto _test_eof;
	_test_eof664: cs = 664; goto _test_eof;
	_test_eof665: cs = 665; goto _test_eof;
	_test_eof1150: cs = 1150; goto _test_eof;
	_test_eof666: cs = 666; goto _test_eof;
	_test_eof667: cs = 667; goto _test_eof;
	_test_eof668: cs = 668; goto _test_eof;
	_test_eof669: cs = 669; goto _test_eof;
	_test_eof670: cs = 670; goto _test_eof;
	_test_eof1151: cs = 1151; goto _test_eof;
	_test_eof1152: cs = 1152; goto _test_eof;
	_test_eof1153: cs = 1153; goto _test_eof;
	_test_eof671: cs = 671; goto _test_eof;
	_test_eof672: cs = 672; goto _test_eof;
	_test_eof1154: cs = 1154; goto _test_eof;
	_test_eof673: cs = 673; goto _test_eof;
	_test_eof674: cs = 674; goto _test_eof;
	_test_eof675: cs = 675; goto _test_eof;
	_test_eof676: cs = 676; goto _test_eof;
	_test_eof677: cs = 677; goto _test_eof;
	_test_eof678: cs = 678; goto _test_eof;
	_test_eof679: cs = 679; goto _test_eof;
	_test_eof680: cs = 680; goto _test_eof;
	_test_eof681: cs = 681; goto _test_eof;
	_test_eof682: cs = 682; goto _test_eof;
	_test_eof683: cs = 683; goto _test_eof;
	_test_eof684: cs = 684; goto _test_eof;
	_test_eof685: cs = 685; goto _test_eof;
	_test_eof686: cs = 686; goto _test_eof;
	_test_eof687: cs = 687; goto _test_eof;
	_test_eof688: cs = 688; goto _test_eof;
	_test_eof689: cs = 689; goto _test_eof;
	_test_eof690: cs = 690; goto _test_eof;
	_test_eof691: cs = 691; goto _test_eof;
	_test_eof692: cs = 692; goto _test_eof;
	_test_eof693: cs = 693; goto _test_eof;
	_test_eof694: cs = 694; goto _test_eof;
	_test_eof695: cs = 695; goto _test_eof;
	_test_eof696: cs = 696; goto _test_eof;
	_test_eof697: cs = 697; goto _test_eof;
	_test_eof698: cs = 698; goto _test_eof;
	_test_eof699: cs = 699; goto _test_eof;
	_test_eof1155: cs = 1155; goto _test_eof;
	_test_eof1156: cs = 1156; goto _test_eof;
	_test_eof1157: cs = 1157; goto _test_eof;
	_test_eof700: cs = 700; goto _test_eof;
	_test_eof701: cs = 701; goto _test_eof;
	_test_eof702: cs = 702; goto _test_eof;
	_test_eof1158: cs = 1158; goto _test_eof;
	_test_eof1159: cs = 1159; goto _test_eof;
	_test_eof703: cs = 703; goto _test_eof;
	_test_eof704: cs = 704; goto _test_eof;
	_test_eof705: cs = 705; goto _test_eof;
	_test_eof706: cs = 706; goto _test_eof;
	_test_eof1160: cs = 1160; goto _test_eof;
	_test_eof1161: cs = 1161; goto _test_eof;
	_test_eof707: cs = 707; goto _test_eof;
	_test_eof708: cs = 708; goto _test_eof;
	_test_eof709: cs = 709; goto _test_eof;
	_test_eof710: cs = 710; goto _test_eof;
	_test_eof1162: cs = 1162; goto _test_eof;
	_test_eof1163: cs = 1163; goto _test_eof;
	_test_eof711: cs = 711; goto _test_eof;
	_test_eof712: cs = 712; goto _test_eof;
	_test_eof713: cs = 713; goto _test_eof;
	_test_eof714: cs = 714; goto _test_eof;
	_test_eof715: cs = 715; goto _test_eof;
	_test_eof716: cs = 716; goto _test_eof;
	_test_eof717: cs = 717; goto _test_eof;
	_test_eof718: cs = 718; goto _test_eof;
	_test_eof719: cs = 719; goto _test_eof;
	_test_eof720: cs = 720; goto _test_eof;
	_test_eof721: cs = 721; goto _test_eof;
	_test_eof722: cs = 722; goto _test_eof;
	_test_eof723: cs = 723; goto _test_eof;
	_test_eof724: cs = 724; goto _test_eof;
	_test_eof725: cs = 725; goto _test_eof;
	_test_eof726: cs = 726; goto _test_eof;
	_test_eof727: cs = 727; goto _test_eof;
	_test_eof728: cs = 728; goto _test_eof;
	_test_eof729: cs = 729; goto _test_eof;
	_test_eof730: cs = 730; goto _test_eof;
	_test_eof731: cs = 731; goto _test_eof;
	_test_eof732: cs = 732; goto _test_eof;
	_test_eof733: cs = 733; goto _test_eof;
	_test_eof734: cs = 734; goto _test_eof;
	_test_eof735: cs = 735; goto _test_eof;
	_test_eof1164: cs = 1164; goto _test_eof;
	_test_eof736: cs = 736; goto _test_eof;
	_test_eof737: cs = 737; goto _test_eof;
	_test_eof738: cs = 738; goto _test_eof;
	_test_eof739: cs = 739; goto _test_eof;
	_test_eof740: cs = 740; goto _test_eof;
	_test_eof741: cs = 741; goto _test_eof;
	_test_eof742: cs = 742; goto _test_eof;
	_test_eof743: cs = 743; goto _test_eof;
	_test_eof744: cs = 744; goto _test_eof;
	_test_eof745: cs = 745; goto _test_eof;
	_test_eof746: cs = 746; goto _test_eof;
	_test_eof747: cs = 747; goto _test_eof;
	_test_eof748: cs = 748; goto _test_eof;
	_test_eof749: cs = 749; goto _test_eof;
	_test_eof750: cs = 750; goto _test_eof;
	_test_eof1165: cs = 1165; goto _test_eof;
	_test_eof751: cs = 751; goto _test_eof;
	_test_eof752: cs = 752; goto _test_eof;
	_test_eof753: cs = 753; goto _test_eof;
	_test_eof754: cs = 754; goto _test_eof;
	_test_eof755: cs = 755; goto _test_eof;
	_test_eof756: cs = 756; goto _test_eof;
	_test_eof757: cs = 757; goto _test_eof;
	_test_eof758: cs = 758; goto _test_eof;
	_test_eof759: cs = 759; goto _test_eof;
	_test_eof760: cs = 760; goto _test_eof;
	_test_eof761: cs = 761; goto _test_eof;
	_test_eof762: cs = 762; goto _test_eof;
	_test_eof763: cs = 763; goto _test_eof;
	_test_eof1166: cs = 1166; goto _test_eof;
	_test_eof764: cs = 764; goto _test_eof;
	_test_eof765: cs = 765; goto _test_eof;
	_test_eof766: cs = 766; goto _test_eof;
	_test_eof767: cs = 767; goto _test_eof;
	_test_eof768: cs = 768; goto _test_eof;
	_test_eof769: cs = 769; goto _test_eof;
	_test_eof770: cs = 770; goto _test_eof;
	_test_eof771: cs = 771; goto _test_eof;
	_test_eof772: cs = 772; goto _test_eof;
	_test_eof773: cs = 773; goto _test_eof;
	_test_eof774: cs = 774; goto _test_eof;
	_test_eof1167: cs = 1167; goto _test_eof;
	_test_eof1168: cs = 1168; goto _test_eof;
	_test_eof775: cs = 775; goto _test_eof;
	_test_eof776: cs = 776; goto _test_eof;
	_test_eof777: cs = 777; goto _test_eof;
	_test_eof1169: cs = 1169; goto _test_eof;
	_test_eof778: cs = 778; goto _test_eof;
	_test_eof779: cs = 779; goto _test_eof;
	_test_eof780: cs = 780; goto _test_eof;
	_test_eof781: cs = 781; goto _test_eof;
	_test_eof782: cs = 782; goto _test_eof;
	_test_eof783: cs = 783; goto _test_eof;
	_test_eof784: cs = 784; goto _test_eof;
	_test_eof785: cs = 785; goto _test_eof;
	_test_eof786: cs = 786; goto _test_eof;
	_test_eof787: cs = 787; goto _test_eof;
	_test_eof1170: cs = 1170; goto _test_eof;
	_test_eof1171: cs = 1171; goto _test_eof;
	_test_eof1172: cs = 1172; goto _test_eof;
	_test_eof788: cs = 788; goto _test_eof;
	_test_eof789: cs = 789; goto _test_eof;
	_test_eof790: cs = 790; goto _test_eof;
	_test_eof791: cs = 791; goto _test_eof;
	_test_eof792: cs = 792; goto _test_eof;
	_test_eof793: cs = 793; goto _test_eof;
	_test_eof794: cs = 794; goto _test_eof;
	_test_eof795: cs = 795; goto _test_eof;
	_test_eof796: cs = 796; goto _test_eof;
	_test_eof797: cs = 797; goto _test_eof;
	_test_eof798: cs = 798; goto _test_eof;
	_test_eof1173: cs = 1173; goto _test_eof;
	_test_eof1174: cs = 1174; goto _test_eof;
	_test_eof1175: cs = 1175; goto _test_eof;
	_test_eof799: cs = 799; goto _test_eof;
	_test_eof800: cs = 800; goto _test_eof;
	_test_eof801: cs = 801; goto _test_eof;
	_test_eof802: cs = 802; goto _test_eof;
	_test_eof803: cs = 803; goto _test_eof;
	_test_eof804: cs = 804; goto _test_eof;
	_test_eof805: cs = 805; goto _test_eof;
	_test_eof806: cs = 806; goto _test_eof;
	_test_eof807: cs = 807; goto _test_eof;
	_test_eof808: cs = 808; goto _test_eof;
	_test_eof809: cs = 809; goto _test_eof;
	_test_eof810: cs = 810; goto _test_eof;
	_test_eof1176: cs = 1176; goto _test_eof;
	_test_eof811: cs = 811; goto _test_eof;
	_test_eof812: cs = 812; goto _test_eof;
	_test_eof813: cs = 813; goto _test_eof;
	_test_eof1177: cs = 1177; goto _test_eof;
	_test_eof1178: cs = 1178; goto _test_eof;
	_test_eof814: cs = 814; goto _test_eof;
	_test_eof1179: cs = 1179; goto _test_eof;
	_test_eof1180: cs = 1180; goto _test_eof;
	_test_eof815: cs = 815; goto _test_eof;
	_test_eof1181: cs = 1181; goto _test_eof;
	_test_eof1182: cs = 1182; goto _test_eof;
	_test_eof816: cs = 816; goto _test_eof;
	_test_eof817: cs = 817; goto _test_eof;
	_test_eof818: cs = 818; goto _test_eof;
	_test_eof819: cs = 819; goto _test_eof;
	_test_eof820: cs = 820; goto _test_eof;
	_test_eof821: cs = 821; goto _test_eof;
	_test_eof822: cs = 822; goto _test_eof;
	_test_eof823: cs = 823; goto _test_eof;
	_test_eof824: cs = 824; goto _test_eof;
	_test_eof825: cs = 825; goto _test_eof;
	_test_eof826: cs = 826; goto _test_eof;
	_test_eof827: cs = 827; goto _test_eof;
	_test_eof828: cs = 828; goto _test_eof;
	_test_eof829: cs = 829; goto _test_eof;
	_test_eof830: cs = 830; goto _test_eof;
	_test_eof831: cs = 831; goto _test_eof;
	_test_eof832: cs = 832; goto _test_eof;
	_test_eof833: cs = 833; goto _test_eof;
	_test_eof834: cs = 834; goto _test_eof;
	_test_eof835: cs = 835; goto _test_eof;
	_test_eof836: cs = 836; goto _test_eof;
	_test_eof837: cs = 837; goto _test_eof;
	_test_eof838: cs = 838; goto _test_eof;
	_test_eof839: cs = 839; goto _test_eof;
	_test_eof840: cs = 840; goto _test_eof;
	_test_eof841: cs = 841; goto _test_eof;
	_test_eof842: cs = 842; goto _test_eof;
	_test_eof843: cs = 843; goto _test_eof;
	_test_eof844: cs = 844; goto _test_eof;
	_test_eof845: cs = 845; goto _test_eof;
	_test_eof846: cs = 846; goto _test_eof;
	_test_eof847: cs = 847; goto _test_eof;
	_test_eof848: cs = 848; goto _test_eof;
	_test_eof849: cs = 849; goto _test_eof;
	_test_eof850: cs = 850; goto _test_eof;
	_test_eof851: cs = 851; goto _test_eof;
	_test_eof852: cs = 852; goto _test_eof;
	_test_eof853: cs = 853; goto _test_eof;
	_test_eof854: cs = 854; goto _test_eof;
	_test_eof855: cs = 855; goto _test_eof;
	_test_eof856: cs = 856; goto _test_eof;
	_test_eof857: cs = 857; goto _test_eof;
	_test_eof1183: cs = 1183; goto _test_eof;
	_test_eof858: cs = 858; goto _test_eof;
	_test_eof859: cs = 859; goto _test_eof;
	_test_eof860: cs = 860; goto _test_eof;
	_test_eof861: cs = 861; goto _test_eof;
	_test_eof862: cs = 862; goto _test_eof;
	_test_eof863: cs = 863; goto _test_eof;
	_test_eof864: cs = 864; goto _test_eof;
	_test_eof865: cs = 865; goto _test_eof;
	_test_eof866: cs = 866; goto _test_eof;
	_test_eof867: cs = 867; goto _test_eof;
	_test_eof868: cs = 868; goto _test_eof;
	_test_eof869: cs = 869; goto _test_eof;
	_test_eof870: cs = 870; goto _test_eof;
	_test_eof871: cs = 871; goto _test_eof;
	_test_eof872: cs = 872; goto _test_eof;
	_test_eof873: cs = 873; goto _test_eof;
	_test_eof874: cs = 874; goto _test_eof;
	_test_eof875: cs = 875; goto _test_eof;
	_test_eof876: cs = 876; goto _test_eof;
	_test_eof877: cs = 877; goto _test_eof;
	_test_eof878: cs = 878; goto _test_eof;
	_test_eof879: cs = 879; goto _test_eof;
	_test_eof880: cs = 880; goto _test_eof;
	_test_eof881: cs = 881; goto _test_eof;
	_test_eof882: cs = 882; goto _test_eof;
	_test_eof883: cs = 883; goto _test_eof;
	_test_eof884: cs = 884; goto _test_eof;
	_test_eof885: cs = 885; goto _test_eof;
	_test_eof886: cs = 886; goto _test_eof;
	_test_eof887: cs = 887; goto _test_eof;
	_test_eof888: cs = 888; goto _test_eof;
	_test_eof889: cs = 889; goto _test_eof;
	_test_eof890: cs = 890; goto _test_eof;
	_test_eof891: cs = 891; goto _test_eof;
	_test_eof892: cs = 892; goto _test_eof;
	_test_eof893: cs = 893; goto _test_eof;
	_test_eof894: cs = 894; goto _test_eof;
	_test_eof895: cs = 895; goto _test_eof;
	_test_eof896: cs = 896; goto _test_eof;
	_test_eof897: cs = 897; goto _test_eof;
	_test_eof898: cs = 898; goto _test_eof;
	_test_eof899: cs = 899; goto _test_eof;
	_test_eof900: cs = 900; goto _test_eof;
	_test_eof901: cs = 901; goto _test_eof;
	_test_eof902: cs = 902; goto _test_eof;
	_test_eof903: cs = 903; goto _test_eof;
	_test_eof904: cs = 904; goto _test_eof;
	_test_eof905: cs = 905; goto _test_eof;
	_test_eof906: cs = 906; goto _test_eof;
	_test_eof907: cs = 907; goto _test_eof;
	_test_eof908: cs = 908; goto _test_eof;
	_test_eof909: cs = 909; goto _test_eof;
	_test_eof910: cs = 910; goto _test_eof;
	_test_eof911: cs = 911; goto _test_eof;
	_test_eof912: cs = 912; goto _test_eof;
	_test_eof913: cs = 913; goto _test_eof;
	_test_eof914: cs = 914; goto _test_eof;
	_test_eof915: cs = 915; goto _test_eof;
	_test_eof916: cs = 916; goto _test_eof;
	_test_eof917: cs = 917; goto _test_eof;
	_test_eof918: cs = 918; goto _test_eof;
	_test_eof919: cs = 919; goto _test_eof;
	_test_eof920: cs = 920; goto _test_eof;
	_test_eof921: cs = 921; goto _test_eof;
	_test_eof922: cs = 922; goto _test_eof;
	_test_eof923: cs = 923; goto _test_eof;
	_test_eof924: cs = 924; goto _test_eof;
	_test_eof925: cs = 925; goto _test_eof;
	_test_eof926: cs = 926; goto _test_eof;
	_test_eof927: cs = 927; goto _test_eof;
	_test_eof928: cs = 928; goto _test_eof;
	_test_eof929: cs = 929; goto _test_eof;
	_test_eof930: cs = 930; goto _test_eof;
	_test_eof931: cs = 931; goto _test_eof;
	_test_eof932: cs = 932; goto _test_eof;
	_test_eof933: cs = 933; goto _test_eof;
	_test_eof934: cs = 934; goto _test_eof;
	_test_eof935: cs = 935; goto _test_eof;
	_test_eof936: cs = 936; goto _test_eof;
	_test_eof937: cs = 937; goto _test_eof;
	_test_eof938: cs = 938; goto _test_eof;
	_test_eof939: cs = 939; goto _test_eof;
	_test_eof940: cs = 940; goto _test_eof;
	_test_eof941: cs = 941; goto _test_eof;
	_test_eof942: cs = 942; goto _test_eof;
	_test_eof943: cs = 943; goto _test_eof;
	_test_eof944: cs = 944; goto _test_eof;
	_test_eof945: cs = 945; goto _test_eof;
	_test_eof946: cs = 946; goto _test_eof;
	_test_eof947: cs = 947; goto _test_eof;
	_test_eof948: cs = 948; goto _test_eof;
	_test_eof949: cs = 949; goto _test_eof;
	_test_eof950: cs = 950; goto _test_eof;
	_test_eof951: cs = 951; goto _test_eof;
	_test_eof952: cs = 952; goto _test_eof;
	_test_eof953: cs = 953; goto _test_eof;
	_test_eof954: cs = 954; goto _test_eof;
	_test_eof955: cs = 955; goto _test_eof;
	_test_eof956: cs = 956; goto _test_eof;
	_test_eof957: cs = 957; goto _test_eof;
	_test_eof958: cs = 958; goto _test_eof;
	_test_eof959: cs = 959; goto _test_eof;
	_test_eof960: cs = 960; goto _test_eof;
	_test_eof961: cs = 961; goto _test_eof;
	_test_eof962: cs = 962; goto _test_eof;
	_test_eof963: cs = 963; goto _test_eof;
	_test_eof964: cs = 964; goto _test_eof;
	_test_eof965: cs = 965; goto _test_eof;
	_test_eof966: cs = 966; goto _test_eof;
	_test_eof967: cs = 967; goto _test_eof;
	_test_eof968: cs = 968; goto _test_eof;
	_test_eof969: cs = 969; goto _test_eof;
	_test_eof970: cs = 970; goto _test_eof;
	_test_eof971: cs = 971; goto _test_eof;
	_test_eof972: cs = 972; goto _test_eof;
	_test_eof973: cs = 973; goto _test_eof;
	_test_eof974: cs = 974; goto _test_eof;
	_test_eof975: cs = 975; goto _test_eof;
	_test_eof976: cs = 976; goto _test_eof;
	_test_eof977: cs = 977; goto _test_eof;
	_test_eof978: cs = 978; goto _test_eof;
	_test_eof979: cs = 979; goto _test_eof;
	_test_eof980: cs = 980; goto _test_eof;
	_test_eof981: cs = 981; goto _test_eof;
	_test_eof982: cs = 982; goto _test_eof;
	_test_eof983: cs = 983; goto _test_eof;
	_test_eof984: cs = 984; goto _test_eof;
	_test_eof985: cs = 985; goto _test_eof;
	_test_eof986: cs = 986; goto _test_eof;
	_test_eof987: cs = 987; goto _test_eof;
	_test_eof988: cs = 988; goto _test_eof;
	_test_eof989: cs = 989; goto _test_eof;
	_test_eof990: cs = 990; goto _test_eof;
	_test_eof991: cs = 991; goto _test_eof;
	_test_eof992: cs = 992; goto _test_eof;
	_test_eof993: cs = 993; goto _test_eof;
	_test_eof994: cs = 994; goto _test_eof;
	_test_eof995: cs = 995; goto _test_eof;
	_test_eof996: cs = 996; goto _test_eof;
	_test_eof1184: cs = 1184; goto _test_eof;
	_test_eof997: cs = 997; goto _test_eof;
	_test_eof998: cs = 998; goto _test_eof;
	_test_eof999: cs = 999; goto _test_eof;
	_test_eof1000: cs = 1000; goto _test_eof;
	_test_eof1001: cs = 1001; goto _test_eof;
	_test_eof1002: cs = 1002; goto _test_eof;
	_test_eof1003: cs = 1003; goto _test_eof;
	_test_eof1004: cs = 1004; goto _test_eof;
	_test_eof1185: cs = 1185; goto _test_eof;
	_test_eof1005: cs = 1005; goto _test_eof;
	_test_eof1006: cs = 1006; goto _test_eof;
	_test_eof1007: cs = 1007; goto _test_eof;
	_test_eof1008: cs = 1008; goto _test_eof;
	_test_eof1009: cs = 1009; goto _test_eof;
	_test_eof1186: cs = 1186; goto _test_eof;
	_test_eof1010: cs = 1010; goto _test_eof;
	_test_eof1011: cs = 1011; goto _test_eof;
	_test_eof1012: cs = 1012; goto _test_eof;
	_test_eof1013: cs = 1013; goto _test_eof;
	_test_eof1014: cs = 1014; goto _test_eof;
	_test_eof1015: cs = 1015; goto _test_eof;
	_test_eof1016: cs = 1016; goto _test_eof;
	_test_eof1017: cs = 1017; goto _test_eof;
	_test_eof1018: cs = 1018; goto _test_eof;
	_test_eof1019: cs = 1019; goto _test_eof;
	_test_eof1020: cs = 1020; goto _test_eof;
	_test_eof1021: cs = 1021; goto _test_eof;
	_test_eof1022: cs = 1022; goto _test_eof;
	_test_eof1023: cs = 1023; goto _test_eof;
	_test_eof1024: cs = 1024; goto _test_eof;
	_test_eof1025: cs = 1025; goto _test_eof;
	_test_eof1026: cs = 1026; goto _test_eof;
	_test_eof1027: cs = 1027; goto _test_eof;
	_test_eof1187: cs = 1187; goto _test_eof;
	_test_eof1028: cs = 1028; goto _test_eof;
	_test_eof1029: cs = 1029; goto _test_eof;
	_test_eof1030: cs = 1030; goto _test_eof;
	_test_eof1031: cs = 1031; goto _test_eof;
	_test_eof1032: cs = 1032; goto _test_eof;
	_test_eof1033: cs = 1033; goto _test_eof;
	_test_eof1034: cs = 1034; goto _test_eof;
	_test_eof1035: cs = 1035; goto _test_eof;
	_test_eof1036: cs = 1036; goto _test_eof;
	_test_eof1037: cs = 1037; goto _test_eof;
	_test_eof1038: cs = 1038; goto _test_eof;
	_test_eof1039: cs = 1039; goto _test_eof;
	_test_eof1040: cs = 1040; goto _test_eof;
	_test_eof1041: cs = 1041; goto _test_eof;
	_test_eof1042: cs = 1042; goto _test_eof;
	_test_eof1043: cs = 1043; goto _test_eof;
	_test_eof1044: cs = 1044; goto _test_eof;
	_test_eof1045: cs = 1045; goto _test_eof;
	_test_eof1046: cs = 1046; goto _test_eof;
	_test_eof1188: cs = 1188; goto _test_eof;
	_test_eof1047: cs = 1047; goto _test_eof;
	_test_eof1048: cs = 1048; goto _test_eof;
	_test_eof1049: cs = 1049; goto _test_eof;
	_test_eof1050: cs = 1050; goto _test_eof;
	_test_eof1051: cs = 1051; goto _test_eof;
	_test_eof1052: cs = 1052; goto _test_eof;
	_test_eof1053: cs = 1053; goto _test_eof;
	_test_eof1054: cs = 1054; goto _test_eof;
	_test_eof1055: cs = 1055; goto _test_eof;
	_test_eof1056: cs = 1056; goto _test_eof;
	_test_eof1057: cs = 1057; goto _test_eof;
	_test_eof1058: cs = 1058; goto _test_eof;
	_test_eof1059: cs = 1059; goto _test_eof;
	_test_eof1060: cs = 1060; goto _test_eof;
	_test_eof1061: cs = 1061; goto _test_eof;
	_test_eof1189: cs = 1189; goto _test_eof;
	_test_eof1190: cs = 1190; goto _test_eof;
	_test_eof1191: cs = 1191; goto _test_eof;
	_test_eof1062: cs = 1062; goto _test_eof;
	_test_eof1063: cs = 1063; goto _test_eof;
	_test_eof1064: cs = 1064; goto _test_eof;
	_test_eof1065: cs = 1065; goto _test_eof;
	_test_eof1066: cs = 1066; goto _test_eof;
	_test_eof1067: cs = 1067; goto _test_eof;
	_test_eof1068: cs = 1068; goto _test_eof;
	_test_eof1192: cs = 1192; goto _test_eof;
	_test_eof1069: cs = 1069; goto _test_eof;
	_test_eof1070: cs = 1070; goto _test_eof;
	_test_eof1071: cs = 1071; goto _test_eof;
	_test_eof1072: cs = 1072; goto _test_eof;
	_test_eof1073: cs = 1073; goto _test_eof;
	_test_eof1074: cs = 1074; goto _test_eof;
	_test_eof1075: cs = 1075; goto _test_eof;
	_test_eof1076: cs = 1076; goto _test_eof;
	_test_eof1077: cs = 1077; goto _test_eof;
	_test_eof1078: cs = 1078; goto _test_eof;
	_test_eof1079: cs = 1079; goto _test_eof;
	_test_eof1080: cs = 1080; goto _test_eof;
	_test_eof1081: cs = 1081; goto _test_eof;
	_test_eof1193: cs = 1193; goto _test_eof;
	_test_eof1082: cs = 1082; goto _test_eof;
	_test_eof1083: cs = 1083; goto _test_eof;
	_test_eof1084: cs = 1084; goto _test_eof;
	_test_eof1085: cs = 1085; goto _test_eof;
	_test_eof1086: cs = 1086; goto _test_eof;
	_test_eof1087: cs = 1087; goto _test_eof;
	_test_eof1088: cs = 1088; goto _test_eof;
	_test_eof1194: cs = 1194; goto _test_eof;
	_test_eof1089: cs = 1089; goto _test_eof;
	_test_eof1090: cs = 1090; goto _test_eof;
	_test_eof1091: cs = 1091; goto _test_eof;
	_test_eof1092: cs = 1092; goto _test_eof;
	_test_eof1093: cs = 1093; goto _test_eof;
	_test_eof1094: cs = 1094; goto _test_eof;
	_test_eof1195: cs = 1195; goto _test_eof;
	_test_eof1095: cs = 1095; goto _test_eof;
	_test_eof1096: cs = 1096; goto _test_eof;
	_test_eof1097: cs = 1097; goto _test_eof;
	_test_eof1098: cs = 1098; goto _test_eof;
	_test_eof1099: cs = 1099; goto _test_eof;
	_test_eof1100: cs = 1100; goto _test_eof;
	_test_eof1196: cs = 1196; goto _test_eof;
	_test_eof1101: cs = 1101; goto _test_eof;
	_test_eof1102: cs = 1102; goto _test_eof;
	_test_eof1103: cs = 1103; goto _test_eof;
	_test_eof1104: cs = 1104; goto _test_eof;
	_test_eof1105: cs = 1105; goto _test_eof;
	_test_eof1106: cs = 1106; goto _test_eof;
	_test_eof1107: cs = 1107; goto _test_eof;
	_test_eof1108: cs = 1108; goto _test_eof;
	_test_eof1197: cs = 1197; goto _test_eof;
	_test_eof1109: cs = 1109; goto _test_eof;
	_test_eof1110: cs = 1110; goto _test_eof;

	_test_eof: {}
	if ( p == eof )
	{
	switch ( cs ) {
	case 7:
	case 8:
	case 149:
	case 173:
	case 175:
	case 225:
	case 238:
	case 257:
	case 311:
	case 312:
	case 318:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 263:
	case 264:
	case 265:
	case 270:
	case 271:
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st261;}
	}
	break;
	case 158:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	break;
	case 279:
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	break;
	case 284:
	case 292:
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	break;
	case 293:
	case 294:
	case 295:
	case 304:
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	break;
	case 306:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st261;}
	}
	break;
	case 309:
	case 319:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	break;
	case 1115:
	{
		NOERR;
		if (escape) {
			cs = 1111; {p++; cs = 0; goto _out;}
		}
	}
	break;
	case 150:
	case 151:
	case 152:
	case 153:
	case 154:
	case 155:
	case 156:
	case 157:
	case 193:
	case 194:
	case 195:
	case 196:
	case 197:
	case 198:
	case 199:
	case 200:
	case 201:
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st261;}
	}
	break;
	case 322:
	case 323:
	case 324:
	case 325:
	case 326:
	case 327:
	case 328:
	{
		WARN(ZS_BAD_BASE64_CHAR);
		p--; {goto st261;}
	}
	break;
	case 329:
	case 330:
	case 331:
	case 332:
	case 333:
	case 334:
	case 335:
	case 336:
	case 337:
	case 338:
	case 339:
	case 340:
	case 341:
	case 342:
	case 343:
	case 344:
	case 345:
	case 346:
	case 347:
	case 348:
	case 349:
	case 350:
	case 351:
	case 352:
	case 353:
	case 354:
	case 355:
	case 356:
	case 357:
	case 358:
	case 359:
	case 360:
	case 361:
	case 362:
	case 363:
	case 364:
	case 365:
	case 366:
	case 367:
	case 368:
	case 369:
	case 370:
	case 371:
	case 372:
	case 373:
	case 374:
	case 375:
	case 376:
	case 377:
	case 378:
	case 379:
	case 380:
	case 381:
	case 382:
	case 383:
	case 384:
	case 385:
	case 386:
	case 387:
	case 388:
	case 389:
	case 390:
	case 391:
	case 392:
	case 393:
	case 394:
	case 395:
	case 396:
	case 397:
	case 398:
	case 399:
	case 400:
	case 401:
	case 402:
	case 403:
	case 404:
	case 405:
	case 406:
	case 407:
	case 408:
	case 409:
	case 410:
	case 411:
	case 412:
	case 413:
	case 414:
	case 415:
	case 416:
	case 417:
	case 418:
	case 419:
	case 420:
	case 421:
	case 422:
	case 423:
	case 424:
	case 425:
	case 426:
	case 427:
	case 428:
	case 429:
	case 430:
	case 431:
	case 432:
	case 433:
	case 434:
	case 435:
	case 436:
	case 437:
	case 438:
	case 439:
	case 440:
	case 441:
	case 442:
	case 443:
	case 444:
	case 445:
	case 446:
	case 447:
	case 448:
	case 449:
	case 450:
	case 451:
	case 452:
	case 453:
	case 454:
	case 455:
	case 456:
	case 457:
	case 458:
	case 459:
	case 460:
	{
		WARN(ZS_BAD_BITMAP);
		p--; {goto st261;}
	}
	break;
	case 461:
	case 468:
	case 469:
	case 470:
	case 477:
	case 479:
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	break;
	case 480:
	case 481:
	case 482:
	case 483:
	case 484:
	case 485:
	case 486:
	case 487:
	case 488:
	case 489:
	case 490:
	case 491:
	case 492:
	case 493:
	case 494:
	case 495:
	case 496:
	case 497:
	case 498:
	case 499:
	case 500:
	case 501:
	case 502:
	case 503:
	case 504:
	case 505:
	case 506:
	case 507:
	case 508:
	case 509:
	case 510:
	case 511:
	case 512:
	case 513:
	case 514:
	case 515:
	case 516:
	case 517:
	case 518:
	case 519:
	case 520:
	case 521:
	case 522:
	case 523:
	case 524:
	case 525:
	case 526:
	case 527:
	case 528:
	case 529:
	case 530:
	case 531:
	case 532:
	case 533:
	case 534:
	case 535:
	case 536:
	case 537:
	case 538:
	case 539:
	case 540:
	case 541:
	case 542:
	case 543:
	case 544:
	case 545:
	case 546:
	case 547:
	case 548:
	case 549:
	case 550:
	case 551:
	case 552:
	case 553:
	case 554:
	case 555:
	case 556:
	case 557:
	case 558:
	case 559:
	case 560:
	case 561:
	case 562:
	case 563:
	case 564:
	case 565:
	case 566:
	case 567:
	case 568:
	case 569:
	case 570:
	case 571:
	case 572:
	case 573:
	case 574:
	{
		WARN(ZS_BAD_ALGORITHM);
		p--; {goto st261;}
	}
	break;
	case 575:
	case 576:
	case 577:
	case 578:
	case 579:
	case 580:
	case 581:
	case 582:
	case 583:
	case 584:
	case 585:
	case 586:
	case 587:
	case 588:
	case 589:
	case 590:
	case 591:
	case 592:
	case 593:
	case 594:
	case 595:
	case 596:
	case 597:
	case 598:
	case 599:
	case 600:
	case 601:
	case 602:
	case 603:
	case 604:
	case 605:
	case 606:
	case 607:
	case 608:
	case 609:
	case 610:
	case 611:
	case 612:
	case 613:
	case 614:
	case 615:
	{
		WARN(ZS_BAD_CERT_TYPE);
		p--; {goto st261;}
	}
	break;
	case 5:
	case 9:
	case 10:
	case 241:
	case 618:
	case 619:
	case 620:
	case 621:
	case 622:
	case 623:
	case 637:
	case 641:
	case 645:
	case 649:
	case 650:
	case 651:
	case 652:
	case 653:
	case 654:
	case 655:
	case 656:
	case 657:
	case 658:
	case 659:
	case 660:
	case 661:
	case 664:
	case 665:
	case 666:
	case 734:
	case 735:
	case 736:
	case 737:
	case 738:
	case 743:
	case 744:
	case 745:
	case 746:
	case 747:
	case 748:
	case 749:
	case 750:
	case 751:
	case 752:
	case 753:
	case 754:
	case 755:
	case 756:
	case 757:
	case 760:
	case 761:
	case 762:
	case 763:
	case 764:
	case 765:
	case 766:
	case 774:
	case 780:
	case 781:
	case 788:
	case 789:
	case 790:
	case 799:
	case 800:
	case 839:
	case 842:
	case 843:
	case 854:
	case 855:
	case 856:
	case 857:
	case 858:
	case 859:
	case 860:
	case 861:
	case 862:
	case 863:
	case 864:
	case 865:
	case 994:
	case 995:
	case 996:
	case 1001:
	case 1002:
	case 1003:
	case 1004:
	case 1005:
	case 1006:
	case 1007:
	case 1008:
	case 1009:
	case 1027:
	case 1033:
	case 1036:
	case 1037:
	case 1038:
	case 1049:
	case 1050:
	case 1051:
	case 1062:
	case 1063:
	case 1064:
	case 1069:
	case 1082:
	case 1099:
	case 1100:
	case 1101:
	case 1102:
	case 1105:
	case 1106:
	case 1107:
	case 1108:
	case 1109:
	case 1110:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 3:
	case 16:
	case 17:
	case 20:
	case 21:
	case 22:
	case 23:
	case 24:
	case 27:
	case 28:
	case 30:
	case 31:
	case 32:
	case 34:
	case 35:
	case 36:
	case 37:
	case 39:
	case 40:
	case 41:
	case 43:
	case 44:
	case 45:
	case 48:
	case 49:
	case 50:
	case 51:
	case 53:
	case 55:
	case 56:
	case 57:
	case 58:
	case 60:
	case 61:
	case 62:
	case 63:
	case 64:
	case 65:
	case 66:
	case 67:
	case 68:
	case 69:
	case 71:
	case 72:
	case 75:
	case 76:
	case 78:
	case 80:
	case 83:
	case 84:
	case 85:
	case 86:
	case 89:
	case 90:
	case 91:
	case 92:
	case 94:
	case 97:
	case 100:
	case 101:
	case 102:
	case 103:
	case 105:
	case 106:
	case 108:
	case 110:
	case 111:
	case 112:
	case 115:
	case 116:
	case 118:
	case 120:
	case 122:
	case 123:
	case 124:
	case 126:
	case 127:
	case 128:
	case 130:
	case 132:
	case 133:
	case 136:
	case 137:
	case 139:
	case 141:
	case 142:
	case 148:
	case 163:
	case 167:
	case 227:
	case 228:
	case 230:
	case 231:
	case 232:
	case 234:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	break;
	case 287:
	case 288:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	break;
	case 296:
	case 297:
	case 298:
	case 303:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	break;
	case 266:
	case 267:
	case 268:
	case 269:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st261;}
	}
	break;
	case 299:
	case 300:
	case 301:
	case 302:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st261;}
	}
	break;
	case 313:
	case 314:
	case 315:
	case 316:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	break;
	case 222:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 243:
	case 244:
	case 245:
	case 246:
	case 247:
	case 248:
	case 249:
	case 250:
	case 251:
	case 252:
	case 253:
	case 254:
	case 255:
	case 256:
	case 259:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	break;
	case 285:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	break;
	case 462:
	case 463:
	case 471:
	case 472:
	case 478:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	break;
	case 624:
	case 625:
	case 626:
	case 628:
	case 630:
	case 632:
	case 662:
	case 663:
	case 728:
	case 729:
	case 730:
	case 731:
	case 732:
	case 733:
	case 739:
	case 740:
	case 741:
	case 742:
	case 758:
	case 759:
	case 778:
	case 779:
	case 782:
	case 783:
	case 791:
	case 792:
	case 793:
	case 794:
	case 801:
	case 802:
	case 844:
	case 845:
	case 846:
	case 847:
	case 852:
	case 853:
	case 997:
	case 998:
	case 999:
	case 1000:
	case 1010:
	case 1011:
	case 1012:
	case 1013:
	case 1014:
	case 1015:
	case 1039:
	case 1040:
	case 1041:
	case 1042:
	case 1043:
	case 1044:
	case 1052:
	case 1053:
	case 1054:
	case 1055:
	case 1056:
	case 1057:
	case 1065:
	case 1066:
	case 1070:
	case 1071:
	case 1095:
	case 1096:
	case 1097:
	case 1098:
	case 1103:
	case 1104:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 134:
	case 143:
	case 159:
	case 162:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	break;
	case 848:
	case 849:
	case 850:
	case 851:
	{
		WARN(ZS_BAD_TIMESTAMP_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 272:
	case 273:
	case 278:
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	break;
	case 667:
	case 668:
	case 669:
	case 670:
	{
		s->long_string = false;
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 307:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 308:
	case 310:
	case 317:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 616:
	case 617:
	case 671:
	case 672:
	case 1067:
	case 1068:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 767:
	case 768:
	case 769:
	case 772:
	case 773:
	case 775:
	{
		WARN(ZS_BAD_APL);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 784:
	case 785:
	case 786:
	case 787:
	case 795:
	case 796:
	case 797:
	case 798:
	case 1016:
	case 1017:
	case 1034:
	case 1035:
	case 1045:
	case 1046:
	case 1047:
	case 1048:
	case 1058:
	case 1059:
	case 1060:
	case 1061:
	case 1072:
	case 1073:
	case 1074:
	case 1075:
	case 1077:
	case 1078:
	case 1079:
	case 1080:
	case 1083:
	case 1084:
	case 1086:
	case 1087:
	case 1089:
	case 1090:
	case 1092:
	case 1093:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 1018:
	case 1019:
	case 1020:
	case 1021:
	case 1022:
	case 1023:
	case 1024:
	case 1025:
	case 1026:
	case 1028:
	case 1029:
	case 1030:
	case 1031:
	case 1032:
	{
		WARN(ZS_BAD_BASE32HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 803:
	case 804:
	case 807:
	case 816:
	case 817:
	case 818:
	case 823:
	case 824:
	case 825:
	case 830:
	case 831:
	case 832:
	case 835:
	case 837:
	case 838:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 809:
	case 810:
	case 811:
	case 812:
	case 813:
	case 814:
	case 815:
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 840:
	case 841:
	case 866:
	case 867:
	case 868:
	case 869:
	case 870:
	case 871:
	case 872:
	case 873:
	case 874:
	case 875:
	case 876:
	case 877:
	case 878:
	case 879:
	case 880:
	case 881:
	case 882:
	case 883:
	case 884:
	case 885:
	case 886:
	case 887:
	case 888:
	case 889:
	case 890:
	case 891:
	case 892:
	case 893:
	case 894:
	case 895:
	case 896:
	case 897:
	case 898:
	case 899:
	case 900:
	case 901:
	case 902:
	case 903:
	case 904:
	case 905:
	case 906:
	case 907:
	case 908:
	case 909:
	case 910:
	case 911:
	case 912:
	case 913:
	case 914:
	case 915:
	case 916:
	case 917:
	case 918:
	case 919:
	case 920:
	case 921:
	case 922:
	case 923:
	case 924:
	case 925:
	case 926:
	case 927:
	case 928:
	case 929:
	case 930:
	case 931:
	case 932:
	case 933:
	case 934:
	case 935:
	case 936:
	case 937:
	case 938:
	case 939:
	case 940:
	case 941:
	case 942:
	case 943:
	case 944:
	case 945:
	case 946:
	case 947:
	case 948:
	case 949:
	case 950:
	case 951:
	case 952:
	case 953:
	case 954:
	case 955:
	case 956:
	case 957:
	case 958:
	case 959:
	case 960:
	case 961:
	case 962:
	case 963:
	case 964:
	case 965:
	case 966:
	case 967:
	case 968:
	case 969:
	case 970:
	case 971:
	case 972:
	case 973:
	case 974:
	case 975:
	case 976:
	case 977:
	case 978:
	case 979:
	case 980:
	case 981:
	case 982:
	case 983:
	case 984:
	case 985:
	case 986:
	case 987:
	case 988:
	case 991:
	case 992:
	case 993:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 673:
	case 674:
	case 675:
	case 676:
	case 677:
	case 678:
	case 679:
	case 680:
	case 681:
	case 682:
	case 683:
	case 684:
	case 685:
	case 686:
	case 687:
	case 688:
	case 689:
	case 690:
	case 691:
	case 692:
	case 693:
	case 694:
	case 695:
	case 696:
	case 697:
	case 698:
	case 699:
	case 700:
	case 701:
	case 702:
	case 703:
	case 704:
	case 705:
	case 706:
	case 707:
	case 708:
	case 709:
	case 710:
	case 711:
	case 712:
	case 713:
	case 714:
	case 715:
	case 716:
	case 717:
	case 718:
	case 719:
	case 720:
	case 721:
	case 722:
	case 723:
	case 724:
	case 725:
	case 726:
	case 727:
	{
		WARN(ZS_BAD_LOC_DATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 6:
	case 11:
	case 12:
	case 19:
	case 171:
	case 174:
	case 191:
	case 224:
	case 226:
	case 236:
	case 237:
	case 239:
	case 240:
	case 242:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 15:
	case 205:
	case 258:
	case 260:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 4:
	case 18:
	case 25:
	case 26:
	case 29:
	case 33:
	case 38:
	case 42:
	case 46:
	case 47:
	case 52:
	case 54:
	case 59:
	case 70:
	case 73:
	case 74:
	case 77:
	case 79:
	case 81:
	case 82:
	case 87:
	case 88:
	case 93:
	case 95:
	case 96:
	case 98:
	case 99:
	case 104:
	case 107:
	case 109:
	case 113:
	case 114:
	case 117:
	case 119:
	case 121:
	case 125:
	case 129:
	case 131:
	case 138:
	case 229:
	case 233:
	case 235:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 202:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 168:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 805:
	case 806:
	case 819:
	case 820:
	case 826:
	case 827:
	case 833:
	case 834:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 989:
	case 990:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 1:
	case 140:
	case 172:
	case 204:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 135:
	case 169:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 290:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	break;
	case 627:
	case 629:
	case 631:
	case 633:
	case 634:
	case 635:
	case 636:
	case 638:
	case 639:
	case 640:
	case 642:
	case 643:
	case 644:
	case 646:
	case 647:
	case 648:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 2:
	case 144:
	case 145:
	case 146:
	case 147:
	case 164:
	case 165:
	case 166:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	break;
	case 274:
	case 275:
	case 276:
	case 277:
	case 280:
	case 281:
	case 282:
	case 283:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st261;}
	}
	break;
	case 770:
	case 771:
	case 776:
	case 777:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_APL);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 821:
	case 828:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 464:
	case 465:
	case 466:
	case 467:
	case 473:
	case 474:
	case 475:
	case 476:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st261;}
	}
	break;
	case 1076:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 808:
	case 836:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 1085:
	case 1088:
	case 1091:
	case 1094:
	{
		WARN(ZS_BAD_CHAR_DASH);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 1081:
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 192:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st261;}
	}
	break;
	case 170:
	case 177:
	case 178:
	case 179:
	case 180:
	case 181:
	case 182:
	case 183:
	case 184:
	case 185:
	case 186:
	case 187:
	case 188:
	case 189:
	case 190:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 161:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	break;
	case 206:
	case 208:
	case 209:
	case 210:
	case 211:
	case 212:
	case 213:
	case 214:
	case 215:
	case 216:
	case 217:
	case 218:
	case 219:
	case 220:
	case 221:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 13:
	case 176:
	case 207:
	case 223:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 286:
	case 289:
	case 291:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st261;}
	}
	break;
	case 822:
	case 829:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	break;
	case 14:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	case 203:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st261;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st261;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st261;}
	}
	break;
	}
	}

	_out: {}
	}


	// Check if the scanner state machine is in an uncovered state.
	bool extra_error = false;
	if (cs == 0) {
		ERR(ZS_UNCOVERED_STATE);
		extra_error = true;
	// Check for an unclosed multiline record.
	} else if (s->input.eof && s->multiline) {
		ERR(ZS_UNCLOSED_MULTILINE);
		extra_error = true;
	}

	// Treat the extra error.
	if (extra_error) {
		s->error.counter++;
		s->state = ZS_STATE_ERROR;

		// Copy the error context just for the part of the current line.
		s->buffer_length = 0;
		while (p < pe && *p != '\n' && s->buffer_length < 50) {
			s->buffer[s->buffer_length++] = *p++;
		}
		s->buffer[s->buffer_length++] = 0;

		// Execute the error callback.
		if (s->process.automatic && s->process.error != NULL) {
			s->process.error(s);
		}

		return;
	}

	// Storing scanner states.
	s->cs  = cs;
	s->top = top;
	memcpy(s->stack, stack, sizeof(stack));

	// Store the current parser position.
	s->input.current = p;

	// Storing r_data pointer.
	s->r_data_tail = rdata_tail - s->r_data;
}

__attribute__((visibility("default")))
int zs_parse_record(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return -1;
	}

	// Stop parsing if stop or after the final parsing.
	if (s->state == ZS_STATE_STOP || s->input.eof) {
		return -1;
	}

	// Check for the end of the input.
	if (s->input.current != s->input.end) {
		s->state = ZS_STATE_NONE;
		// Parse the next item.
		parse(s);
		return 0;
	}

	switch (s->state) {
	case ZS_STATE_NONE:
		// Indicate end of the input.
		s->state = ZS_STATE_EOF;
		return 0;
	case ZS_STATE_EOF:
		// Parse the final block.
		if (zs_set_input_string(s, "\n", 1) != 0) {
			return -1;
		}
		s->input.eof = true;

		parse(s);
		if (s->state == ZS_STATE_EOF) {
			return -1;
		}
		return 0;
	default:
		return -1;;
	}
}

__attribute__((visibility("default")))
int zs_parse_all(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return -1;
	}

	s->process.automatic = true;

	// Parse input block.
	parse(s);

	// Parse trailing newline-char block if not stop.
	if (s->state != ZS_STATE_STOP) {
		if (zs_set_input_string(s, "\n", 1) != 0) {
			return -1;
		}
		s->input.eof = true;
		parse(s);
	}

	// Check if any errors has occurred.
	if (s->error.counter > 0) {
		return -1;
	}

	return 0;
}
