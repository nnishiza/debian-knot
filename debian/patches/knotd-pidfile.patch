--- knot.orig/src/knot/ctl/knotc_main.c
+++ knot/src/knot/ctl/knotc_main.c
@@ -774,10 +774,6 @@ static int cmd_start(int argc, char *arg
 		return 1;
 	}
 	
-	/* Alter privileges. */
-	log_update_privileges(conf()->uid, conf()->gid);
-	proc_update_privileges(conf()->uid, conf()->gid);
-	
 	/* Fetch PID. */
 	char *pidfile = pid_filename();
 	pid_t pid = pid_read(pidfile);
@@ -806,16 +802,6 @@ static int cmd_start(int argc, char *arg
 			log_server_info("Forcing server start.\n");
 			pid_remove(pidfile);
 		}
-	} else {
-		/* Create empty PID file. */
-		FILE *f = fopen(pidfile, "w");
-		if (f == NULL) {
-			log_server_warning("PID file '%s' is not writeable.\n",
-			                   pidfile);
-			free(pidfile);
-			return 1;
-		}
-		fclose(f);
 	}
 	
 	/* Recompile zones if needed. */
@@ -840,7 +826,6 @@ static int cmd_start(int argc, char *arg
 		fflush(stdout);
 	}
 	if ((rc = cmd_exec(args, args_c)) < 0) {
-		pid_remove(pidfile);
 		rc = 1;
 	}
 	fflush(stderr);
@@ -875,11 +860,7 @@ static int cmd_stop(int argc, char *argv
 		                 "continue.\n");
 		return 1;
 	}
-	
-	/* Alter privileges. */
-	log_update_privileges(conf()->uid, conf()->gid);
-	proc_update_privileges(conf()->uid, conf()->gid);
-	
+
 	/* Fetch PID. */
 	char *pidfile = pid_filename();
 	pid_t pid = pid_read(pidfile);
--- knot.orig/src/knot/ctl/process.c
+++ knot/src/knot/ctl/process.c
@@ -25,6 +25,7 @@
 #include <unistd.h>
 #include <assert.h>
 #include <sys/wait.h>
+#include <sys/stat.h>
 
 #include "knot/common.h"
 #include "knot/ctl/process.h"
@@ -50,6 +51,11 @@ pid_t pid_read(const char* fn)
 	char buf[64];
 
 	if (fn) {
+		struct stat st;
+		if (stat(fn, &st) != 0) {
+			return KNOT_ENOENT;
+		}
+
 		FILE *fp = fopen(fn, "r");
 		if (!fp) {
 			return KNOT_ENOENT;
@@ -128,7 +134,7 @@ int pid_running(pid_t pid)
 	return kill(pid, 0) == 0;
 }
 
-void proc_update_privileges(int uid, int gid)
+int proc_update_privileges(int uid, int gid)
 {
 #ifdef HAVE_SETGROUPS
 	/* Drop supplementary groups. */
@@ -158,17 +164,21 @@ void proc_update_privileges(int uid, int
 	}
 	
 	/* Check storage writeability. */
+	int ret = KNOT_EOK;
 	char *lfile = strcdup(conf()->storage, "/knot.lock");
 	assert(lfile != NULL);
 	FILE* fp = fopen(lfile, "w");
 	if (fp == NULL) {
 		log_server_warning("Storage directory '%s' is not writeable.\n",
 		                   conf()->storage);
+		ret = KNOT_EACCES;
 	} else {
 		fclose(fp);
 		unlink(lfile);
 	}
+
 	free(lfile);
+	return ret;
 }
 
 pid_t pid_wait(pid_t proc, int *rc)
--- knot.orig/src/knot/ctl/process.h
+++ knot/src/knot/ctl/process.h
@@ -89,8 +89,10 @@ int pid_running(pid_t pid);
  * \param uid New user ID.
  * \param gid New group ID.
  *
+ * \retval KNOT_EOK on success.
+ * \retval KNOT_EACCESS if storage is not writeable.
  */
-void proc_update_privileges(int uid, int gid);
+int proc_update_privileges(int uid, int gid);
 
 /*!
  * \brief Wait for process to finish.
--- knot.orig/src/knot/main.c
+++ knot/src/knot/main.c
@@ -20,6 +20,7 @@
 #include <unistd.h>
 #include <getopt.h>
 #include <limits.h>
+#include <sys/stat.h>
 
 #ifdef HAVE_CAP_NG_H
 #include <cap-ng.h>
@@ -247,10 +248,51 @@ int main(int argc, char **argv)
 	}
 	log_server_info("\n");
 
+	/* Check PID. */
+	struct stat st;
+	unsigned do_start = 0;
+	char* pidfile = pid_filename();
+	int pid = pid_read(pidfile);
+	if (pid > 0 && pid_running(pid)) {
+		log_server_error("Server PID found, already running.\n");
+	} else if (stat(pidfile, &st) == 0) {
+		log_server_warning("PID file '%s' exists, another process "
+		                   "is starting or PID file is stale.\n",
+		                   pidfile);
+	} else {
+		do_start = 1;
+	}
+	if (!do_start) {
+		free(pidfile);
+		server_wait(server);
+		server_destroy(&server);
+		return 1;
+	}
+
+	/* Create empty PID file. */
+	FILE *f = fopen(pidfile, "w");
+	if (f == NULL) {
+		log_server_warning("PID file '%s' is not writeable.\n",
+		                   pidfile);
+		free(pidfile);
+		return 1;
+	}
+	fclose(f);
+
+	/* Alter PID file privileges. */
+	if (chown(pidfile, conf()->uid, conf()->gid) < 0) {
+		log_server_warning("Cannot change PID file ownership\n");
+		pid_remove(pidfile);
+		free(pidfile);
+		return 1;
+	}
+
 	/* Alter privileges. */
 	log_update_privileges(conf()->uid, conf()->gid);
-	proc_update_privileges(conf()->uid, conf()->gid);
-	
+	if (proc_update_privileges(conf()->uid, conf()->gid) != KNOT_EOK) {
+		return 1;
+	}
+
 	/* Load zones and add hook. */
 	zones_ns_conf_hook(conf(), server->nameserver);
 	conf_add_hook(conf(), CONF_ALL, zones_ns_conf_hook, server->nameserver);
@@ -258,7 +300,6 @@ int main(int argc, char **argv)
 	// Run server
 	int res = 0;
 	int has_pid = 0;
-	char* pidfile = pid_filename();
 	log_server_info("Starting server...\n");
 	if ((server_start(server)) == KNOT_EOK) {
 
